
simrigFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b218  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800b3b8  0800b3b8  0001b3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c4  0800b5c4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5cc  0800b5cc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e8c  20000168  0800b73c  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ff4  0800b73c  00021ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad1d  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac0  00000000  00000000  0003aeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00040020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad6b  00000000  00000000  00041568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c531  00000000  00000000  0005c2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d76  00000000  00000000  00078804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e57a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068ac  00000000  00000000  0010e5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000168 	.word	0x20000168
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3a0 	.word	0x0800b3a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000016c 	.word	0x2000016c
 80001dc:	0800b3a0 	.word	0x0800b3a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d013      	beq.n	80005d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005bc:	e000      	b.n	80005c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0f9      	beq.n	80005be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; (DataIdx < len); DataIdx++){
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e009      	b.n	8000608 <_write+0x26>
    	ITM_SendChar(*ptr++);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffc9 	bl	8000594 <ITM_SendChar>
	for(DataIdx = 0; (DataIdx < len); DataIdx++){
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf1      	blt.n	80005f4 <_write+0x12>
    }
     return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <LED_RGB_Init>:


void LED_RGB_Init(){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <LED_RGB_Init+0x20>)
 8000624:	f004 fc6e 	bl	8004f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <LED_RGB_Init+0x24>)
 800062c:	f004 fc6a 	bl	8004f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000630:	2100      	movs	r1, #0
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <LED_RGB_Init+0x28>)
 8000634:	f004 fc66 	bl	8004f04 <HAL_TIM_PWM_Start>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001d8 	.word	0x200001d8
 8000640:	20000220 	.word	0x20000220
 8000644:	20000268 	.word	0x20000268

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064e:	f001 f891 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000652:	f000 f86f 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000656:	f000 fc07 	bl	8000e68 <MX_GPIO_Init>
  MX_I2C1_Init();
 800065a:	f000 f8d3 	bl	8000804 <MX_I2C1_Init>
  MX_TIM1_Init();
 800065e:	f000 f8ff 	bl	8000860 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000662:	f000 f99d 	bl	80009a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000666:	f000 fa11 	bl	8000a8c <MX_TIM3_Init>
  MX_TIM4_Init();
 800066a:	f000 fa85 	bl	8000b78 <MX_TIM4_Init>
  MX_TIM5_Init();
 800066e:	f000 faf9 	bl	8000c64 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000672:	f000 fb6d 	bl	8000d50 <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 8000676:	f009 f8e3 	bl	8009840 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 800067a:	f000 fbcb 	bl	8000e14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_RGB_Init();
 800067e:	f7ff ffcd 	bl	800061c <LED_RGB_Init>
  uint8_t intensity = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t count = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  char txBuf[32];

  int mpu_status = mpu6050_init();
 800068e:	f000 fc71 	bl	8000f74 <mpu6050_init>
 8000692:	6238      	str	r0, [r7, #32]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (mpu_status != HAL_OK){
 8000694:	6a3b      	ldr	r3, [r7, #32]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d015      	beq.n	80006c6 <main+0x7e>
	  sprintf(txBuf,"%u\r\n",mpu_status);
 800069a:	463b      	mov	r3, r7
 800069c:	6a3a      	ldr	r2, [r7, #32]
 800069e:	4921      	ldr	r1, [pc, #132]	; (8000724 <main+0xdc>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f009 fe85 	bl	800a3b0 <siprintf>
	  CDC_Transmit_FS((uint8_t *)txBuf, strlen(txBuf));
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd99 	bl	80001e0 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	463b      	mov	r3, r7
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f009 f980 	bl	80099bc <CDC_Transmit_FS>
	  HAL_Delay(5);
 80006bc:	2005      	movs	r0, #5
 80006be:	f001 f8cb 	bl	8001858 <HAL_Delay>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e029      	b.n	800071a <main+0xd2>
  }else{
  while (1)
  {
	  *accelerationPtr = mpu6050_read(0);
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <main+0xe0>)
 80006c8:	681c      	ldr	r4, [r3, #0]
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 fcf2 	bl	80010b4 <mpu6050_read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	8023      	strh	r3, [r4, #0]
	  if(IMU_read_write){
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <main+0xe4>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01a      	beq.n	8000712 <main+0xca>
		  IMU_read_write = false;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <main+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		  sprintf(txBuf,"%d\r\n",*accelerationPtr);
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <main+0xe0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	461a      	mov	r2, r3
 80006ec:	463b      	mov	r3, r7
 80006ee:	4910      	ldr	r1, [pc, #64]	; (8000730 <main+0xe8>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f009 fe5d 	bl	800a3b0 <siprintf>
		  CDC_Transmit_FS((uint8_t *)txBuf, strlen(txBuf));
 80006f6:	463b      	mov	r3, r7
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd71 	bl	80001e0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	463b      	mov	r3, r7
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f009 f958 	bl	80099bc <CDC_Transmit_FS>
		  IMU_read_write = true;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <main+0xe4>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 8000712:	200a      	movs	r0, #10
 8000714:	f001 f8a0 	bl	8001858 <HAL_Delay>
	  *accelerationPtr = mpu6050_read(0);
 8000718:	e7d5      	b.n	80006c6 <main+0x7e>

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
  }
}
 800071a:	4618      	mov	r0, r3
 800071c:	372c      	adds	r7, #44	; 0x2c
 800071e:	46bd      	mov	sp, r7
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	bf00      	nop
 8000724:	0800b3b8 	.word	0x0800b3b8
 8000728:	20000000 	.word	0x20000000
 800072c:	20000004 	.word	0x20000004
 8000730:	0800b3c0 	.word	0x0800b3c0

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f009 fdb6 	bl	800a2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <SystemClock_Config+0xc8>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a26      	ldr	r2, [pc, #152]	; (80007fc <SystemClock_Config+0xc8>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <SystemClock_Config+0xc8>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <SystemClock_Config+0xcc>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <SystemClock_Config+0xcc>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <SystemClock_Config+0xcc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80007a4:	230c      	movs	r3, #12
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007a8:	2348      	movs	r3, #72	; 0x48
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007b0:	2303      	movs	r3, #3
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fea3 	bl	8004504 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c4:	f000 fbd0 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2102      	movs	r1, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f004 f905 	bl	80049f4 <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f0:	f000 fbba 	bl	8000f68 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f001 faf5 	bl	8001e30 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 fb8c 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000184 	.word	0x20000184
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	; 0x58
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f009 fd0b 	bl	800a2b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089e:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a0:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MX_TIM1_Init+0x13c>)
 80008a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_TIM1_Init+0x138>)
 80008a6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_TIM1_Init+0x138>)
 80008b4:	2263      	movs	r2, #99	; 0x63
 80008b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_TIM1_Init+0x138>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_TIM1_Init+0x138>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ca:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_TIM1_Init+0x138>)
 80008cc:	f004 fa72 	bl	8004db4 <HAL_TIM_Base_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80008d6:	f000 fb47 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008e4:	4619      	mov	r1, r3
 80008e6:	482c      	ldr	r0, [pc, #176]	; (8000998 <MX_TIM1_Init+0x138>)
 80008e8:	f004 fc7e 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008f2:	f000 fb39 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f6:	4828      	ldr	r0, [pc, #160]	; (8000998 <MX_TIM1_Init+0x138>)
 80008f8:	f004 faab 	bl	8004e52 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000902:	f000 fb31 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000912:	4619      	mov	r1, r3
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <MX_TIM1_Init+0x138>)
 8000916:	f004 fffb 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000920:	f000 fb22 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	; 0x60
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_TIM1_Init+0x138>)
 800094a:	f004 fb8b 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000954:	f000 fb08 	bl	8000f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <MX_TIM1_Init+0x138>)
 800097c:	f005 f836 	bl	80059ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000986:	f000 faef 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800098a:	4803      	ldr	r0, [pc, #12]	; (8000998 <MX_TIM1_Init+0x138>)
 800098c:	f000 fcb2 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000990:	bf00      	nop
 8000992:	3758      	adds	r7, #88	; 0x58
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001d8 	.word	0x200001d8
 800099c:	40010000 	.word	0x40010000

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009da:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009e8:	2263      	movs	r2, #99	; 0x63
 80009ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f8:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009fa:	f004 f9db 	bl	8004db4 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a04:	f000 fab0 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a16:	f004 fbe7 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a20:	f000 faa2 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a24:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a26:	f004 fa14 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a30:	f000 fa9a 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a44:	f004 ff64 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 fa8b 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a52:	2360      	movs	r3, #96	; 0x60
 8000a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a6a:	f004 fafb 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a74:	f000 fa78 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a7a:	f000 fc3b 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3738      	adds	r7, #56	; 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000220 	.word	0x20000220

08000a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000abe:	4a2d      	ldr	r2, [pc, #180]	; (8000b74 <MX_TIM3_Init+0xe8>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ac4:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ad2:	2264      	movs	r2, #100	; 0x64
 8000ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae2:	4823      	ldr	r0, [pc, #140]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ae4:	f004 f966 	bl	8004db4 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000aee:	f000 fa3b 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000b00:	f004 fb72 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b0a:	f000 fa2d 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b0e:	4818      	ldr	r0, [pc, #96]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000b10:	f004 f99f 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b1a:	f000 fa25 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4810      	ldr	r0, [pc, #64]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000b2e:	f004 feef 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b38:	f000 fa16 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	2360      	movs	r3, #96	; 0x60
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000b54:	f004 fa86 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b5e:	f000 fa03 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000b64:	f000 fbc6 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	; 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000268 	.word	0x20000268
 8000b74:	40000400 	.word	0x40000400

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	; 0x38
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	615a      	str	r2, [r3, #20]
 8000ba6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_TIM4_Init+0xe8>)
 8000bac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bb0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000bb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bbe:	2263      	movs	r2, #99	; 0x63
 8000bc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bce:	4823      	ldr	r0, [pc, #140]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bd0:	f004 f8f0 	bl	8004db4 <HAL_TIM_Base_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000bda:	f000 f9c5 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000be4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be8:	4619      	mov	r1, r3
 8000bea:	481c      	ldr	r0, [pc, #112]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bec:	f004 fafc 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000bf6:	f000 f9b7 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000bfc:	f004 f929 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c06:	f000 f9af 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000c1a:	f004 fe79 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c24:	f000 f9a0 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c28:	2360      	movs	r3, #96	; 0x60
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000c40:	f004 fa10 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000c4a:	f000 f98d 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM4_Init+0xe4>)
 8000c50:	f000 fb50 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200002b0 	.word	0x200002b0
 8000c60:	40000800 	.word	0x40000800

08000c64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	f107 0320 	add.w	r3, r7, #32
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <MX_TIM5_Init+0xe8>)
 8000c98:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7200-1;
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000c9c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ca0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000caa:	2263      	movs	r2, #99	; 0x63
 8000cac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cba:	4823      	ldr	r0, [pc, #140]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000cbc:	f004 f87a 	bl	8004db4 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000cc6:	f000 f94f 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481c      	ldr	r0, [pc, #112]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000cd8:	f004 fa86 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000ce2:	f000 f941 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000ce8:	f004 f8b3 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000cf2:	f000 f939 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000d06:	f004 fe03 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000d10:	f000 f92a 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000d2c:	f004 f99a 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000d36:	f000 f917 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_TIM5_Init+0xe4>)
 8000d3c:	f000 fada 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3738      	adds	r7, #56	; 0x38
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200002f8 	.word	0x200002f8
 8000d4c:	40000c00 	.word	0x40000c00

08000d50 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d78:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <MX_TIM9_Init+0xc0>)
 8000d7a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7200-1;
 8000d7c:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d7e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d82:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d8c:	2263      	movs	r2, #99	; 0x63
 8000d8e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000d9c:	481b      	ldr	r0, [pc, #108]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000d9e:	f004 f809 	bl	8004db4 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 f8de 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4619      	mov	r1, r3
 8000db8:	4814      	ldr	r0, [pc, #80]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000dba:	f004 fa15 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000dc4:	f000 f8d0 	bl	8000f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000dca:	f004 f842 	bl	8004e52 <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000dd4:	f000 f8c8 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd8:	2360      	movs	r3, #96	; 0x60
 8000dda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000df0:	f004 f938 	bl	8005064 <HAL_TIM_PWM_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000dfa:	f000 f8b5 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <MX_TIM9_Init+0xbc>)
 8000e00:	f000 fa78 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000e04:	bf00      	nop
 8000e06:	3730      	adds	r7, #48	; 0x30
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000340 	.word	0x20000340
 8000e10:	40014000 	.word	0x40014000

08000e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <MX_USART1_UART_Init+0x50>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f004 fe20 	bl	8005a90 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e56:	f000 f887 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000388 	.word	0x20000388
 8000e64:	40011000 	.word	0x40011000

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_GPIO_Init+0xc8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <MX_GPIO_Init+0xcc>)
 8000eda:	f000 ff77 	bl	8001dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <MX_GPIO_Init+0xcc>)
 8000ef8:	f000 fde4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <MX_GPIO_Init+0xcc>)
 8000f14:	f000 fdd6 	bl	8001ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2017      	movs	r0, #23
 8000f1e:	f000 fd9a 	bl	8001a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f22:	2017      	movs	r0, #23
 8000f24:	f000 fdb3 	bl	8001a8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40020400 	.word	0x40020400

08000f38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == IMU_INT_Pin){
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d107      	bne.n	8000f5a <HAL_GPIO_EXTI_Callback+0x22>
		*accelerationPtr = mpu6050_read(0);
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f8b0 	bl	80010b4 <mpu6050_read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	8023      	strh	r3, [r4, #0]
	}else{
		__NOP();
	}
}
 8000f58:	e000      	b.n	8000f5c <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8000f5a:	bf00      	nop
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000000 	.word	0x20000000

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <mpu6050_init>:
#include "mpu6050.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c1;

int mpu6050_init(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16

  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADDRESS<<1)+0, 1, 100);
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	21d0      	movs	r1, #208	; 0xd0
 8000f80:	4841      	ldr	r0, [pc, #260]	; (8001088 <mpu6050_init+0x114>)
 8000f82:	f001 fbb9 	bl	80026f8 <HAL_I2C_IsDeviceReady>
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if(ret==HAL_OK){
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d116      	bne.n	8000fbe <mpu6050_init+0x4a>
	  printf("Device connected\n"); //device ready
 8000f90:	483e      	ldr	r0, [pc, #248]	; (800108c <mpu6050_init+0x118>)
 8000f92:	f009 fa05 	bl	800a3a0 <puts>
	  printf("Unable to connect to device\n"); //device not ready
	  return ret;

  }

  uint8_t temp_data = FS_GYRO_500;
 8000f96:	2308      	movs	r3, #8
 8000f98:	71bb      	strb	r3, [r7, #6]
  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	221b      	movs	r2, #27
 8000faa:	21d0      	movs	r1, #208	; 0xd0
 8000fac:	4836      	ldr	r0, [pc, #216]	; (8001088 <mpu6050_init+0x114>)
 8000fae:	f001 f883 	bl	80020b8 <HAL_I2C_Mem_Write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if(ret==HAL_OK){
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d11c      	bne.n	8000ff6 <mpu6050_init+0x82>
 8000fbc:	e004      	b.n	8000fc8 <mpu6050_init+0x54>
	  printf("Unable to connect to device\n"); //device not ready
 8000fbe:	4834      	ldr	r0, [pc, #208]	; (8001090 <mpu6050_init+0x11c>)
 8000fc0:	f009 f9ee 	bl	800a3a0 <puts>
	  return ret;
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	e05b      	b.n	8001080 <mpu6050_init+0x10c>
	  printf("Configuring Gyro\n");//write_success
 8000fc8:	4832      	ldr	r0, [pc, #200]	; (8001094 <mpu6050_init+0x120>)
 8000fca:	f009 f9e9 	bl	800a3a0 <puts>
	}else{
		printf("Unable to Configure Gyro\n");//write_fail
  		return ret;
	}

  temp_data = FS_ACC_4G;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	71bb      	strb	r3, [r7, #6]
  ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	221c      	movs	r2, #28
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4828      	ldr	r0, [pc, #160]	; (8001088 <mpu6050_init+0x114>)
 8000fe6:	f001 f867 	bl	80020b8 <HAL_I2C_Mem_Write>
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    if(ret ==HAL_OK){
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11c      	bne.n	800102e <mpu6050_init+0xba>
 8000ff4:	e004      	b.n	8001000 <mpu6050_init+0x8c>
		printf("Unable to Configure Gyro\n");//write_fail
 8000ff6:	4828      	ldr	r0, [pc, #160]	; (8001098 <mpu6050_init+0x124>)
 8000ff8:	f009 f9d2 	bl	800a3a0 <puts>
  		return ret;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	e03f      	b.n	8001080 <mpu6050_init+0x10c>
    	printf("Configuring Accelerometer\n");//write_success
 8001000:	4826      	ldr	r0, [pc, #152]	; (800109c <mpu6050_init+0x128>)
 8001002:	f009 f9cd 	bl	800a3a0 <puts>
  	}else{
  		printf("Unable to configure Accelerometer\n");//write_fail
  		return ret;
  	}

    temp_data = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	226b      	movs	r2, #107	; 0x6b
 800101a:	21d0      	movs	r1, #208	; 0xd0
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <mpu6050_init+0x114>)
 800101e:	f001 f84b 	bl	80020b8 <HAL_I2C_Mem_Write>
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	if(ret==HAL_OK){
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d11c      	bne.n	8001066 <mpu6050_init+0xf2>
 800102c:	e004      	b.n	8001038 <mpu6050_init+0xc4>
  		printf("Unable to configure Accelerometer\n");//write_fail
 800102e:	481c      	ldr	r0, [pc, #112]	; (80010a0 <mpu6050_init+0x12c>)
 8001030:	f009 f9b6 	bl	800a3a0 <puts>
  		return ret;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	e023      	b.n	8001080 <mpu6050_init+0x10c>
		printf("Exiting from sleep mode\n");//write_success
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <mpu6050_init+0x130>)
 800103a:	f009 f9b1 	bl	800a3a0 <puts>
	}else{
		printf("Unable to exit sleep mode\n");//write_fail
		return ret;
	}

	temp_data = DATA_READY_INTERRUPT; //Data ready interrupt
 800103e:	2301      	movs	r3, #1
 8001040:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, INTERRUPT_REGISTER, 1, &temp_data, 1, 100);
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	1dbb      	adds	r3, r7, #6
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2238      	movs	r2, #56	; 0x38
 8001052:	21d0      	movs	r1, #208	; 0xd0
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <mpu6050_init+0x114>)
 8001056:	f001 f82f 	bl	80020b8 <HAL_I2C_Mem_Write>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	if(ret==HAL_OK){
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <mpu6050_init+0x104>
 8001064:	e004      	b.n	8001070 <mpu6050_init+0xfc>
		printf("Unable to exit sleep mode\n");//write_fail
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <mpu6050_init+0x134>)
 8001068:	f009 f99a 	bl	800a3a0 <puts>
		return ret;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	e007      	b.n	8001080 <mpu6050_init+0x10c>
		printf("Enabling Interrupt\n");//write_success
 8001070:	480e      	ldr	r0, [pc, #56]	; (80010ac <mpu6050_init+0x138>)
 8001072:	f009 f995 	bl	800a3a0 <puts>
 8001076:	e002      	b.n	800107e <mpu6050_init+0x10a>
	}else{
		printf("Failed to enable interrupt\n");//write_fail
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <mpu6050_init+0x13c>)
 800107a:	f009 f991 	bl	800a3a0 <puts>
	}
	return ret;
 800107e:	79fb      	ldrb	r3, [r7, #7]

}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000184 	.word	0x20000184
 800108c:	0800b3c8 	.word	0x0800b3c8
 8001090:	0800b3dc 	.word	0x0800b3dc
 8001094:	0800b3f8 	.word	0x0800b3f8
 8001098:	0800b40c 	.word	0x0800b40c
 800109c:	0800b428 	.word	0x0800b428
 80010a0:	0800b444 	.word	0x0800b444
 80010a4:	0800b468 	.word	0x0800b468
 80010a8:	0800b480 	.word	0x0800b480
 80010ac:	0800b49c 	.word	0x0800b49c
 80010b0:	0800b4b0 	.word	0x0800b4b0

080010b4 <mpu6050_read>:

int16_t mpu6050_read(int16_t i){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	uint8_t data[2];
	int16_t x_acc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1)+1, REG_DATA, 1, data, 2, 100);
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2302      	movs	r3, #2
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	223b      	movs	r2, #59	; 0x3b
 80010d0:	21d1      	movs	r1, #209	; 0xd1
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <mpu6050_read+0x40>)
 80010d4:	f001 f8ea 	bl	80022ac <HAL_I2C_Mem_Read>
	x_acc = (int16_t)data[0] << 8 + data[1];
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	461a      	mov	r2, r3
 80010dc:	7b7b      	ldrb	r3, [r7, #13]
 80010de:	3308      	adds	r3, #8
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	81fb      	strh	r3, [r7, #14]
	return x_acc;
 80010e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	else
	{
		return 0;
	}
//	printf("X_acc: %d\n",x_acc);
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000184 	.word	0x20000184

080010f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_MspInit+0x4c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_MspInit+0x4c>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_MspInit+0x4c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_MspInit+0x4c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <HAL_MspInit+0x4c>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_MspInit+0x4c>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a19      	ldr	r2, [pc, #100]	; (80011cc <HAL_I2C_MspInit+0x84>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12c      	bne.n	80011c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001186:	f44f 7310 	mov.w	r3, #576	; 0x240
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800118c:	2312      	movs	r3, #18
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <HAL_I2C_MspInit+0x8c>)
 80011a4:	f000 fc8e 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6413      	str	r3, [r2, #64]	; 0x40
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_I2C_MspInit+0x88>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020400 	.word	0x40020400

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a3d      	ldr	r2, [pc, #244]	; (80012dc <HAL_TIM_Base_MspInit+0x104>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10e      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a3b      	ldr	r2, [pc, #236]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001206:	e062      	b.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d10e      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
}
 800122e:	e04e      	b.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM3)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <HAL_TIM_Base_MspInit+0x10c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10e      	bne.n	8001258 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001244:	f043 0302 	orr.w	r3, r3, #2
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
}
 8001256:	e03a      	b.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM4)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <HAL_TIM_Base_MspInit+0x110>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10e      	bne.n	8001280 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
}
 800127e:	e026      	b.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM5)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <HAL_TIM_Base_MspInit+0x114>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10e      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	e012      	b.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM9)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_TIM_Base_MspInit+0x118>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10d      	bne.n	80012ce <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_TIM_Base_MspInit+0x108>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
}
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40000800 	.word	0x40000800
 80012ec:	40000c00 	.word	0x40000c00
 80012f0:	40014000 	.word	0x40014000

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6c      	ldr	r2, [pc, #432]	; (80014c4 <HAL_TIM_MspPostInit+0x1d0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d11f      	bne.n	8001356 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a6a      	ldr	r2, [pc, #424]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001344:	2301      	movs	r3, #1
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	485f      	ldr	r0, [pc, #380]	; (80014cc <HAL_TIM_MspPostInit+0x1d8>)
 8001350:	f000 fbb8 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001354:	e0b2      	b.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
  else if(htim->Instance==TIM2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800135e:	d11e      	bne.n	800139e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6313      	str	r3, [r2, #48]	; 0x30
 8001370:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800137c:	2320      	movs	r3, #32
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138c:	2301      	movs	r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	484d      	ldr	r0, [pc, #308]	; (80014cc <HAL_TIM_MspPostInit+0x1d8>)
 8001398:	f000 fb94 	bl	8001ac4 <HAL_GPIO_Init>
}
 800139c:	e08e      	b.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
  else if(htim->Instance==TIM3)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4b      	ldr	r2, [pc, #300]	; (80014d0 <HAL_TIM_MspPostInit+0x1dc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d11e      	bne.n	80013e6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a45      	ldr	r2, [pc, #276]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d4:	2302      	movs	r3, #2
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	483b      	ldr	r0, [pc, #236]	; (80014cc <HAL_TIM_MspPostInit+0x1d8>)
 80013e0:	f000 fb70 	bl	8001ac4 <HAL_GPIO_Init>
}
 80013e4:	e06a      	b.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
  else if(htim->Instance==TIM4)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <HAL_TIM_MspPostInit+0x1e0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d11e      	bne.n	800142e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800141c:	2302      	movs	r3, #2
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	482c      	ldr	r0, [pc, #176]	; (80014d8 <HAL_TIM_MspPostInit+0x1e4>)
 8001428:	f000 fb4c 	bl	8001ac4 <HAL_GPIO_Init>
}
 800142c:	e046      	b.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
  else if(htim->Instance==TIM5)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <HAL_TIM_MspPostInit+0x1e8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d11e      	bne.n	8001476 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001454:	2301      	movs	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001464:	2302      	movs	r3, #2
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	4619      	mov	r1, r3
 800146e:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_TIM_MspPostInit+0x1d8>)
 8001470:	f000 fb28 	bl	8001ac4 <HAL_GPIO_Init>
}
 8001474:	e022      	b.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
  else if(htim->Instance==TIM9)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_TIM_MspPostInit+0x1ec>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d11d      	bne.n	80014bc <HAL_TIM_MspPostInit+0x1c8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_TIM_MspPostInit+0x1d4>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149c:	2304      	movs	r3, #4
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014ac:	2303      	movs	r3, #3
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_TIM_MspPostInit+0x1d8>)
 80014b8:	f000 fb04 	bl	8001ac4 <HAL_GPIO_Init>
}
 80014bc:	bf00      	nop
 80014be:	3738      	adds	r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010000 	.word	0x40010000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40000400 	.word	0x40000400
 80014d4:	40000800 	.word	0x40000800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40000c00 	.word	0x40000c00
 80014e0:	40014000 	.word	0x40014000

080014e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_UART_MspInit+0x84>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d12c      	bne.n	8001560 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_UART_MspInit+0x88>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_UART_MspInit+0x88>)
 8001510:	f043 0310 	orr.w	r3, r3, #16
 8001514:	6453      	str	r3, [r2, #68]	; 0x44
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_UART_MspInit+0x88>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_UART_MspInit+0x88>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_UART_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800153e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001550:	2307      	movs	r3, #7
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_UART_MspInit+0x8c>)
 800155c:	f000 fab2 	bl	8001ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40011000 	.word	0x40011000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f92a 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT_Pin);
 80015cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015d0:	f000 fc16 	bl	8001e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <OTG_FS_IRQHandler+0x10>)
 80015de:	f001 fe64 	bl	80032aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200018b8 	.word	0x200018b8

080015ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
  }

  return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	605a      	str	r2, [r3, #4]
  return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_isatty>:

int _isatty(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f008 fdce 	bl	800a260 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20020000 	.word	0x20020000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	200003d0 	.word	0x200003d0
 80016f8:	20001ff8 	.word	0x20001ff8

080016fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001726:	490e      	ldr	r1, [pc, #56]	; (8001760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001728:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800173c:	4c0b      	ldr	r4, [pc, #44]	; (800176c <LoopFillZerobss+0x26>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174a:	f7ff ffd7 	bl	80016fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174e:	f008 fd8d 	bl	800a26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7fe ff79 	bl	8000648 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001764:	0800b5d4 	.word	0x0800b5d4
  ldr r2, =_sbss
 8001768:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800176c:	20001ff4 	.word	0x20001ff4

08001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f94f 	bl	8001a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fca6 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f967 	bl	8001aaa <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f92f 	bl	8001a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000008 	.word	0x20000008
 8001810:	20000010 	.word	0x20000010
 8001814:	2000000c 	.word	0x2000000c

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000010 	.word	0x20000010
 800183c:	200003d4 	.word	0x200003d4

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200003d4 	.word	0x200003d4

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000010 	.word	0x20000010

080018a0 <__NVIC_SetPriorityGrouping>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_EnableIRQ>:
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db0b      	blt.n	800192e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 021f 	and.w	r2, r3, #31
 800191c:	4907      	ldr	r1, [pc, #28]	; (800193c <__NVIC_EnableIRQ+0x38>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	2001      	movs	r0, #1
 8001926:	fa00 f202 	lsl.w	r2, r0, r2
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <SysTick_Config>:
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a0c:	d301      	bcc.n	8001a12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e00f      	b.n	8001a32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <SysTick_Config+0x40>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f7ff ff8e 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <SysTick_Config+0x40>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a2a:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <SysTick_Config+0x40>)
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000e010 	.word	0xe000e010

08001a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff29 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b086      	sub	sp, #24
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a68:	f7ff ff3e 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7ff ff8e 	bl	8001994 <NVIC_EncodePriority>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff5d 	bl	8001940 <__NVIC_SetPriority>
}
 8001a86:	bf00      	nop
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff31 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa2 	bl	80019fc <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e159      	b.n	8001d94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8148 	bne.w	8001d8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d005      	beq.n	8001b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d130      	bne.n	8001b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 0201 	and.w	r2, r3, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d017      	beq.n	8001bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d123      	bne.n	8001c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3208      	adds	r2, #8
 8001bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0203 	and.w	r2, r3, #3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80a2 	beq.w	8001d8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_GPIO_Init+0x2e8>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c66:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a49      	ldr	r2, [pc, #292]	; (8001db4 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x202>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_GPIO_Init+0x2f4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x1fe>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	; (8001dbc <HAL_GPIO_Init+0x2f8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x1fa>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <HAL_GPIO_Init+0x2fc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x1f6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a45      	ldr	r2, [pc, #276]	; (8001dc4 <HAL_GPIO_Init+0x300>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x1f2>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x204>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2ec>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_GPIO_Init+0x304>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f aea2 	bls.w	8001ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	; 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	787b      	ldrb	r3, [r7, #1]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de8:	e003      	b.n	8001df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dea:	887b      	ldrh	r3, [r7, #2]
 8001dec:	041a      	lsls	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	619a      	str	r2, [r3, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f88a 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e12b      	b.n	800209a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff f976 	bl	8001148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e94:	f002 ff66 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8001e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a81      	ldr	r2, [pc, #516]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d807      	bhi.n	8001eb4 <HAL_I2C_Init+0x84>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a80      	ldr	r2, [pc, #512]	; (80020a8 <HAL_I2C_Init+0x278>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	bf94      	ite	ls
 8001eac:	2301      	movls	r3, #1
 8001eae:	2300      	movhi	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	e006      	b.n	8001ec2 <HAL_I2C_Init+0x92>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a7d      	ldr	r2, [pc, #500]	; (80020ac <HAL_I2C_Init+0x27c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0e7      	b.n	800209a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4a78      	ldr	r2, [pc, #480]	; (80020b0 <HAL_I2C_Init+0x280>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9b      	lsrs	r3, r3, #18
 8001ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d802      	bhi.n	8001f04 <HAL_I2C_Init+0xd4>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3301      	adds	r3, #1
 8001f02:	e009      	b.n	8001f18 <HAL_I2C_Init+0xe8>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_I2C_Init+0x284>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	3301      	adds	r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	495c      	ldr	r1, [pc, #368]	; (80020a4 <HAL_I2C_Init+0x274>)
 8001f34:	428b      	cmp	r3, r1
 8001f36:	d819      	bhi.n	8001f6c <HAL_I2C_Init+0x13c>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e59      	subs	r1, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f46:	1c59      	adds	r1, r3, #1
 8001f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_I2C_Init+0x138>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e59      	subs	r1, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f66:	e051      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e04f      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d111      	bne.n	8001f98 <HAL_I2C_Init+0x168>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e012      	b.n	8001fbe <HAL_I2C_Init+0x18e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	0099      	lsls	r1, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Init+0x196>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e022      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10e      	bne.n	8001fec <HAL_I2C_Init+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1e58      	subs	r0, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	440b      	add	r3, r1
 8001fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	e00f      	b.n	800200c <HAL_I2C_Init+0x1dc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1e58      	subs	r0, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	0099      	lsls	r1, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002002:	3301      	adds	r3, #1
 8002004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	6809      	ldr	r1, [r1, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800203a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6911      	ldr	r1, [r2, #16]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68d2      	ldr	r2, [r2, #12]
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	430b      	orrs	r3, r1
 800204e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	000186a0 	.word	0x000186a0
 80020a8:	001e847f 	.word	0x001e847f
 80020ac:	003d08ff 	.word	0x003d08ff
 80020b0:	431bde83 	.word	0x431bde83
 80020b4:	10624dd3 	.word	0x10624dd3

080020b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d2:	f7ff fbb5 	bl	8001840 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	f040 80d9 	bne.w	8002298 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2319      	movs	r3, #25
 80020ec:	2201      	movs	r2, #1
 80020ee:	496d      	ldr	r1, [pc, #436]	; (80022a4 <HAL_I2C_Mem_Write+0x1ec>)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fdad 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0cc      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Write+0x56>
 800210a:	2302      	movs	r3, #2
 800210c:	e0c5      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d007      	beq.n	8002134 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2221      	movs	r2, #33	; 0x21
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a3a      	ldr	r2, [r7, #32]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a4d      	ldr	r2, [pc, #308]	; (80022a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002176:	88f8      	ldrh	r0, [r7, #6]
 8002178:	893a      	ldrh	r2, [r7, #8]
 800217a:	8979      	ldrh	r1, [r7, #10]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4603      	mov	r3, r0
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fbe4 	bl	8002954 <I2C_RequestMemoryWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d052      	beq.n	8002238 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e081      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fe2e 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d107      	bne.n	80021be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d11b      	bne.n	8002238 <HAL_I2C_Mem_Write+0x180>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	3b01      	subs	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1aa      	bne.n	8002196 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fe1a 	bl	8002e7e <I2C_WaitOnBTFFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b04      	cmp	r3, #4
 8002256:	d107      	bne.n	8002268 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e016      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	e000      	b.n	800229a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002298:	2302      	movs	r3, #2
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	00100002 	.word	0x00100002
 80022a8:	ffff0000 	.word	0xffff0000

080022ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	; 0x30
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	817b      	strh	r3, [r7, #10]
 80022be:	460b      	mov	r3, r1
 80022c0:	813b      	strh	r3, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c6:	f7ff fabb 	bl	8001840 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	f040 8208 	bne.w	80026ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2319      	movs	r3, #25
 80022e0:	2201      	movs	r2, #1
 80022e2:	497b      	ldr	r1, [pc, #492]	; (80024d0 <HAL_I2C_Mem_Read+0x224>)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fcb3 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
 80022f2:	e1fb      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_I2C_Mem_Read+0x56>
 80022fe:	2302      	movs	r3, #2
 8002300:	e1f4      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d007      	beq.n	8002328 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2222      	movs	r2, #34	; 0x22
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4a5b      	ldr	r2, [pc, #364]	; (80024d4 <HAL_I2C_Mem_Read+0x228>)
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800236a:	88f8      	ldrh	r0, [r7, #6]
 800236c:	893a      	ldrh	r2, [r7, #8]
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4603      	mov	r3, r0
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fb80 	bl	8002a80 <I2C_RequestMemoryRead>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e1b0      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e184      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d11b      	bne.n	80023fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e164      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d11b      	bne.n	800243a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002410:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	e144      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002450:	e138      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	2b03      	cmp	r3, #3
 8002458:	f200 80f1 	bhi.w	800263e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	2b01      	cmp	r3, #1
 8002462:	d123      	bne.n	80024ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fd49 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e139      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024aa:	e10b      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d14e      	bne.n	8002552 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2200      	movs	r2, #0
 80024bc:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_I2C_Mem_Read+0x22c>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fbc6 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e10e      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
 80024ce:	bf00      	nop
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002550:	e0b8      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	2200      	movs	r2, #0
 800255a:	4966      	ldr	r1, [pc, #408]	; (80026f4 <HAL_I2C_Mem_Read+0x448>)
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fb77 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0bf      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	2200      	movs	r2, #0
 80025b6:	494f      	ldr	r1, [pc, #316]	; (80026f4 <HAL_I2C_Mem_Read+0x448>)
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fb49 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e091      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800263c:	e042      	b.n	80026c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fc5c 	bl	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e04c      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b04      	cmp	r3, #4
 8002690:	d118      	bne.n	80026c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f47f aec2 	bne.w	8002452 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
  }
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	00010004 	.word	0x00010004

080026f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	603b      	str	r3, [r7, #0]
 8002704:	460b      	mov	r3, r1
 8002706:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff f89a 	bl	8001840 <HAL_GetTick>
 800270c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	f040 8111 	bne.w	8002942 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2319      	movs	r3, #25
 8002726:	2201      	movs	r2, #1
 8002728:	4988      	ldr	r1, [pc, #544]	; (800294c <HAL_I2C_IsDeviceReady+0x254>)
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa90 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e104      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_I2C_IsDeviceReady+0x50>
 8002744:	2302      	movs	r3, #2
 8002746:	e0fd      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0201 	orr.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2224      	movs	r2, #36	; 0x24
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a70      	ldr	r2, [pc, #448]	; (8002950 <HAL_I2C_IsDeviceReady+0x258>)
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fa4e 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c8:	d103      	bne.n	80027d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0b6      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff f82b 	bl	8001840 <HAL_GetTick>
 80027ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800281a:	e025      	b.n	8002868 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7ff f810 	bl	8001840 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <HAL_I2C_IsDeviceReady+0x13a>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22a0      	movs	r2, #160	; 0xa0
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2ba0      	cmp	r3, #160	; 0xa0
 8002872:	d005      	beq.n	8002880 <HAL_I2C_IsDeviceReady+0x188>
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_I2C_IsDeviceReady+0x188>
 800287a:	7dbb      	ldrb	r3, [r7, #22]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0cd      	beq.n	800281c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d129      	bne.n	80028ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2319      	movs	r3, #25
 80028c2:	2201      	movs	r2, #1
 80028c4:	4921      	ldr	r1, [pc, #132]	; (800294c <HAL_I2C_IsDeviceReady+0x254>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f9c2 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e036      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e02c      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002902:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	490f      	ldr	r1, [pc, #60]	; (800294c <HAL_I2C_IsDeviceReady+0x254>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f99e 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e012      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	3301      	adds	r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	f4ff af32 	bcc.w	8002792 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002942:	2302      	movs	r3, #2
  }
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000

08002954 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f960 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a4:	d103      	bne.n	80029ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e05f      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <I2C_RequestMemoryWrite+0x128>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f998 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04c      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	6a39      	ldr	r1, [r7, #32]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fa02 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d107      	bne.n	8002a16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e02b      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e021      	b.n	8002a70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f9dc 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d107      	bne.n	8002a62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e005      	b.n	8002a72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a66:	893b      	ldrh	r3, [r7, #8]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	00010002 	.word	0x00010002

08002a80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8c2 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae0:	d103      	bne.n	8002aea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0aa      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	4952      	ldr	r1, [pc, #328]	; (8002c4c <I2C_RequestMemoryRead+0x1cc>)
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8fa 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e097      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f964 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e076      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e021      	b.n	8002bac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b68:	893b      	ldrh	r3, [r7, #8]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f93e 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e050      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f923 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d107      	bne.n	8002bd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e035      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f82b 	bl	8002c50 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	d103      	bne.n	8002c18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e013      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <I2C_RequestMemoryRead+0x1cc>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f863 	bl	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c60:	e025      	b.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d021      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fde9 	bl	8001840 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e023      	b.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10d      	bne.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	e00c      	b.n	8002cee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d0b6      	beq.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0c:	e051      	b.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1c:	d123      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f043 0204 	orr.w	r2, r3, #4
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e046      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fd67 	bl	8001840 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e020      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d18d      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e08:	e02d      	b.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8ce 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e02d      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d021      	beq.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fd0d 	bl	8001840 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d116      	bne.n	8002e66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e007      	b.n	8002e76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d1ca      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8a:	e02d      	b.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f88d 	bl	8002fac <I2C_IsAcknowledgeFailed>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e02d      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d021      	beq.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea4:	f7fe fccc 	bl	8001840 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d1ca      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f0c:	e042      	b.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d119      	bne.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0210 	mvn.w	r2, #16
 8002f24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e029      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7fe fc76 	bl	8001840 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0220 	orr.w	r2, r3, #32
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e007      	b.n	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d1b5      	bne.n	8002f0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d11b      	bne.n	8002ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0204 	orr.w	r2, r3, #4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800300a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300c:	b08f      	sub	sp, #60	; 0x3c
 800300e:	af0a      	add	r7, sp, #40	; 0x28
 8003010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e10f      	b.n	800323c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f006 fe08 	bl	8009c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2203      	movs	r2, #3
 8003040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 f8ef 	bl	800623e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	687e      	ldr	r6, [r7, #4]
 8003068:	466d      	mov	r5, sp
 800306a:	f106 0410 	add.w	r4, r6, #16
 800306e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800307a:	e885 0003 	stmia.w	r5, {r0, r1}
 800307e:	1d33      	adds	r3, r6, #4
 8003080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003082:	6838      	ldr	r0, [r7, #0]
 8003084:	f002 ffc6 	bl	8006014 <USB_CoreInit>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0d0      	b.n	800323c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 f8dd 	bl	8006260 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	e04a      	b.n	8003142 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	333d      	adds	r3, #61	; 0x3d
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	333c      	adds	r3, #60	; 0x3c
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	b298      	uxth	r0, r3
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3344      	adds	r3, #68	; 0x44
 80030e8:	4602      	mov	r2, r0
 80030ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3340      	adds	r3, #64	; 0x40
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3348      	adds	r3, #72	; 0x48
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	; 0x4c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3354      	adds	r3, #84	; 0x54
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	3301      	adds	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	d3af      	bcc.n	80030ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e044      	b.n	80031dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	3301      	adds	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3b5      	bcc.n	8003152 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	687e      	ldr	r6, [r7, #4]
 80031ee:	466d      	mov	r5, sp
 80031f0:	f106 0410 	add.w	r4, r6, #16
 80031f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003200:	e885 0003 	stmia.w	r5, {r0, r1}
 8003204:	1d33      	adds	r3, r6, #4
 8003206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003208:	6838      	ldr	r0, [r7, #0]
 800320a:	f003 f875 	bl	80062f8 <USB_DevInit>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e00d      	b.n	800323c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f004 f9c4 	bl	80075c2 <USB_DevDisconnect>

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003244 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_Start+0x1c>
 800325c:	2302      	movs	r3, #2
 800325e:	e020      	b.n	80032a2 <HAL_PCD_Start+0x5e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	2b01      	cmp	r3, #1
 800326e:	d109      	bne.n	8003284 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003274:	2b01      	cmp	r3, #1
 8003276:	d005      	beq.n	8003284 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f002 ffc7 	bl	800621c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 f974 	bl	8007580 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032aa:	b590      	push	{r4, r7, lr}
 80032ac:	b08d      	sub	sp, #52	; 0x34
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f004 fa32 	bl	800772a <USB_GetMode>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 848a 	bne.w	8003be2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 f996 	bl	8007604 <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8480 	beq.w	8003be0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 f983 	bl	8007604 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d107      	bne.n	8003318 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f002 0202 	and.w	r2, r2, #2
 8003316:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 f971 	bl	8007604 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d161      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0210 	bic.w	r2, r2, #16
 800333a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	3304      	adds	r3, #4
 800335a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	0c5b      	lsrs	r3, r3, #17
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	2b02      	cmp	r3, #2
 8003366:	d124      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d035      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800337e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003382:	b29b      	uxth	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	6a38      	ldr	r0, [r7, #32]
 8003388:	f003 ffa8 	bl	80072dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003398:	441a      	add	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6a1a      	ldr	r2, [r3, #32]
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033aa:	441a      	add	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	e016      	b.n	80033e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	0c5b      	lsrs	r3, r3, #17
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d110      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c4:	2208      	movs	r2, #8
 80033c6:	4619      	mov	r1, r3
 80033c8:	6a38      	ldr	r0, [r7, #32]
 80033ca:	f003 ff87 	bl	80072dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033da:	441a      	add	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0210 	orr.w	r2, r2, #16
 80033ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f004 f905 	bl	8007604 <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003404:	f040 80a7 	bne.w	8003556 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 f90a 	bl	800762a <USB_ReadDevAllOutEpInterrupt>
 8003416:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003418:	e099      	b.n	800354e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 808e 	beq.w	8003542 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f004 f92e 	bl	8007692 <USB_ReadDevOutEPInterrupt>
 8003436:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	2301      	movs	r3, #1
 8003452:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fec2 	bl	80041e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	2308      	movs	r3, #8
 8003476:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 ff98 	bl	80043b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	461a      	mov	r2, r3
 8003498:	2310      	movs	r3, #16
 800349a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d030      	beq.n	8003508 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d109      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	4413      	add	r3, r2
 80034d8:	3304      	adds	r3, #4
 80034da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	78db      	ldrb	r3, [r3, #3]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2200      	movs	r2, #0
 80034e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f006 fca7 	bl	8009e44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003502:	461a      	mov	r2, r3
 8003504:	2302      	movs	r3, #2
 8003506:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	2320      	movs	r3, #32
 8003522:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	461a      	mov	r2, r3
 800353c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003540:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	3301      	adds	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af62 	bne.w	800341a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f004 f852 	bl	8007604 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356a:	f040 80db 	bne.w	8003724 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 f873 	bl	800765e <USB_ReadDevAllInEpInterrupt>
 8003578:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800357e:	e0cd      	b.n	800371c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80c2 	beq.w	8003710 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f004 f899 	bl	80076ce <USB_ReadDevInEPInterrupt>
 800359c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d057      	beq.n	8003658 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	2201      	movs	r2, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c8:	4013      	ands	r3, r2
 80035ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	461a      	mov	r2, r3
 80035da:	2301      	movs	r3, #1
 80035dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d132      	bne.n	800364c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	334c      	adds	r3, #76	; 0x4c
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	3348      	adds	r3, #72	; 0x48
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4419      	add	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4403      	add	r3, r0
 800361a:	334c      	adds	r3, #76	; 0x4c
 800361c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d113      	bne.n	800364c <HAL_PCD_IRQHandler+0x3a2>
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3354      	adds	r3, #84	; 0x54
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003644:	461a      	mov	r2, r3
 8003646:	2101      	movs	r1, #1
 8003648:	f004 f8a0 	bl	800778c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f006 fb7b 	bl	8009d4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366e:	461a      	mov	r2, r3
 8003670:	2308      	movs	r3, #8
 8003672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	461a      	mov	r2, r3
 800368c:	2310      	movs	r3, #16
 800368e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	461a      	mov	r2, r3
 80036a8:	2340      	movs	r3, #64	; 0x40
 80036aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d023      	beq.n	80036fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b8:	6a38      	ldr	r0, [r7, #32]
 80036ba:	f002 ff81 	bl	80065c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3338      	adds	r3, #56	; 0x38
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	78db      	ldrb	r3, [r3, #3]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2200      	movs	r2, #0
 80036de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f006 fbbe 	bl	8009e68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	461a      	mov	r2, r3
 80036fa:	2302      	movs	r3, #2
 80036fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fcdb 	bl	80040c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	3301      	adds	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f af2e 	bne.w	8003580 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 ff6b 	bl	8007604 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003738:	d122      	bne.n	8003780 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003754:	2b01      	cmp	r3, #1
 8003756:	d108      	bne.n	800376a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fec2 	bl	80044ec <HAL_PCDEx_LPM_Callback>
 8003768:	e002      	b.n	8003770 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f006 fb5c 	bl	8009e28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800377e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f003 ff3d 	bl	8007604 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d112      	bne.n	80037bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f006 fb18 	bl	8009ddc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 ff1f 	bl	8007604 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	f040 80b7 	bne.w	8003942 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2110      	movs	r1, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fee6 	bl	80065c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f8:	e046      	b.n	8003888 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800380c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800382c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003840:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003852:	0151      	lsls	r1, r2, #5
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	440a      	add	r2, r1
 8003858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800385c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003860:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800387c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003880:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	3301      	adds	r3, #1
 8003886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	429a      	cmp	r2, r3
 8003890:	d3b3      	bcc.n	80037fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038be:	f043 030b 	orr.w	r3, r3, #11
 80038c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f043 030b 	orr.w	r3, r3, #11
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	e015      	b.n	8003908 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003902:	f043 030b 	orr.w	r3, r3, #11
 8003906:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003916:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800391a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800392c:	461a      	mov	r2, r3
 800392e:	f003 ff2d 	bl	800778c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fe5c 	bl	8007604 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d124      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f003 fef2 	bl	8007746 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fea7 	bl	80066ba <USB_GetDevSpeed>
 800396c:	4603      	mov	r3, r0
 800396e:	461a      	mov	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681c      	ldr	r4, [r3, #0]
 8003978:	f001 f9e8 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 800397c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	4620      	mov	r0, r4
 8003988:	f002 fba6 	bl	80060d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f006 fa06 	bl	8009d9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fe2c 	bl	8007604 <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d10a      	bne.n	80039cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f006 f9e3 	bl	8009d82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f002 0208 	and.w	r2, r2, #8
 80039ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fe17 	bl	8007604 <USB_ReadInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d122      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ec:	2301      	movs	r3, #1
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
 80039f0:	e014      	b.n	8003a1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d105      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fb27 	bl	8004064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	3301      	adds	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d3e5      	bcc.n	80039f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 fdea 	bl	8007604 <USB_ReadInterrupts>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d13b      	bne.n	8003ab4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	e02b      	b.n	8003a9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3340      	adds	r3, #64	; 0x40
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d115      	bne.n	8003a94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da12      	bge.n	8003a94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	333f      	adds	r3, #63	; 0x3f
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fae8 	bl	8004064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	3301      	adds	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3ce      	bcc.n	8003a42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fda3 	bl	8007604 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac8:	d155      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aca:	2301      	movs	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	e045      	b.n	8003b5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d12e      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003af8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da2b      	bge.n	8003b56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d121      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b52:	6053      	str	r3, [r2, #4]
            break;
 8003b54:	e007      	b.n	8003b66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	3301      	adds	r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3b4      	bcc.n	8003ad0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fd42 	bl	8007604 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d10a      	bne.n	8003ba2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f006 f97d 	bl	8009e8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fd2c 	bl	8007604 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d115      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f006 f96d 	bl	8009ea8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	e000      	b.n	8003be2 <HAL_PCD_IRQHandler+0x938>
      return;
 8003be0:	bf00      	nop
    }
  }
}
 8003be2:	3734      	adds	r7, #52	; 0x34
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd90      	pop	{r4, r7, pc}

08003be8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_PCD_SetAddress+0x1a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e013      	b.n	8003c2a <HAL_PCD_SetAddress+0x42>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 fc8a 	bl	8007534 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	70fb      	strb	r3, [r7, #3]
 8003c44:	460b      	mov	r3, r1
 8003c46:	803b      	strh	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	da0f      	bge.n	8003c78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 020f 	and.w	r2, r3, #15
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	3338      	adds	r3, #56	; 0x38
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	705a      	strb	r2, [r3, #1]
 8003c76:	e00f      	b.n	8003c98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 020f 	and.w	r2, r3, #15
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ca4:	883a      	ldrh	r2, [r7, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	78ba      	ldrb	r2, [r7, #2]
 8003cae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cc2:	78bb      	ldrb	r3, [r7, #2]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d102      	bne.n	8003cce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_PCD_EP_Open+0xaa>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e00e      	b.n	8003cfa <HAL_PCD_EP_Open+0xc8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f002 fd0a 	bl	8006704 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da0f      	bge.n	8003d36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	3338      	adds	r3, #56	; 0x38
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	705a      	strb	r2, [r3, #1]
 8003d34:	e00f      	b.n	8003d56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_PCD_EP_Close+0x6e>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e00e      	b.n	8003d8e <HAL_PCD_EP_Close+0x8c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fd48 	bl	8006814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	460b      	mov	r3, r1
 8003da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d102      	bne.n	8003df2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	f003 f827 	bl	8006e5c <USB_EP0StartXfer>
 8003e0e:	e008      	b.n	8003e22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	f002 fdd5 	bl	80069cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	3338      	adds	r3, #56	; 0x38
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2200      	movs	r2, #0
 8003e94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d102      	bne.n	8003eb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6979      	ldr	r1, [r7, #20]
 8003ece:	f002 ffc5 	bl	8006e5c <USB_EP0StartXfer>
 8003ed2:	e008      	b.n	8003ee6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6979      	ldr	r1, [r7, #20]
 8003ee2:	f002 fd73 	bl	80069cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 020f 	and.w	r2, r3, #15
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d901      	bls.n	8003f0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e050      	b.n	8003fb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da0f      	bge.n	8003f36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3338      	adds	r3, #56	; 0x38
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	705a      	strb	r2, [r3, #1]
 8003f34:	e00d      	b.n	8003f52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	3304      	adds	r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_PCD_EP_SetStall+0x82>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e01e      	b.n	8003fb0 <HAL_PCD_EP_SetStall+0xc0>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 fa03 	bl	800738c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f003 fbf3 	bl	800778c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d901      	bls.n	8003fd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	da0f      	bge.n	8003ffe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	3338      	adds	r3, #56	; 0x38
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	705a      	strb	r2, [r3, #1]
 8003ffc:	e00f      	b.n	800401e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	b2da      	uxtb	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_PCD_EP_ClrStall+0x86>
 800403a:	2302      	movs	r3, #2
 800403c:	e00e      	b.n	800405c <HAL_PCD_EP_ClrStall+0xa4>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68f9      	ldr	r1, [r7, #12]
 800404c:	4618      	mov	r0, r3
 800404e:	f003 fa0b 	bl	8007468 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	da0c      	bge.n	8004092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 020f 	and.w	r2, r3, #15
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3338      	adds	r3, #56	; 0x38
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e00c      	b.n	80040ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	3304      	adds	r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 f82a 	bl	800710c <USB_EPStopXfer>
 80040b8:	4603      	mov	r3, r0
 80040ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040bc:	7afb      	ldrb	r3, [r7, #11]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b08a      	sub	sp, #40	; 0x28
 80040ca:	af02      	add	r7, sp, #8
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	3338      	adds	r3, #56	; 0x38
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1a      	ldr	r2, [r3, #32]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d901      	bls.n	80040fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06c      	b.n	80041d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	429a      	cmp	r2, r3
 8004112:	d902      	bls.n	800411a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3303      	adds	r3, #3
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004122:	e02b      	b.n	800417c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d902      	bls.n	8004140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3303      	adds	r3, #3
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6919      	ldr	r1, [r3, #16]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004158:	b2db      	uxtb	r3, r3
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4603      	mov	r3, r0
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f003 f87e 	bl	8007260 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	441a      	add	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	441a      	add	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	b29b      	uxth	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d809      	bhi.n	80041a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1a      	ldr	r2, [r3, #32]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800419a:	429a      	cmp	r2, r3
 800419c:	d203      	bcs.n	80041a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1be      	bne.n	8004124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d811      	bhi.n	80041d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2201      	movs	r2, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d2:	4013      	ands	r3, r2
 80041d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	333c      	adds	r3, #60	; 0x3c
 80041f8:	3304      	adds	r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d17b      	bne.n	800430e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	f240 80b9 	bls.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b3 	beq.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004248:	6093      	str	r3, [r2, #8]
 800424a:	e0a7      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	2320      	movs	r3, #32
 8004266:	6093      	str	r3, [r2, #8]
 8004268:	e098      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8093 	bne.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90f      	bls.n	800429e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e07e      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	0159      	lsls	r1, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	440b      	add	r3, r1
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e8:	461a      	mov	r2, r3
 80042ea:	2101      	movs	r1, #1
 80042ec:	f003 fa4e 	bl	800778c <USB_EP0_OutStart>
 80042f0:	e006      	b.n	8004300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f005 fd06 	bl	8009d18 <HAL_PCD_DataOutStageCallback>
 800430c:	e046      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d124      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	461a      	mov	r2, r3
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	6093      	str	r3, [r2, #8]
 8004334:	e032      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	461a      	mov	r2, r3
 800434e:	2320      	movs	r3, #32
 8004350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f005 fcdd 	bl	8009d18 <HAL_PCD_DataOutStageCallback>
 800435e:	e01d      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d114      	bne.n	8004390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004388:	461a      	mov	r2, r3
 800438a:	2100      	movs	r1, #0
 800438c:	f003 f9fe 	bl	800778c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fcbe 	bl	8009d18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	4f54300a 	.word	0x4f54300a
 80043ac:	4f54310a 	.word	0x4f54310a

080043b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	333c      	adds	r3, #60	; 0x3c
 80043c8:	3304      	adds	r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <PCD_EP_OutSetupPacket_int+0x88>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d90e      	bls.n	8004404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f005 fc75 	bl	8009cf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <PCD_EP_OutSetupPacket_int+0x88>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d90c      	bls.n	800442c <PCD_EP_OutSetupPacket_int+0x7c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004424:	461a      	mov	r2, r3
 8004426:	2101      	movs	r1, #1
 8004428:	f003 f9b0 	bl	800778c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	4f54300a 	.word	0x4f54300a

0800443c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	4613      	mov	r3, r2
 800444a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800445a:	883b      	ldrh	r3, [r7, #0]
 800445c:	0419      	lsls	r1, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	430a      	orrs	r2, r1
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e028      	b.n	80044bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e00d      	b.n	800449a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	3301      	adds	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	3b01      	subs	r3, #1
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d3ec      	bcc.n	800447e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044a4:	883b      	ldrh	r3, [r7, #0]
 80044a6:	0418      	lsls	r0, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	4302      	orrs	r2, r0
 80044b4:	3340      	adds	r3, #64	; 0x40
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e267      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d075      	beq.n	800460e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d00c      	beq.n	8004548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b85      	ldr	r3, [pc, #532]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d112      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453a:	4b82      	ldr	r3, [pc, #520]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d10b      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05b      	beq.n	800460c <HAL_RCC_OscConfig+0x108>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d157      	bne.n	800460c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e242      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x74>
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e01d      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x98>
 8004582:	4b70      	ldr	r3, [pc, #448]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6f      	ldr	r2, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6c      	ldr	r2, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 800459c:	4b69      	ldr	r3, [pc, #420]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a68      	ldr	r2, [pc, #416]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fd f940 	bl	8001840 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd f93c 	bl	8001840 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e207      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0xc0>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd f92c 	bl	8001840 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd f928 	bl	8001840 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1f3      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	4b51      	ldr	r3, [pc, #324]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0xe8>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d063      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462e:	2b08      	cmp	r3, #8
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e1c7      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	e03a      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004674:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd f8e1 	bl	8001840 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd f8dd 	bl	8001840 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1a8      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4925      	ldr	r1, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd f8c0 	bl	8001840 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd f8bc 	bl	8001840 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e187      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x248>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd f8a0 	bl	8001840 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd f89c 	bl	8001840 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e167      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x200>
 8004722:	e01b      	b.n	800475c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x248>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd f889 	bl	8001840 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	e00e      	b.n	8004750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004732:	f7fd f885 	bl	8001840 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d907      	bls.n	8004750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e150      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ea      	bne.n	8004732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8097 	beq.w	8004898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476e:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b77      	ldr	r3, [pc, #476]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b74      	ldr	r3, [pc, #464]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a73      	ldr	r2, [pc, #460]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fd f845 	bl	8001840 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd f841 	bl	8001840 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e10c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x2ea>
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a63      	ldr	r2, [pc, #396]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x30c>
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 8004810:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b55      	ldr	r3, [pc, #340]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd f806 	bl	8001840 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd f802 	bl	8001840 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0cb      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	4b49      	ldr	r3, [pc, #292]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCC_OscConfig+0x334>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fc fff0 	bl	8001840 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fc ffec 	bl	8001840 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0b5      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4a38      	ldr	r2, [pc, #224]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a1 	beq.w	80049e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d05c      	beq.n	8004968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d141      	bne.n	800493a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCC_OscConfig+0x478>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fc ffc0 	bl	8001840 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fc ffbc 	bl	8001840 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e087      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fc ff95 	bl	8001840 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491a:	f7fc ff91 	bl	8001840 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e05c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x416>
 8004938:	e054      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fc ff7e 	bl	8001840 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004948:	f7fc ff7a 	bl	8001840 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e045      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x444>
 8004966:	e03d      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e038      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
 800497c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d028      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d121      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d11a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0cc      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d90c      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d044      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d119      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e067      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4934      	ldr	r1, [pc, #208]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fc feac 	bl	8001840 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fc fea8 	bl	8001840 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d20c      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fe0c 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023c00 	.word	0x40023c00
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800b514 	.word	0x0800b514
 8004bb8:	20000008 	.word	0x20000008
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b090      	sub	sp, #64	; 0x40
 8004bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
 8004bcc:	2300      	movs	r3, #0
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d00d      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x40>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	f200 80a1 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf2:	e09b      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bf8:	e09b      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bfe:	e098      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c00:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d028      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	627a      	str	r2, [r7, #36]	; 0x24
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c2c:	fb03 f201 	mul.w	r2, r3, r1
 8004c30:	2300      	movs	r3, #0
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c40:	460a      	mov	r2, r1
 8004c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c46:	4413      	add	r3, r2
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c5a:	f7fb fb19 	bl	8000290 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4613      	mov	r3, r2
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e053      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	2200      	movs	r2, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	617a      	str	r2, [r7, #20]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c7a:	f04f 0b00 	mov.w	fp, #0
 8004c7e:	4652      	mov	r2, sl
 8004c80:	465b      	mov	r3, fp
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	0159      	lsls	r1, r3, #5
 8004c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c90:	0150      	lsls	r0, r2, #5
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	ebb2 080a 	subs.w	r8, r2, sl
 8004c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	00eb      	lsls	r3, r5, #3
 8004cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc8:	00e2      	lsls	r2, r4, #3
 8004cca:	4614      	mov	r4, r2
 8004ccc:	461d      	mov	r5, r3
 8004cce:	eb14 030a 	adds.w	r3, r4, sl
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	eb45 030b 	adc.w	r3, r5, fp
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	028b      	lsls	r3, r1, #10
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	028a      	lsls	r2, r1, #10
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	60fa      	str	r2, [r7, #12]
 8004d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d04:	f7fb fac4 	bl	8000290 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3740      	adds	r7, #64	; 0x40
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	016e3600 	.word	0x016e3600

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000008 	.word	0x20000008

08004d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	0800b524 	.word	0x0800b524

08004d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d90:	f7ff ffdc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0b5b      	lsrs	r3, r3, #13
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	0800b524 	.word	0x0800b524

08004db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e041      	b.n	8004e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc f9fc 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fac0 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e041      	b.n	8004ee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f839 	bl	8004ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 fa71 	bl	8005378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_TIM_PWM_Start+0x24>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	bf14      	ite	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	2300      	moveq	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e022      	b.n	8004f6e <HAL_TIM_PWM_Start+0x6a>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d109      	bne.n	8004f42 <HAL_TIM_PWM_Start+0x3e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	e015      	b.n	8004f6e <HAL_TIM_PWM_Start+0x6a>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d109      	bne.n	8004f5c <HAL_TIM_PWM_Start+0x58>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2300      	moveq	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e008      	b.n	8004f6e <HAL_TIM_PWM_Start+0x6a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e068      	b.n	8005048 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start+0x82>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f84:	e013      	b.n	8004fae <HAL_TIM_PWM_Start+0xaa>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x92>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f94:	e00b      	b.n	8004fae <HAL_TIM_PWM_Start+0xaa>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0xa2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa4:	e003      	b.n	8004fae <HAL_TIM_PWM_Start+0xaa>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2202      	movs	r2, #2
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	6839      	ldr	r1, [r7, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fc84 	bl	80058c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	; (8005050 <HAL_TIM_PWM_Start+0x14c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1d      	ldr	r2, [pc, #116]	; (8005050 <HAL_TIM_PWM_Start+0x14c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d018      	beq.n	8005012 <HAL_TIM_PWM_Start+0x10e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d013      	beq.n	8005012 <HAL_TIM_PWM_Start+0x10e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a19      	ldr	r2, [pc, #100]	; (8005054 <HAL_TIM_PWM_Start+0x150>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIM_PWM_Start+0x10e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_TIM_PWM_Start+0x154>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIM_PWM_Start+0x10e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_TIM_PWM_Start+0x158>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIM_PWM_Start+0x10e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_TIM_PWM_Start+0x15c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b06      	cmp	r3, #6
 8005022:	d010      	beq.n	8005046 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	e007      	b.n	8005046 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0201 	orr.w	r2, r2, #1
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40014000 	.word	0x40014000

08005064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800507e:	2302      	movs	r3, #2
 8005080:	e0ae      	b.n	80051e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0c      	cmp	r3, #12
 800508e:	f200 809f 	bhi.w	80051d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050cd 	.word	0x080050cd
 800509c:	080051d1 	.word	0x080051d1
 80050a0:	080051d1 	.word	0x080051d1
 80050a4:	080051d1 	.word	0x080051d1
 80050a8:	0800510d 	.word	0x0800510d
 80050ac:	080051d1 	.word	0x080051d1
 80050b0:	080051d1 	.word	0x080051d1
 80050b4:	080051d1 	.word	0x080051d1
 80050b8:	0800514f 	.word	0x0800514f
 80050bc:	080051d1 	.word	0x080051d1
 80050c0:	080051d1 	.word	0x080051d1
 80050c4:	080051d1 	.word	0x080051d1
 80050c8:	0800518f 	.word	0x0800518f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f9d0 	bl	8005478 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e064      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa16 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e043      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fa61 	bl	800561c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e023      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 faab 	bl	80056f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e002      	b.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	75fb      	strb	r3, [r7, #23]
      break;
 80051d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x1c>
 8005200:	2302      	movs	r3, #2
 8005202:	e0b4      	b.n	800536e <HAL_TIM_ConfigClockSource+0x186>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd4>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8086 	beq.w	800535a <HAL_TIM_ConfigClockSource+0x172>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xa6>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x11a>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x13a>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 faf1 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04f      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f000 fada 	bl	8005884 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fa4e 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 faa7 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005300:	e02c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fa6d 	bl	80057ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fa97 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005320:	e01c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fa2e 	bl	8005790 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fa87 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005340:	e00c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fa7e 	bl	800584e <TIM_ITRx_SetConfig>
      break;
 8005352:	e003      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e000      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800535a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a34      	ldr	r2, [pc, #208]	; (800545c <TIM_Base_SetConfig+0xe4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a31      	ldr	r2, [pc, #196]	; (8005460 <TIM_Base_SetConfig+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a30      	ldr	r2, [pc, #192]	; (8005464 <TIM_Base_SetConfig+0xec>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x38>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a2f      	ldr	r2, [pc, #188]	; (8005468 <TIM_Base_SetConfig+0xf0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a25      	ldr	r2, [pc, #148]	; (800545c <TIM_Base_SetConfig+0xe4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d017      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a22      	ldr	r2, [pc, #136]	; (8005460 <TIM_Base_SetConfig+0xe8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a21      	ldr	r2, [pc, #132]	; (8005464 <TIM_Base_SetConfig+0xec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a20      	ldr	r2, [pc, #128]	; (8005468 <TIM_Base_SetConfig+0xf0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <TIM_Base_SetConfig+0xf4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <TIM_Base_SetConfig+0xf8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x8a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <TIM_Base_SetConfig+0xfc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a08      	ldr	r2, [pc, #32]	; (800545c <TIM_Base_SetConfig+0xe4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0302 	bic.w	r3, r3, #2
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10c      	bne.n	80054ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0308 	bic.w	r3, r3, #8
 80054da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f023 0304 	bic.w	r3, r3, #4
 80054ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <TIM_OC1_SetConfig+0xc8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d111      	bne.n	800551a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	371c      	adds	r7, #28
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40010000 	.word	0x40010000

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0320 	bic.w	r3, r3, #32
 800558e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d10d      	bne.n	80055c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC2_SetConfig+0xd4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d113      	bne.n	80055f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a14      	ldr	r2, [pc, #80]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d113      	bne.n	80056c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40010000 	.word	0x40010000

080056f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800573a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a10      	ldr	r2, [pc, #64]	; (800578c <TIM_OC4_SetConfig+0x9c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d109      	bne.n	8005764 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000

08005790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f023 0201 	bic.w	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f023 030a 	bic.w	r3, r3, #10
 80057cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	031b      	lsls	r3, r3, #12
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 0307 	orr.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800589e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e050      	b.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d013      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a18      	ldr	r2, [pc, #96]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a15      	ldr	r2, [pc, #84]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10c      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40014000 	.word	0x40014000

080059ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e03d      	b.n	8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e03f      	b.n	8005b22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb fd14 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f829 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b30:	b0c0      	sub	sp, #256	; 0x100
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b48:	68d9      	ldr	r1, [r3, #12]
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	ea40 0301 	orr.w	r3, r0, r1
 8005b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b84:	f021 010c 	bic.w	r1, r1, #12
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b92:	430b      	orrs	r3, r1
 8005b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	6999      	ldr	r1, [r3, #24]
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	ea40 0301 	orr.w	r3, r0, r1
 8005bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4b8f      	ldr	r3, [pc, #572]	; (8005df8 <UART_SetConfig+0x2cc>)
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d005      	beq.n	8005bcc <UART_SetConfig+0xa0>
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b8d      	ldr	r3, [pc, #564]	; (8005dfc <UART_SetConfig+0x2d0>)
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d104      	bne.n	8005bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bcc:	f7ff f8de 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 8005bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bd4:	e003      	b.n	8005bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7ff f8c5 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8005bda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be8:	f040 810c 	bne.w	8005e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	1891      	adds	r1, r2, r2
 8005c04:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c06:	415b      	adcs	r3, r3
 8005c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c0e:	4621      	mov	r1, r4
 8005c10:	eb12 0801 	adds.w	r8, r2, r1
 8005c14:	4629      	mov	r1, r5
 8005c16:	eb43 0901 	adc.w	r9, r3, r1
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c2e:	4690      	mov	r8, r2
 8005c30:	4699      	mov	r9, r3
 8005c32:	4623      	mov	r3, r4
 8005c34:	eb18 0303 	adds.w	r3, r8, r3
 8005c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	eb49 0303 	adc.w	r3, r9, r3
 8005c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	18db      	adds	r3, r3, r3
 8005c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c60:	4613      	mov	r3, r2
 8005c62:	eb42 0303 	adc.w	r3, r2, r3
 8005c66:	657b      	str	r3, [r7, #84]	; 0x54
 8005c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c70:	f7fa fb0e 	bl	8000290 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4b61      	ldr	r3, [pc, #388]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	011c      	lsls	r4, r3, #4
 8005c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	1891      	adds	r1, r2, r2
 8005c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c9c:	415b      	adcs	r3, r3
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8005caa:	4649      	mov	r1, r9
 8005cac:	eb43 0b01 	adc.w	fp, r3, r1
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc4:	4692      	mov	sl, r2
 8005cc6:	469b      	mov	fp, r3
 8005cc8:	4643      	mov	r3, r8
 8005cca:	eb1a 0303 	adds.w	r3, sl, r3
 8005cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8005cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	18db      	adds	r3, r3, r3
 8005cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	eb42 0303 	adc.w	r3, r2, r3
 8005cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d06:	f7fa fac3 	bl	8000290 <__aeabi_uldivmod>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4b3b      	ldr	r3, [pc, #236]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005d12:	fba3 2301 	umull	r2, r3, r3, r1
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2264      	movs	r2, #100	; 0x64
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	1acb      	subs	r3, r1, r3
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d26:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005d28:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d34:	441c      	add	r4, r3
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	1891      	adds	r1, r2, r2
 8005d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d50:	415b      	adcs	r3, r3
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d58:	4641      	mov	r1, r8
 8005d5a:	1851      	adds	r1, r2, r1
 8005d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d5e:	4649      	mov	r1, r9
 8005d60:	414b      	adcs	r3, r1
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d70:	4659      	mov	r1, fp
 8005d72:	00cb      	lsls	r3, r1, #3
 8005d74:	4651      	mov	r1, sl
 8005d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	00ca      	lsls	r2, r1, #3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	4642      	mov	r2, r8
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	460a      	mov	r2, r1
 8005d90:	eb42 0303 	adc.w	r3, r2, r3
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005da4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dac:	460b      	mov	r3, r1
 8005dae:	18db      	adds	r3, r3, r3
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db2:	4613      	mov	r3, r2
 8005db4:	eb42 0303 	adc.w	r3, r2, r3
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dc2:	f7fa fa65 	bl	8000290 <__aeabi_uldivmod>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd0:	095b      	lsrs	r3, r3, #5
 8005dd2:	2164      	movs	r1, #100	; 0x64
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	3332      	adds	r3, #50	; 0x32
 8005dde:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <UART_SetConfig+0x2d4>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	f003 0207 	and.w	r2, r3, #7
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4422      	add	r2, r4
 8005df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005df4:	e105      	b.n	8006002 <UART_SetConfig+0x4d6>
 8005df6:	bf00      	nop
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	40011400 	.word	0x40011400
 8005e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e16:	4642      	mov	r2, r8
 8005e18:	464b      	mov	r3, r9
 8005e1a:	1891      	adds	r1, r2, r2
 8005e1c:	6239      	str	r1, [r7, #32]
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
 8005e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e26:	4641      	mov	r1, r8
 8005e28:	1854      	adds	r4, r2, r1
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	eb43 0501 	adc.w	r5, r3, r1
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	00eb      	lsls	r3, r5, #3
 8005e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e3e:	00e2      	lsls	r2, r4, #3
 8005e40:	4614      	mov	r4, r2
 8005e42:	461d      	mov	r5, r3
 8005e44:	4643      	mov	r3, r8
 8005e46:	18e3      	adds	r3, r4, r3
 8005e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	eb45 0303 	adc.w	r3, r5, r3
 8005e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e72:	4629      	mov	r1, r5
 8005e74:	008b      	lsls	r3, r1, #2
 8005e76:	4621      	mov	r1, r4
 8005e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	008a      	lsls	r2, r1, #2
 8005e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e84:	f7fa fa04 	bl	8000290 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b60      	ldr	r3, [pc, #384]	; (8006010 <UART_SetConfig+0x4e4>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	011c      	lsls	r4, r3, #4
 8005e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	1891      	adds	r1, r2, r2
 8005eae:	61b9      	str	r1, [r7, #24]
 8005eb0:	415b      	adcs	r3, r3
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eb8:	4641      	mov	r1, r8
 8005eba:	1851      	adds	r1, r2, r1
 8005ebc:	6139      	str	r1, [r7, #16]
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	414b      	adcs	r3, r1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ed0:	4659      	mov	r1, fp
 8005ed2:	00cb      	lsls	r3, r1, #3
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eda:	4651      	mov	r1, sl
 8005edc:	00ca      	lsls	r2, r1, #3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eec:	464b      	mov	r3, r9
 8005eee:	460a      	mov	r2, r1
 8005ef0:	eb42 0303 	adc.w	r3, r2, r3
 8005ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f10:	4649      	mov	r1, r9
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	4641      	mov	r1, r8
 8005f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	008a      	lsls	r2, r1, #2
 8005f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f22:	f7fa f9b5 	bl	8000290 <__aeabi_uldivmod>
 8005f26:	4602      	mov	r2, r0
 8005f28:	460b      	mov	r3, r1
 8005f2a:	4b39      	ldr	r3, [pc, #228]	; (8006010 <UART_SetConfig+0x4e4>)
 8005f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	2164      	movs	r1, #100	; 0x64
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	3332      	adds	r3, #50	; 0x32
 8005f3e:	4a34      	ldr	r2, [pc, #208]	; (8006010 <UART_SetConfig+0x4e4>)
 8005f40:	fba2 2303 	umull	r2, r3, r2, r3
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4a:	441c      	add	r4, r3
 8005f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f50:	2200      	movs	r2, #0
 8005f52:	673b      	str	r3, [r7, #112]	; 0x70
 8005f54:	677a      	str	r2, [r7, #116]	; 0x74
 8005f56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	415b      	adcs	r3, r3
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	1851      	adds	r1, r2, r1
 8005f6e:	6039      	str	r1, [r7, #0]
 8005f70:	4649      	mov	r1, r9
 8005f72:	414b      	adcs	r3, r1
 8005f74:	607b      	str	r3, [r7, #4]
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f82:	4659      	mov	r1, fp
 8005f84:	00cb      	lsls	r3, r1, #3
 8005f86:	4651      	mov	r1, sl
 8005f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	00ca      	lsls	r2, r1, #3
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	4603      	mov	r3, r0
 8005f96:	4642      	mov	r2, r8
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	663b      	str	r3, [r7, #96]	; 0x60
 8005fb0:	667a      	str	r2, [r7, #100]	; 0x64
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	008b      	lsls	r3, r1, #2
 8005fc2:	4641      	mov	r1, r8
 8005fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fc8:	4641      	mov	r1, r8
 8005fca:	008a      	lsls	r2, r1, #2
 8005fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fd0:	f7fa f95e 	bl	8000290 <__aeabi_uldivmod>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <UART_SetConfig+0x4e4>)
 8005fda:	fba3 1302 	umull	r1, r3, r3, r2
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2164      	movs	r1, #100	; 0x64
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	3332      	adds	r3, #50	; 0x32
 8005fec:	4a08      	ldr	r2, [pc, #32]	; (8006010 <UART_SetConfig+0x4e4>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	f003 020f 	and.w	r2, r3, #15
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4422      	add	r2, r4
 8006000:	609a      	str	r2, [r3, #8]
}
 8006002:	bf00      	nop
 8006004:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600e:	bf00      	nop
 8006010:	51eb851f 	.word	0x51eb851f

08006014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006014:	b084      	sub	sp, #16
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	f107 001c 	add.w	r0, r7, #28
 8006022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	d122      	bne.n	8006072 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 fbee 	bl	8007848 <USB_CoreReset>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e01a      	b.n	80060a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f001 fbe2 	bl	8007848 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
 800609a:	e005      	b.n	80060a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10b      	bne.n	80060c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f043 0206 	orr.w	r2, r3, #6
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060d2:	b004      	add	sp, #16
 80060d4:	4770      	bx	lr
	...

080060d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d165      	bne.n	80061b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <USB_SetTurnaroundTime+0x11c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d906      	bls.n	8006102 <USB_SetTurnaroundTime+0x2a>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	4a40      	ldr	r2, [pc, #256]	; (80061f8 <USB_SetTurnaroundTime+0x120>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d202      	bcs.n	8006102 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060fc:	230f      	movs	r3, #15
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e062      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4a3c      	ldr	r2, [pc, #240]	; (80061f8 <USB_SetTurnaroundTime+0x120>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d306      	bcc.n	8006118 <USB_SetTurnaroundTime+0x40>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	4a3b      	ldr	r2, [pc, #236]	; (80061fc <USB_SetTurnaroundTime+0x124>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d202      	bcs.n	8006118 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006112:	230e      	movs	r3, #14
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e057      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4a38      	ldr	r2, [pc, #224]	; (80061fc <USB_SetTurnaroundTime+0x124>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d306      	bcc.n	800612e <USB_SetTurnaroundTime+0x56>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4a37      	ldr	r2, [pc, #220]	; (8006200 <USB_SetTurnaroundTime+0x128>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d202      	bcs.n	800612e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006128:	230d      	movs	r3, #13
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	e04c      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	4a33      	ldr	r2, [pc, #204]	; (8006200 <USB_SetTurnaroundTime+0x128>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d306      	bcc.n	8006144 <USB_SetTurnaroundTime+0x6c>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4a32      	ldr	r2, [pc, #200]	; (8006204 <USB_SetTurnaroundTime+0x12c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d802      	bhi.n	8006144 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800613e:	230c      	movs	r3, #12
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	e041      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	4a2f      	ldr	r2, [pc, #188]	; (8006204 <USB_SetTurnaroundTime+0x12c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d906      	bls.n	800615a <USB_SetTurnaroundTime+0x82>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4a2e      	ldr	r2, [pc, #184]	; (8006208 <USB_SetTurnaroundTime+0x130>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d802      	bhi.n	800615a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006154:	230b      	movs	r3, #11
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e036      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <USB_SetTurnaroundTime+0x130>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d906      	bls.n	8006170 <USB_SetTurnaroundTime+0x98>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4a29      	ldr	r2, [pc, #164]	; (800620c <USB_SetTurnaroundTime+0x134>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d802      	bhi.n	8006170 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800616a:	230a      	movs	r3, #10
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e02b      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4a26      	ldr	r2, [pc, #152]	; (800620c <USB_SetTurnaroundTime+0x134>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d906      	bls.n	8006186 <USB_SetTurnaroundTime+0xae>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4a25      	ldr	r2, [pc, #148]	; (8006210 <USB_SetTurnaroundTime+0x138>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d202      	bcs.n	8006186 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006180:	2309      	movs	r3, #9
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	e020      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4a21      	ldr	r2, [pc, #132]	; (8006210 <USB_SetTurnaroundTime+0x138>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d306      	bcc.n	800619c <USB_SetTurnaroundTime+0xc4>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4a20      	ldr	r2, [pc, #128]	; (8006214 <USB_SetTurnaroundTime+0x13c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d802      	bhi.n	800619c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006196:	2308      	movs	r3, #8
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e015      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <USB_SetTurnaroundTime+0x13c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d906      	bls.n	80061b2 <USB_SetTurnaroundTime+0xda>
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <USB_SetTurnaroundTime+0x140>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d202      	bcs.n	80061b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80061ac:	2307      	movs	r3, #7
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	e00a      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80061b2:	2306      	movs	r3, #6
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	e007      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80061be:	2309      	movs	r3, #9
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e001      	b.n	80061c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80061c4:	2309      	movs	r3, #9
 80061c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	00d8acbf 	.word	0x00d8acbf
 80061f8:	00e4e1c0 	.word	0x00e4e1c0
 80061fc:	00f42400 	.word	0x00f42400
 8006200:	01067380 	.word	0x01067380
 8006204:	011a499f 	.word	0x011a499f
 8006208:	01312cff 	.word	0x01312cff
 800620c:	014ca43f 	.word	0x014ca43f
 8006210:	016e3600 	.word	0x016e3600
 8006214:	01a6ab1f 	.word	0x01a6ab1f
 8006218:	01e84800 	.word	0x01e84800

0800621c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0201 	bic.w	r2, r3, #1
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d115      	bne.n	80062ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800628e:	2001      	movs	r0, #1
 8006290:	f7fb fae2 	bl	8001858 <HAL_Delay>
      ms++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fa45 	bl	800772a <USB_GetMode>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d01e      	beq.n	80062e4 <USB_SetCurrentMode+0x84>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b31      	cmp	r3, #49	; 0x31
 80062aa:	d9f0      	bls.n	800628e <USB_SetCurrentMode+0x2e>
 80062ac:	e01a      	b.n	80062e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d115      	bne.n	80062e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062c0:	2001      	movs	r0, #1
 80062c2:	f7fb fac9 	bl	8001858 <HAL_Delay>
      ms++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fa2c 	bl	800772a <USB_GetMode>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d005      	beq.n	80062e4 <USB_SetCurrentMode+0x84>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b31      	cmp	r3, #49	; 0x31
 80062dc:	d9f0      	bls.n	80062c0 <USB_SetCurrentMode+0x60>
 80062de:	e001      	b.n	80062e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e005      	b.n	80062f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b32      	cmp	r3, #50	; 0x32
 80062e8:	d101      	bne.n	80062ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f8:	b084      	sub	sp, #16
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	e009      	b.n	800632c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3340      	adds	r3, #64	; 0x40
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	2200      	movs	r2, #0
 8006324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b0e      	cmp	r3, #14
 8006330:	d9f2      	bls.n	8006318 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d11c      	bne.n	8006372 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006346:	f043 0302 	orr.w	r3, r3, #2
 800634a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
 8006370:	e00b      	b.n	800638a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006376:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006390:	461a      	mov	r2, r3
 8006392:	2300      	movs	r3, #0
 8006394:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	4619      	mov	r1, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a4:	461a      	mov	r2, r3
 80063a6:	680b      	ldr	r3, [r1, #0]
 80063a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10c      	bne.n	80063ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063b6:	2100      	movs	r1, #0
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f965 	bl	8006688 <USB_SetDevSpeed>
 80063be:	e008      	b.n	80063d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063c0:	2101      	movs	r1, #1
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f960 	bl	8006688 <USB_SetDevSpeed>
 80063c8:	e003      	b.n	80063d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063ca:	2103      	movs	r1, #3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f95b 	bl	8006688 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063d2:	2110      	movs	r1, #16
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f8f3 	bl	80065c0 <USB_FlushTxFifo>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f91f 	bl	8006628 <USB_FlushRxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	461a      	mov	r2, r3
 80063fc:	2300      	movs	r3, #0
 80063fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006406:	461a      	mov	r2, r3
 8006408:	2300      	movs	r3, #0
 800640a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006412:	461a      	mov	r2, r3
 8006414:	2300      	movs	r3, #0
 8006416:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]
 800641c:	e043      	b.n	80064a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d118      	bne.n	8006468 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e013      	b.n	800647a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	461a      	mov	r2, r3
 8006460:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e008      	b.n	800647a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	461a      	mov	r2, r3
 8006476:	2300      	movs	r3, #0
 8006478:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	461a      	mov	r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	461a      	mov	r2, r3
 800649a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800649e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3301      	adds	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d3b7      	bcc.n	800641e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e043      	b.n	800653c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d118      	bne.n	80064fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e013      	b.n	8006510 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f4:	461a      	mov	r2, r3
 80064f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	e008      	b.n	8006510 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	461a      	mov	r2, r3
 800651e:	2300      	movs	r3, #0
 8006520:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	461a      	mov	r2, r3
 8006530:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006534:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	429a      	cmp	r2, r3
 8006542:	d3b7      	bcc.n	80064b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006556:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006564:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <USB_DevInit+0x2c4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f043 0208 	orr.w	r2, r3, #8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d107      	bne.n	80065ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a4:	f043 0304 	orr.w	r3, r3, #4
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b8:	b004      	add	sp, #16
 80065ba:	4770      	bx	lr
 80065bc:	803c3800 	.word	0x803c3800

080065c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a13      	ldr	r2, [pc, #76]	; (8006624 <USB_FlushTxFifo+0x64>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e01b      	b.n	8006618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	daf2      	bge.n	80065ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	019b      	lsls	r3, r3, #6
 80065f0:	f043 0220 	orr.w	r2, r3, #32
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4a08      	ldr	r2, [pc, #32]	; (8006624 <USB_FlushTxFifo+0x64>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e006      	b.n	8006618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b20      	cmp	r3, #32
 8006614:	d0f0      	beq.n	80065f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	00030d40 	.word	0x00030d40

08006628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <USB_FlushRxFifo+0x5c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e018      	b.n	8006678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	daf2      	bge.n	8006634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2210      	movs	r2, #16
 8006656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	3301      	adds	r3, #1
 800665c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <USB_FlushRxFifo+0x5c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e006      	b.n	8006678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b10      	cmp	r3, #16
 8006674:	d0f0      	beq.n	8006658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	00030d40 	.word	0x00030d40

08006688 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b087      	sub	sp, #28
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0306 	and.w	r3, r3, #6
 80066d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]
 80066de:	e00a      	b.n	80066f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d002      	beq.n	80066ec <USB_GetDevSpeed+0x32>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b06      	cmp	r3, #6
 80066ea:	d102      	bne.n	80066f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066ec:	2302      	movs	r3, #2
 80066ee:	75fb      	strb	r3, [r7, #23]
 80066f0:	e001      	b.n	80066f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066f2:	230f      	movs	r3, #15
 80066f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	785b      	ldrb	r3, [r3, #1]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d13a      	bne.n	8006796 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	2101      	movs	r1, #1
 8006732:	fa01 f303 	lsl.w	r3, r1, r3
 8006736:	b29b      	uxth	r3, r3
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673e:	4313      	orrs	r3, r2
 8006740:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d155      	bne.n	8006804 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	791b      	ldrb	r3, [r3, #4]
 8006772:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006774:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	059b      	lsls	r3, r3, #22
 800677a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800677c:	4313      	orrs	r3, r2
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800678e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e036      	b.n	8006804 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	2101      	movs	r1, #1
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	68f9      	ldr	r1, [r7, #12]
 80067b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d11a      	bne.n	8006804 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	791b      	ldrb	r3, [r3, #4]
 80067e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80067ea:	430b      	orrs	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006802:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d161      	bne.n	80068f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d11f      	bne.n	8006888 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006862:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006866:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006882:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	2101      	movs	r1, #1
 800689a:	fa01 f303 	lsl.w	r3, r1, r3
 800689e:	b29b      	uxth	r3, r3
 80068a0:	43db      	mvns	r3, r3
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a8:	4013      	ands	r3, r2
 80068aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	43db      	mvns	r3, r3
 80068c6:	68f9      	ldr	r1, [r7, #12]
 80068c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068cc:	4013      	ands	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0159      	lsls	r1, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	440b      	add	r3, r1
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	4619      	mov	r1, r3
 80068ec:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <USB_DeactivateEndpoint+0x1b0>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]
 80068f2:	e060      	b.n	80069b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690a:	d11f      	bne.n	800694c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800692a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006946:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800694a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	2101      	movs	r1, #1
 800695e:	fa01 f303 	lsl.w	r3, r1, r3
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	43db      	mvns	r3, r3
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800696c:	4013      	ands	r3, r2
 800696e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	2101      	movs	r1, #1
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	43db      	mvns	r3, r3
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006990:	4013      	ands	r3, r2
 8006992:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	0159      	lsls	r1, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	440b      	add	r3, r1
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	4619      	mov	r1, r3
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <USB_DeactivateEndpoint+0x1b4>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	ec337800 	.word	0xec337800
 80069c8:	eff37800 	.word	0xeff37800

080069cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08a      	sub	sp, #40	; 0x28
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 815c 	bne.w	8006ca6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d132      	bne.n	8006a5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a54:	0cdb      	lsrs	r3, r3, #19
 8006a56:	04db      	lsls	r3, r3, #19
 8006a58:	6113      	str	r3, [r2, #16]
 8006a5a:	e074      	b.n	8006b46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a76:	0cdb      	lsrs	r3, r3, #19
 8006a78:	04db      	lsls	r3, r3, #19
 8006a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6999      	ldr	r1, [r3, #24]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	440b      	add	r3, r1
 8006ab8:	1e59      	subs	r1, r3, #1
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ac2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ac4:	4b9d      	ldr	r3, [pc, #628]	; (8006d3c <USB_EPStartXfer+0x370>)
 8006ac6:	400b      	ands	r3, r1
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	0148      	lsls	r0, r1, #5
 8006acc:	69f9      	ldr	r1, [r7, #28]
 8006ace:	4401      	add	r1, r0
 8006ad0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aee:	69b9      	ldr	r1, [r7, #24]
 8006af0:	0148      	lsls	r0, r1, #5
 8006af2:	69f9      	ldr	r1, [r7, #28]
 8006af4:	4401      	add	r1, r0
 8006af6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	791b      	ldrb	r3, [r3, #4]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11f      	bne.n	8006b46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006b24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d14b      	bne.n	8006be4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d009      	beq.n	8006b68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b60:	461a      	mov	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	791b      	ldrb	r3, [r3, #4]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d128      	bne.n	8006bc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d110      	bne.n	8006ba2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e00f      	b.n	8006bc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	e133      	b.n	8006e4c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d015      	beq.n	8006c38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 811b 	beq.w	8006e4c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	f003 030f 	and.w	r3, r3, #15
 8006c26:	2101      	movs	r1, #1
 8006c28:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2c:	69f9      	ldr	r1, [r7, #28]
 8006c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c32:	4313      	orrs	r3, r2
 8006c34:	634b      	str	r3, [r1, #52]	; 0x34
 8006c36:	e109      	b.n	8006e4c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d110      	bne.n	8006c6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c66:	6013      	str	r3, [r2, #0]
 8006c68:	e00f      	b.n	8006c8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6919      	ldr	r1, [r3, #16]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	b298      	uxth	r0, r3
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fade 	bl	8007260 <USB_WritePacket>
 8006ca4:	e0d2      	b.n	8006e4c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc0:	0cdb      	lsrs	r3, r3, #19
 8006cc2:	04db      	lsls	r3, r3, #19
 8006cc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d126      	bne.n	8006d40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d08:	69b9      	ldr	r1, [r7, #24]
 8006d0a:	0148      	lsls	r0, r1, #5
 8006d0c:	69f9      	ldr	r1, [r7, #28]
 8006d0e:	4401      	add	r1, r0
 8006d10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d14:	4313      	orrs	r3, r2
 8006d16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	0151      	lsls	r1, r2, #5
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	440a      	add	r2, r1
 8006d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d36:	6113      	str	r3, [r2, #16]
 8006d38:	e03a      	b.n	8006db0 <USB_EPStartXfer+0x3e4>
 8006d3a:	bf00      	nop
 8006d3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	1e5a      	subs	r2, r3, #1
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	8afa      	ldrh	r2, [r7, #22]
 8006d5c:	fb03 f202 	mul.w	r2, r3, r2
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	691a      	ldr	r2, [r3, #16]
 8006d72:	8afb      	ldrh	r3, [r7, #22]
 8006d74:	04d9      	lsls	r1, r3, #19
 8006d76:	4b38      	ldr	r3, [pc, #224]	; (8006e58 <USB_EPStartXfer+0x48c>)
 8006d78:	400b      	ands	r3, r1
 8006d7a:	69b9      	ldr	r1, [r7, #24]
 8006d7c:	0148      	lsls	r0, r1, #5
 8006d7e:	69f9      	ldr	r1, [r7, #28]
 8006d80:	4401      	add	r1, r0
 8006d82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d86:	4313      	orrs	r3, r2
 8006d88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	0148      	lsls	r0, r1, #5
 8006da4:	69f9      	ldr	r1, [r7, #28]
 8006da6:	4401      	add	r1, r0
 8006da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dac:	4313      	orrs	r3, r2
 8006dae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d10d      	bne.n	8006dd2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	460a      	mov	r2, r1
 8006dd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	791b      	ldrb	r3, [r3, #4]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d128      	bne.n	8006e2c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d110      	bne.n	8006e0c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	e00f      	b.n	8006e2c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	1ff80000 	.word	0x1ff80000

08006e5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 80ce 	bne.w	800701a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d132      	bne.n	8006eec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee4:	0cdb      	lsrs	r3, r3, #19
 8006ee6:	04db      	lsls	r3, r3, #19
 8006ee8:	6113      	str	r3, [r2, #16]
 8006eea:	e04e      	b.n	8006f8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f06:	0cdb      	lsrs	r3, r3, #19
 8006f08:	04db      	lsls	r3, r3, #19
 8006f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d903      	bls.n	8006f44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7a:	6939      	ldr	r1, [r7, #16]
 8006f7c:	0148      	lsls	r0, r1, #5
 8006f7e:	6979      	ldr	r1, [r7, #20]
 8006f80:	4401      	add	r1, r0
 8006f82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f86:	4313      	orrs	r3, r2
 8006f88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d11e      	bne.n	8006fce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e097      	b.n	80070fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8083 	beq.w	80070fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	6979      	ldr	r1, [r7, #20]
 8007010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007014:	4313      	orrs	r3, r2
 8007016:	634b      	str	r3, [r1, #52]	; 0x34
 8007018:	e071      	b.n	80070fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007034:	0cdb      	lsrs	r3, r3, #19
 8007036:	04db      	lsls	r3, r3, #19
 8007038:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007054:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007058:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800705c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ac:	6939      	ldr	r1, [r7, #16]
 80070ae:	0148      	lsls	r0, r1, #5
 80070b0:	6979      	ldr	r1, [r7, #20]
 80070b2:	4401      	add	r1, r0
 80070b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070b8:	4313      	orrs	r3, r2
 80070ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d10d      	bne.n	80070de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6919      	ldr	r1, [r3, #16]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	460a      	mov	r2, r1
 80070dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	785b      	ldrb	r3, [r3, #1]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d14a      	bne.n	80071c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007142:	f040 8086 	bne.w	8007252 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007168:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	7812      	ldrb	r2, [r2, #0]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	440a      	add	r2, r1
 8007184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800718c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f242 7210 	movw	r2, #10000	; 0x2710
 800719a:	4293      	cmp	r3, r2
 800719c:	d902      	bls.n	80071a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
          break;
 80071a2:	e056      	b.n	8007252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071bc:	d0e7      	beq.n	800718e <USB_EPStopXfer+0x82>
 80071be:	e048      	b.n	8007252 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d8:	d13b      	bne.n	8007252 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	7812      	ldrb	r2, [r2, #0]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800721c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f242 7210 	movw	r2, #10000	; 0x2710
 800722e:	4293      	cmp	r3, r2
 8007230:	d902      	bls.n	8007238 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
          break;
 8007236:	e00c      	b.n	8007252 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007250:	d0e7      	beq.n	8007222 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	; 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	460b      	mov	r3, r1
 8007270:	71fb      	strb	r3, [r7, #7]
 8007272:	4613      	mov	r3, r2
 8007274:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800727e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007282:	2b00      	cmp	r3, #0
 8007284:	d123      	bne.n	80072ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007286:	88bb      	ldrh	r3, [r7, #4]
 8007288:	3303      	adds	r3, #3
 800728a:	089b      	lsrs	r3, r3, #2
 800728c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800728e:	2300      	movs	r3, #0
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e018      	b.n	80072c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	031a      	lsls	r2, r3, #12
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	461a      	mov	r2, r3
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	3301      	adds	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	3301      	adds	r3, #1
 80072be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	3301      	adds	r3, #1
 80072c4:	61bb      	str	r3, [r7, #24]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3e2      	bcc.n	8007294 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3724      	adds	r7, #36	; 0x24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072dc:	b480      	push	{r7}
 80072de:	b08b      	sub	sp, #44	; 0x2c
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072f2:	88fb      	ldrh	r3, [r7, #6]
 80072f4:	089b      	lsrs	r3, r3, #2
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	e014      	b.n	8007332 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	601a      	str	r2, [r3, #0]
    pDest++;
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	3301      	adds	r3, #1
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	3301      	adds	r3, #1
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	3301      	adds	r3, #1
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	3301      	adds	r3, #1
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	3301      	adds	r3, #1
 8007330:	623b      	str	r3, [r7, #32]
 8007332:	6a3a      	ldr	r2, [r7, #32]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	429a      	cmp	r2, r3
 8007338:	d3e6      	bcc.n	8007308 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800733a:	8bfb      	ldrh	r3, [r7, #30]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01e      	beq.n	800737e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734a:	461a      	mov	r2, r3
 800734c:	f107 0310 	add.w	r3, r7, #16
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
 8007360:	b2da      	uxtb	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	701a      	strb	r2, [r3, #0]
      i++;
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	3301      	adds	r3, #1
 800736a:	623b      	str	r3, [r7, #32]
      pDest++;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	3301      	adds	r3, #1
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007372:	8bfb      	ldrh	r3, [r7, #30]
 8007374:	3b01      	subs	r3, #1
 8007376:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007378:	8bfb      	ldrh	r3, [r7, #30]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1ea      	bne.n	8007354 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007380:	4618      	mov	r0, r3
 8007382:	372c      	adds	r7, #44	; 0x2c
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d12c      	bne.n	8007402 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	db12      	blt.n	80073e0 <USB_EPSetStall+0x54>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	e02b      	b.n	800745a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	db12      	blt.n	800743a <USB_EPSetStall+0xae>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00f      	beq.n	800743a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007438:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007458:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d128      	bne.n	80074d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d003      	beq.n	80074b4 <USB_EPClearStall+0x4c>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	791b      	ldrb	r3, [r3, #4]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d138      	bne.n	8007526 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e027      	b.n	8007526 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d003      	beq.n	8007506 <USB_EPClearStall+0x9e>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	791b      	ldrb	r3, [r3, #4]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d10f      	bne.n	8007526 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007524:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007552:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007556:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007568:	68f9      	ldr	r1, [r7, #12]
 800756a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800756e:	4313      	orrs	r3, r2
 8007570:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800759a:	f023 0303 	bic.w	r3, r3, #3
 800759e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075ae:	f023 0302 	bic.w	r3, r3, #2
 80075b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075dc:	f023 0303 	bic.w	r3, r3, #3
 80075e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075f0:	f043 0302 	orr.w	r3, r3, #2
 80075f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4013      	ands	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800761c:	68fb      	ldr	r3, [r7, #12]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	4013      	ands	r3, r2
 800764c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	0c1b      	lsrs	r3, r3, #16
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	4013      	ands	r3, r2
 8007680:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	b29b      	uxth	r3, r3
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4013      	ands	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076c0:	68bb      	ldr	r3, [r7, #8]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	460b      	mov	r3, r1
 80076d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	fa22 f303 	lsr.w	r3, r2, r3
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	b2db      	uxtb	r3, r3
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4013      	ands	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800771c:	68bb      	ldr	r3, [r7, #8]
}
 800771e:	4618      	mov	r0, r3
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0301 	and.w	r3, r3, #1
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007760:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007764:	f023 0307 	bic.w	r3, r3, #7
 8007768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800777c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	460b      	mov	r3, r1
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	333c      	adds	r3, #60	; 0x3c
 80077a2:	3304      	adds	r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4a26      	ldr	r2, [pc, #152]	; (8007844 <USB_EP0_OutStart+0xb8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d90a      	bls.n	80077c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077c0:	d101      	bne.n	80077c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e037      	b.n	8007836 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	461a      	mov	r2, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f4:	f043 0318 	orr.w	r3, r3, #24
 80077f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800780c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10f      	bne.n	8007834 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781a:	461a      	mov	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	4f54300a 	.word	0x4f54300a

08007848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a13      	ldr	r2, [pc, #76]	; (80078ac <USB_CoreReset+0x64>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e01b      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	daf2      	bge.n	8007854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a09      	ldr	r2, [pc, #36]	; (80078ac <USB_CoreReset+0x64>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d901      	bls.n	8007890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e006      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d0f0      	beq.n	800787e <USB_CoreReset+0x36>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	00030d40 	.word	0x00030d40

080078b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078c0:	f002 fc8a 	bl	800a1d8 <USBD_static_malloc>
 80078c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32b0      	adds	r2, #176	; 0xb0
 80078d6:	2100      	movs	r1, #0
 80078d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078dc:	2302      	movs	r3, #2
 80078de:	e0d4      	b.n	8007a8a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80078e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80078e4:	2100      	movs	r1, #0
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f002 fce4 	bl	800a2b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32b0      	adds	r2, #176	; 0xb0
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	; 0xb0
 8007906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	7c1b      	ldrb	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d138      	bne.n	800798a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007918:	4b5e      	ldr	r3, [pc, #376]	; (8007a94 <USBD_CDC_Init+0x1e4>)
 800791a:	7819      	ldrb	r1, [r3, #0]
 800791c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007920:	2202      	movs	r2, #2
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 fb35 	bl	8009f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007928:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <USBD_CDC_Init+0x1e4>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 020f 	and.w	r2, r3, #15
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	2201      	movs	r2, #1
 8007940:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007942:	4b55      	ldr	r3, [pc, #340]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 8007944:	7819      	ldrb	r1, [r3, #0]
 8007946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794a:	2202      	movs	r2, #2
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f002 fb20 	bl	8009f92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007952:	4b51      	ldr	r3, [pc, #324]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	f003 020f 	and.w	r2, r3, #15
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	440b      	add	r3, r1
 8007966:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800796a:	2201      	movs	r2, #1
 800796c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800796e:	4b4b      	ldr	r3, [pc, #300]	; (8007a9c <USBD_CDC_Init+0x1ec>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 020f 	and.w	r2, r3, #15
 8007976:	6879      	ldr	r1, [r7, #4]
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	440b      	add	r3, r1
 8007982:	3326      	adds	r3, #38	; 0x26
 8007984:	2210      	movs	r2, #16
 8007986:	801a      	strh	r2, [r3, #0]
 8007988:	e035      	b.n	80079f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800798a:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <USBD_CDC_Init+0x1e4>)
 800798c:	7819      	ldrb	r1, [r3, #0]
 800798e:	2340      	movs	r3, #64	; 0x40
 8007990:	2202      	movs	r2, #2
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f002 fafd 	bl	8009f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007998:	4b3e      	ldr	r3, [pc, #248]	; (8007a94 <USBD_CDC_Init+0x1e4>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	440b      	add	r3, r1
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	2201      	movs	r2, #1
 80079b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079b2:	4b39      	ldr	r3, [pc, #228]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 80079b4:	7819      	ldrb	r1, [r3, #0]
 80079b6:	2340      	movs	r3, #64	; 0x40
 80079b8:	2202      	movs	r2, #2
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f002 fae9 	bl	8009f92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079c0:	4b35      	ldr	r3, [pc, #212]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 020f 	and.w	r2, r3, #15
 80079c8:	6879      	ldr	r1, [r7, #4]
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079d8:	2201      	movs	r2, #1
 80079da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079dc:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <USBD_CDC_Init+0x1ec>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 020f 	and.w	r2, r3, #15
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	3326      	adds	r3, #38	; 0x26
 80079f2:	2210      	movs	r2, #16
 80079f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079f6:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <USBD_CDC_Init+0x1ec>)
 80079f8:	7819      	ldrb	r1, [r3, #0]
 80079fa:	2308      	movs	r3, #8
 80079fc:	2203      	movs	r2, #3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f002 fac7 	bl	8009f92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a04:	4b25      	ldr	r3, [pc, #148]	; (8007a9c <USBD_CDC_Init+0x1ec>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 020f 	and.w	r2, r3, #15
 8007a0c:	6879      	ldr	r1, [r7, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	3324      	adds	r3, #36	; 0x24
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	33b0      	adds	r3, #176	; 0xb0
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a54:	2302      	movs	r3, #2
 8007a56:	e018      	b.n	8007a8a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7c1b      	ldrb	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10a      	bne.n	8007a76 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 8007a62:	7819      	ldrb	r1, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f002 fb7e 	bl	800a170 <USBD_LL_PrepareReceive>
 8007a74:	e008      	b.n	8007a88 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a76:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <USBD_CDC_Init+0x1e8>)
 8007a78:	7819      	ldrb	r1, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a80:	2340      	movs	r3, #64	; 0x40
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f002 fb74 	bl	800a170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	2000009b 	.word	0x2000009b
 8007a98:	2000009c 	.word	0x2000009c
 8007a9c:	2000009d 	.word	0x2000009d

08007aa0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007aac:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <USBD_CDC_DeInit+0xf8>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f002 fa93 	bl	8009fde <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ab8:	4b37      	ldr	r3, [pc, #220]	; (8007b98 <USBD_CDC_DeInit+0xf8>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	3324      	adds	r3, #36	; 0x24
 8007ace:	2200      	movs	r2, #0
 8007ad0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ad2:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <USBD_CDC_DeInit+0xfc>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f002 fa80 	bl	8009fde <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007ade:	4b2f      	ldr	r3, [pc, #188]	; (8007b9c <USBD_CDC_DeInit+0xfc>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	f003 020f 	and.w	r2, r3, #15
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	440b      	add	r3, r1
 8007af2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007af6:	2200      	movs	r2, #0
 8007af8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007afa:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <USBD_CDC_DeInit+0x100>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f002 fa6c 	bl	8009fde <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b06:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <USBD_CDC_DeInit+0x100>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	6879      	ldr	r1, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	3324      	adds	r3, #36	; 0x24
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b20:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <USBD_CDC_DeInit+0x100>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	f003 020f 	and.w	r2, r3, #15
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	3326      	adds	r3, #38	; 0x26
 8007b36:	2200      	movs	r2, #0
 8007b38:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	32b0      	adds	r2, #176	; 0xb0
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01f      	beq.n	8007b8c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	33b0      	adds	r3, #176	; 0xb0
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32b0      	adds	r2, #176	; 0xb0
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 fb40 	bl	800a1f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32b0      	adds	r2, #176	; 0xb0
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000009b 	.word	0x2000009b
 8007b9c:	2000009c 	.word	0x2000009c
 8007ba0:	2000009d 	.word	0x2000009d

08007ba4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	32b0      	adds	r2, #176	; 0xb0
 8007bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e0bf      	b.n	8007d54 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d050      	beq.n	8007c82 <USBD_CDC_Setup+0xde>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	f040 80af 	bne.w	8007d44 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	88db      	ldrh	r3, [r3, #6]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d03a      	beq.n	8007c64 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da1b      	bge.n	8007c30 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	33b0      	adds	r3, #176	; 0xb0
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	88d2      	ldrh	r2, [r2, #6]
 8007c14:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b07      	cmp	r3, #7
 8007c1c:	bf28      	it	cs
 8007c1e:	2307      	movcs	r3, #7
 8007c20:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	89fa      	ldrh	r2, [r7, #14]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 fd89 	bl	8009740 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c2e:	e090      	b.n	8007d52 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	785a      	ldrb	r2, [r3, #1]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8007c40:	d803      	bhi.n	8007c4a <USBD_CDC_Setup+0xa6>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88db      	ldrh	r3, [r3, #6]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	e000      	b.n	8007c4c <USBD_CDC_Setup+0xa8>
 8007c4a:	2240      	movs	r2, #64	; 0x40
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c52:	6939      	ldr	r1, [r7, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fd9b 	bl	8009798 <USBD_CtlPrepareRx>
      break;
 8007c62:	e076      	b.n	8007d52 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	33b0      	adds	r3, #176	; 0xb0
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	7850      	ldrb	r0, [r2, #1]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	4798      	blx	r3
      break;
 8007c80:	e067      	b.n	8007d52 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	785b      	ldrb	r3, [r3, #1]
 8007c86:	2b0b      	cmp	r3, #11
 8007c88:	d851      	bhi.n	8007d2e <USBD_CDC_Setup+0x18a>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <USBD_CDC_Setup+0xec>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007cc1 	.word	0x08007cc1
 8007c94:	08007d3d 	.word	0x08007d3d
 8007c98:	08007d2f 	.word	0x08007d2f
 8007c9c:	08007d2f 	.word	0x08007d2f
 8007ca0:	08007d2f 	.word	0x08007d2f
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d2f 	.word	0x08007d2f
 8007cac:	08007d2f 	.word	0x08007d2f
 8007cb0:	08007d2f 	.word	0x08007d2f
 8007cb4:	08007d2f 	.word	0x08007d2f
 8007cb8:	08007ceb 	.word	0x08007ceb
 8007cbc:	08007d15 	.word	0x08007d15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d107      	bne.n	8007cdc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ccc:	f107 030a 	add.w	r3, r7, #10
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fd33 	bl	8009740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cda:	e032      	b.n	8007d42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fcbd 	bl	800965e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce8:	e02b      	b.n	8007d42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d107      	bne.n	8007d06 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cf6:	f107 030d 	add.w	r3, r7, #13
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 fd1e 	bl	8009740 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d04:	e01d      	b.n	8007d42 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fca8 	bl	800965e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	75fb      	strb	r3, [r7, #23]
          break;
 8007d12:	e016      	b.n	8007d42 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d00f      	beq.n	8007d40 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fc9b 	bl	800965e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d2c:	e008      	b.n	8007d40 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fc94 	bl	800965e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	75fb      	strb	r3, [r7, #23]
          break;
 8007d3a:	e002      	b.n	8007d42 <USBD_CDC_Setup+0x19e>
          break;
 8007d3c:	bf00      	nop
 8007d3e:	e008      	b.n	8007d52 <USBD_CDC_Setup+0x1ae>
          break;
 8007d40:	bf00      	nop
      }
      break;
 8007d42:	e006      	b.n	8007d52 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fc89 	bl	800965e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d50:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	32b0      	adds	r2, #176	; 0xb0
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e065      	b.n	8007e52 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	32b0      	adds	r2, #176	; 0xb0
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	f003 020f 	and.w	r2, r3, #15
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	440b      	add	r3, r1
 8007da8:	3318      	adds	r3, #24
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02f      	beq.n	8007e10 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	f003 020f 	and.w	r2, r3, #15
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	78fb      	ldrb	r3, [r7, #3]
 8007dc8:	f003 010f 	and.w	r1, r3, #15
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4403      	add	r3, r0
 8007dd8:	3348      	adds	r3, #72	; 0x48
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d112      	bne.n	8007e10 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 020f 	and.w	r2, r3, #15
 8007df0:	6879      	ldr	r1, [r7, #4]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	440b      	add	r3, r1
 8007dfc:	3318      	adds	r3, #24
 8007dfe:	2200      	movs	r2, #0
 8007e00:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e02:	78f9      	ldrb	r1, [r7, #3]
 8007e04:	2300      	movs	r3, #0
 8007e06:	2200      	movs	r2, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f002 f990 	bl	800a12e <USBD_LL_Transmit>
 8007e0e:	e01f      	b.n	8007e50 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	33b0      	adds	r3, #176	; 0xb0
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d010      	beq.n	8007e50 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	33b0      	adds	r3, #176	; 0xb0
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007e4c:	78fa      	ldrb	r2, [r7, #3]
 8007e4e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	32b0      	adds	r2, #176	; 0xb0
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32b0      	adds	r2, #176	; 0xb0
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e01a      	b.n	8007ec2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f002 f98e 	bl	800a1b2 <USBD_LL_GetRxDataSize>
 8007e96:	4602      	mov	r2, r0
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	33b0      	adds	r3, #176	; 0xb0
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32b0      	adds	r2, #176	; 0xb0
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e025      	b.n	8007f38 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	33b0      	adds	r3, #176	; 0xb0
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01a      	beq.n	8007f36 <USBD_CDC_EP0_RxReady+0x6c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f06:	2bff      	cmp	r3, #255	; 0xff
 8007f08:	d015      	beq.n	8007f36 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	33b0      	adds	r3, #176	; 0xb0
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f22:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f2a:	b292      	uxth	r2, r2
 8007f2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	22ff      	movs	r2, #255	; 0xff
 8007f32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f48:	2182      	movs	r1, #130	; 0x82
 8007f4a:	4818      	ldr	r0, [pc, #96]	; (8007fac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f4c:	f000 fd4f 	bl	80089ee <USBD_GetEpDesc>
 8007f50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f52:	2101      	movs	r1, #1
 8007f54:	4815      	ldr	r0, [pc, #84]	; (8007fac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f56:	f000 fd4a 	bl	80089ee <USBD_GetEpDesc>
 8007f5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f5c:	2181      	movs	r1, #129	; 0x81
 8007f5e:	4813      	ldr	r0, [pc, #76]	; (8007fac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f60:	f000 fd45 	bl	80089ee <USBD_GetEpDesc>
 8007f64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2210      	movs	r2, #16
 8007f70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d006      	beq.n	8007f86 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f80:	711a      	strb	r2, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f94:	711a      	strb	r2, [r3, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2243      	movs	r2, #67	; 0x43
 8007f9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000058 	.word	0x20000058

08007fb0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fb8:	2182      	movs	r1, #130	; 0x82
 8007fba:	4818      	ldr	r0, [pc, #96]	; (800801c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fbc:	f000 fd17 	bl	80089ee <USBD_GetEpDesc>
 8007fc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	4815      	ldr	r0, [pc, #84]	; (800801c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fc6:	f000 fd12 	bl	80089ee <USBD_GetEpDesc>
 8007fca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fcc:	2181      	movs	r1, #129	; 0x81
 8007fce:	4813      	ldr	r0, [pc, #76]	; (800801c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fd0:	f000 fd0d 	bl	80089ee <USBD_GetEpDesc>
 8007fd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2210      	movs	r2, #16
 8007fe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d006      	beq.n	8007ff6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2200      	movs	r2, #0
 8007fec:	711a      	strb	r2, [r3, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f042 0202 	orr.w	r2, r2, #2
 8007ff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d006      	beq.n	800800a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	711a      	strb	r2, [r3, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f042 0202 	orr.w	r2, r2, #2
 8008008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2243      	movs	r2, #67	; 0x43
 800800e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20000058 	.word	0x20000058

08008020 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008028:	2182      	movs	r1, #130	; 0x82
 800802a:	4818      	ldr	r0, [pc, #96]	; (800808c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800802c:	f000 fcdf 	bl	80089ee <USBD_GetEpDesc>
 8008030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008032:	2101      	movs	r1, #1
 8008034:	4815      	ldr	r0, [pc, #84]	; (800808c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008036:	f000 fcda 	bl	80089ee <USBD_GetEpDesc>
 800803a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800803c:	2181      	movs	r1, #129	; 0x81
 800803e:	4813      	ldr	r0, [pc, #76]	; (800808c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008040:	f000 fcd5 	bl	80089ee <USBD_GetEpDesc>
 8008044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d002      	beq.n	8008052 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2210      	movs	r2, #16
 8008050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2200      	movs	r2, #0
 800805c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008060:	711a      	strb	r2, [r3, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008074:	711a      	strb	r2, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2243      	movs	r2, #67	; 0x43
 800807e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000058 	.word	0x20000058

08008090 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	220a      	movs	r2, #10
 800809c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000014 	.word	0x20000014

080080b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e009      	b.n	80080d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	33b0      	adds	r3, #176	; 0xb0
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	32b0      	adds	r2, #176	; 0xb0
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008106:	2303      	movs	r3, #3
 8008108:	e008      	b.n	800811c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	371c      	adds	r7, #28
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e004      	b.n	8008156 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	32b0      	adds	r2, #176	; 0xb0
 8008176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	32b0      	adds	r2, #176	; 0xb0
 800818a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d101      	bne.n	8008196 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008192:	2303      	movs	r3, #3
 8008194:	e025      	b.n	80081e2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11f      	bne.n	80081e0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80081a8:	4b10      	ldr	r3, [pc, #64]	; (80081ec <USBD_CDC_TransmitPacket+0x88>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4403      	add	r3, r0
 80081c2:	3318      	adds	r3, #24
 80081c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <USBD_CDC_TransmitPacket+0x88>)
 80081c8:	7819      	ldrb	r1, [r3, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 ffa9 	bl	800a12e <USBD_LL_Transmit>

    ret = USBD_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	2000009b 	.word	0x2000009b

080081f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32b0      	adds	r2, #176	; 0xb0
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32b0      	adds	r2, #176	; 0xb0
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	e018      	b.n	8008250 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7c1b      	ldrb	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <USBD_CDC_ReceivePacket+0x68>)
 8008228:	7819      	ldrb	r1, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 ff9b 	bl	800a170 <USBD_LL_PrepareReceive>
 800823a:	e008      	b.n	800824e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <USBD_CDC_ReceivePacket+0x68>)
 800823e:	7819      	ldrb	r1, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008246:	2340      	movs	r3, #64	; 0x40
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 ff91 	bl	800a170 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	2000009c 	.word	0x2000009c

0800825c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	e01f      	b.n	80082b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	79fa      	ldrb	r2, [r7, #7]
 80082a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f001 fe0b 	bl	8009ec4 <USBD_LL_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3718      	adds	r7, #24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e025      	b.n	8008320 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	32ae      	adds	r2, #174	; 0xae
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00f      	beq.n	8008310 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32ae      	adds	r2, #174	; 0xae
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	f107 020e 	add.w	r2, r7, #14
 8008304:	4610      	mov	r0, r2
 8008306:	4798      	blx	r3
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 fe13 	bl	8009f5c <USBD_LL_Start>
 8008336:	4603      	mov	r3, r0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008348:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	460b      	mov	r3, r1
 8008360:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	4611      	mov	r1, r2
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	4611      	mov	r1, r2
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083b4:	2303      	movs	r3, #3
 80083b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 f908 	bl	80095ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d01a      	beq.n	8008434 <USBD_LL_SetupStage+0x72>
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d822      	bhi.n	8008448 <USBD_LL_SetupStage+0x86>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <USBD_LL_SetupStage+0x4a>
 8008406:	2b01      	cmp	r3, #1
 8008408:	d00a      	beq.n	8008420 <USBD_LL_SetupStage+0x5e>
 800840a:	e01d      	b.n	8008448 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fb5f 	bl	8008ad8 <USBD_StdDevReq>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
      break;
 800841e:	e020      	b.n	8008462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbc7 	bl	8008bbc <USBD_StdItfReq>
 800842e:	4603      	mov	r3, r0
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	e016      	b.n	8008462 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fc29 	bl	8008c94 <USBD_StdEPReq>
 8008442:	4603      	mov	r3, r0
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	e00c      	b.n	8008462 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800844e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008452:	b2db      	uxtb	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fde0 	bl	800a01c <USBD_LL_StallEP>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	bf00      	nop
  }

  return ret;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	460b      	mov	r3, r1
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800847e:	7afb      	ldrb	r3, [r7, #11]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d16e      	bne.n	8008562 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800848a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008492:	2b03      	cmp	r3, #3
 8008494:	f040 8098 	bne.w	80085c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d913      	bls.n	80084cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	1ad2      	subs	r2, r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4293      	cmp	r3, r2
 80084bc:	bf28      	it	cs
 80084be:	4613      	movcs	r3, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f001 f984 	bl	80097d2 <USBD_CtlContinueRx>
 80084ca:	e07d      	b.n	80085c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084d2:	f003 031f 	and.w	r3, r3, #31
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d014      	beq.n	8008504 <USBD_LL_DataOutStage+0x98>
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d81d      	bhi.n	800851a <USBD_LL_DataOutStage+0xae>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <USBD_LL_DataOutStage+0x7c>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d003      	beq.n	80084ee <USBD_LL_DataOutStage+0x82>
 80084e6:	e018      	b.n	800851a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	75bb      	strb	r3, [r7, #22]
            break;
 80084ec:	e018      	b.n	8008520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	4619      	mov	r1, r3
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fa5e 	bl	80089ba <USBD_CoreFindIF>
 80084fe:	4603      	mov	r3, r0
 8008500:	75bb      	strb	r3, [r7, #22]
            break;
 8008502:	e00d      	b.n	8008520 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800850a:	b2db      	uxtb	r3, r3
 800850c:	4619      	mov	r1, r3
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fa60 	bl	80089d4 <USBD_CoreFindEP>
 8008514:	4603      	mov	r3, r0
 8008516:	75bb      	strb	r3, [r7, #22]
            break;
 8008518:	e002      	b.n	8008520 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	75bb      	strb	r3, [r7, #22]
            break;
 800851e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008520:	7dbb      	ldrb	r3, [r7, #22]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d119      	bne.n	800855a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d113      	bne.n	800855a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008532:	7dba      	ldrb	r2, [r7, #22]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	32ae      	adds	r2, #174	; 0xae
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008542:	7dba      	ldrb	r2, [r7, #22]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800854a:	7dba      	ldrb	r2, [r7, #22]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	32ae      	adds	r2, #174	; 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 f94a 	bl	80097f4 <USBD_CtlSendStatus>
 8008560:	e032      	b.n	80085c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008562:	7afb      	ldrb	r3, [r7, #11]
 8008564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008568:	b2db      	uxtb	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f000 fa31 	bl	80089d4 <USBD_CoreFindEP>
 8008572:	4603      	mov	r3, r0
 8008574:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008576:	7dbb      	ldrb	r3, [r7, #22]
 8008578:	2bff      	cmp	r3, #255	; 0xff
 800857a:	d025      	beq.n	80085c8 <USBD_LL_DataOutStage+0x15c>
 800857c:	7dbb      	ldrb	r3, [r7, #22]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d122      	bne.n	80085c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b03      	cmp	r3, #3
 800858c:	d117      	bne.n	80085be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800858e:	7dba      	ldrb	r2, [r7, #22]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	32ae      	adds	r2, #174	; 0xae
 8008594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00f      	beq.n	80085be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800859e:	7dba      	ldrb	r2, [r7, #22]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085a6:	7dba      	ldrb	r2, [r7, #22]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	32ae      	adds	r2, #174	; 0xae
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	7afa      	ldrb	r2, [r7, #11]
 80085b4:	4611      	mov	r1, r2
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	4798      	blx	r3
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	e000      	b.n	80085ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	460b      	mov	r3, r1
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80085e0:	7afb      	ldrb	r3, [r7, #11]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d16f      	bne.n	80086c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3314      	adds	r3, #20
 80085ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d15a      	bne.n	80086ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d914      	bls.n	800862c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	1ad2      	subs	r2, r2, r3
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	461a      	mov	r2, r3
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 f8ac 	bl	8009776 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800861e:	2300      	movs	r3, #0
 8008620:	2200      	movs	r2, #0
 8008622:	2100      	movs	r1, #0
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f001 fda3 	bl	800a170 <USBD_LL_PrepareReceive>
 800862a:	e03f      	b.n	80086ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d11c      	bne.n	8008672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008640:	429a      	cmp	r2, r3
 8008642:	d316      	bcc.n	8008672 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800864e:	429a      	cmp	r2, r3
 8008650:	d20f      	bcs.n	8008672 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008652:	2200      	movs	r2, #0
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f001 f88d 	bl	8009776 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008664:	2300      	movs	r3, #0
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f001 fd80 	bl	800a170 <USBD_LL_PrepareReceive>
 8008670:	e01c      	b.n	80086ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b03      	cmp	r3, #3
 800867c:	d10f      	bne.n	800869e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f001 fcbb 	bl	800a01c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f001 f8b7 	bl	800981a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d03a      	beq.n	800872c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fe42 	bl	8008340 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086c4:	e032      	b.n	800872c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086c6:	7afb      	ldrb	r3, [r7, #11]
 80086c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f97f 	bl	80089d4 <USBD_CoreFindEP>
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2bff      	cmp	r3, #255	; 0xff
 80086de:	d025      	beq.n	800872c <USBD_LL_DataInStage+0x15a>
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d122      	bne.n	800872c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d11c      	bne.n	800872c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086f2:	7dfa      	ldrb	r2, [r7, #23]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	32ae      	adds	r2, #174	; 0xae
 80086f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d014      	beq.n	800872c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008702:	7dfa      	ldrb	r2, [r7, #23]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800870a:	7dfa      	ldrb	r2, [r7, #23]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	; 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	7afa      	ldrb	r2, [r7, #11]
 8008718:	4611      	mov	r1, r2
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008722:	7dbb      	ldrb	r3, [r7, #22]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008728:	7dbb      	ldrb	r3, [r7, #22]
 800872a:	e000      	b.n	800872e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d014      	beq.n	800879c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6852      	ldr	r2, [r2, #4]
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	4611      	mov	r1, r2
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800879c:	2340      	movs	r3, #64	; 0x40
 800879e:	2200      	movs	r2, #0
 80087a0:	2100      	movs	r1, #0
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fbf5 	bl	8009f92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2240      	movs	r2, #64	; 0x40
 80087b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	2200      	movs	r2, #0
 80087bc:	2180      	movs	r1, #128	; 0x80
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fbe7 	bl	8009f92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2240      	movs	r2, #64	; 0x40
 80087ce:	621a      	str	r2, [r3, #32]

  return ret;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087da:	b480      	push	{r7}
 80087dc:	b083      	sub	sp, #12
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	78fa      	ldrb	r2, [r7, #3]
 80087ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008808:	b2da      	uxtb	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2204      	movs	r2, #4
 8008814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b04      	cmp	r3, #4
 8008838:	d106      	bne.n	8008848 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008840:	b2da      	uxtb	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b03      	cmp	r3, #3
 8008868:	d110      	bne.n	800888c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	460b      	mov	r3, r1
 80088a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	32ae      	adds	r2, #174	; 0xae
 80088ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e01c      	b.n	80088f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d115      	bne.n	80088f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	32ae      	adds	r2, #174	; 0xae
 80088ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	32ae      	adds	r2, #174	; 0xae
 80088e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	4611      	mov	r1, r2
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	32ae      	adds	r2, #174	; 0xae
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	e01c      	b.n	8008956 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b03      	cmp	r3, #3
 8008926:	d115      	bne.n	8008954 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	32ae      	adds	r2, #174	; 0xae
 8008932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32ae      	adds	r2, #174	; 0xae
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	4611      	mov	r1, r2
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6852      	ldr	r2, [r2, #4]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	4611      	mov	r1, r2
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b086      	sub	sp, #24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d920      	bls.n	8008a58 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a1e:	e013      	b.n	8008a48 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a20:	f107 030a 	add.w	r3, r7, #10
 8008a24:	4619      	mov	r1, r3
 8008a26:	6978      	ldr	r0, [r7, #20]
 8008a28:	f000 f81b 	bl	8008a62 <USBD_GetNextDesc>
 8008a2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	785b      	ldrb	r3, [r3, #1]
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d108      	bne.n	8008a48 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	789b      	ldrb	r3, [r3, #2]
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d008      	beq.n	8008a56 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	897b      	ldrh	r3, [r7, #10]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d8e5      	bhi.n	8008a20 <USBD_GetEpDesc+0x32>
 8008a54:	e000      	b.n	8008a58 <USBD_GetEpDesc+0x6a>
          break;
 8008a56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a58:	693b      	ldr	r3, [r7, #16]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b085      	sub	sp, #20
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	881a      	ldrh	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	4413      	add	r3, r2
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008aba:	8a3b      	ldrh	r3, [r7, #16]
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	b21a      	sxth	r2, r3
 8008ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	b21b      	sxth	r3, r3
 8008ac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008aca:	89fb      	ldrh	r3, [r7, #14]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	371c      	adds	r7, #28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d005      	beq.n	8008afe <USBD_StdDevReq+0x26>
 8008af2:	2b40      	cmp	r3, #64	; 0x40
 8008af4:	d857      	bhi.n	8008ba6 <USBD_StdDevReq+0xce>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <USBD_StdDevReq+0x42>
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d153      	bne.n	8008ba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	32ae      	adds	r2, #174	; 0xae
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
      break;
 8008b18:	e04a      	b.n	8008bb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d83b      	bhi.n	8008b9a <USBD_StdDevReq+0xc2>
 8008b22:	a201      	add	r2, pc, #4	; (adr r2, 8008b28 <USBD_StdDevReq+0x50>)
 8008b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b28:	08008b7d 	.word	0x08008b7d
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008b9b 	.word	0x08008b9b
 8008b34:	08008b87 	.word	0x08008b87
 8008b38:	08008b9b 	.word	0x08008b9b
 8008b3c:	08008b5b 	.word	0x08008b5b
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b9b 	.word	0x08008b9b
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b65 	.word	0x08008b65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fa3c 	bl	8008fd0 <USBD_GetDescriptor>
          break;
 8008b58:	e024      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fba1 	bl	80092a4 <USBD_SetAddress>
          break;
 8008b62:	e01f      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fbe0 	bl	800932c <USBD_SetConfig>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b70:	e018      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc83 	bl	8009480 <USBD_GetConfig>
          break;
 8008b7a:	e013      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fcb4 	bl	80094ec <USBD_GetStatus>
          break;
 8008b84:	e00e      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fce3 	bl	8009554 <USBD_SetFeature>
          break;
 8008b8e:	e009      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fd07 	bl	80095a6 <USBD_ClrFeature>
          break;
 8008b98:	e004      	b.n	8008ba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fd5e 	bl	800965e <USBD_CtlError>
          break;
 8008ba2:	bf00      	nop
      }
      break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd58 	bl	800965e <USBD_CtlError>
      break;
 8008bae:	bf00      	nop
  }

  return ret;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop

08008bbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d005      	beq.n	8008be2 <USBD_StdItfReq+0x26>
 8008bd6:	2b40      	cmp	r3, #64	; 0x40
 8008bd8:	d852      	bhi.n	8008c80 <USBD_StdItfReq+0xc4>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <USBD_StdItfReq+0x26>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	d14e      	bne.n	8008c80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d840      	bhi.n	8008c72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	889b      	ldrh	r3, [r3, #4]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d836      	bhi.n	8008c68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fed9 	bl	80089ba <USBD_CoreFindIF>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2bff      	cmp	r3, #255	; 0xff
 8008c10:	d01d      	beq.n	8008c4e <USBD_StdItfReq+0x92>
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d11a      	bne.n	8008c4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c18:	7bba      	ldrb	r2, [r7, #14]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32ae      	adds	r2, #174	; 0xae
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00f      	beq.n	8008c48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c28:	7bba      	ldrb	r2, [r7, #14]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c30:	7bba      	ldrb	r2, [r7, #14]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32ae      	adds	r2, #174	; 0xae
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c46:	e004      	b.n	8008c52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c4c:	e001      	b.n	8008c52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <USBD_StdItfReq+0xc0>
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10d      	bne.n	8008c7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fdc7 	bl	80097f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c66:	e009      	b.n	8008c7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fcf7 	bl	800965e <USBD_CtlError>
          break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fcf2 	bl	800965e <USBD_CtlError>
          break;
 8008c7a:	e000      	b.n	8008c7e <USBD_StdItfReq+0xc2>
          break;
 8008c7c:	bf00      	nop
      }
      break;
 8008c7e:	e004      	b.n	8008c8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fceb 	bl	800965e <USBD_CtlError>
      break;
 8008c88:	bf00      	nop
  }

  return ret;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d007      	beq.n	8008cc4 <USBD_StdEPReq+0x30>
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	f200 817f 	bhi.w	8008fb8 <USBD_StdEPReq+0x324>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d02a      	beq.n	8008d14 <USBD_StdEPReq+0x80>
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	f040 817a 	bne.w	8008fb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff fe83 	bl	80089d4 <USBD_CoreFindEP>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cd2:	7b7b      	ldrb	r3, [r7, #13]
 8008cd4:	2bff      	cmp	r3, #255	; 0xff
 8008cd6:	f000 8174 	beq.w	8008fc2 <USBD_StdEPReq+0x32e>
 8008cda:	7b7b      	ldrb	r3, [r7, #13]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 8170 	bne.w	8008fc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ce2:	7b7a      	ldrb	r2, [r7, #13]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008cea:	7b7a      	ldrb	r2, [r7, #13]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32ae      	adds	r2, #174	; 0xae
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 8163 	beq.w	8008fc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cfc:	7b7a      	ldrb	r2, [r7, #13]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	32ae      	adds	r2, #174	; 0xae
 8008d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d12:	e156      	b.n	8008fc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d008      	beq.n	8008d2e <USBD_StdEPReq+0x9a>
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	f300 8145 	bgt.w	8008fac <USBD_StdEPReq+0x318>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f000 809b 	beq.w	8008e5e <USBD_StdEPReq+0x1ca>
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d03c      	beq.n	8008da6 <USBD_StdEPReq+0x112>
 8008d2c:	e13e      	b.n	8008fac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d002      	beq.n	8008d40 <USBD_StdEPReq+0xac>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d016      	beq.n	8008d6c <USBD_StdEPReq+0xd8>
 8008d3e:	e02c      	b.n	8008d9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00d      	beq.n	8008d62 <USBD_StdEPReq+0xce>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	; 0x80
 8008d4a:	d00a      	beq.n	8008d62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f963 	bl	800a01c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d56:	2180      	movs	r1, #128	; 0x80
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 f95f 	bl	800a01c <USBD_LL_StallEP>
 8008d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d60:	e020      	b.n	8008da4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fc7a 	bl	800965e <USBD_CtlError>
              break;
 8008d6a:	e01b      	b.n	8008da4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10e      	bne.n	8008d92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <USBD_StdEPReq+0xfe>
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b80      	cmp	r3, #128	; 0x80
 8008d7e:	d008      	beq.n	8008d92 <USBD_StdEPReq+0xfe>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d104      	bne.n	8008d92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f945 	bl	800a01c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fd2e 	bl	80097f4 <USBD_CtlSendStatus>

              break;
 8008d98:	e004      	b.n	8008da4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc5e 	bl	800965e <USBD_CtlError>
              break;
 8008da2:	bf00      	nop
          }
          break;
 8008da4:	e107      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d002      	beq.n	8008db8 <USBD_StdEPReq+0x124>
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d016      	beq.n	8008de4 <USBD_StdEPReq+0x150>
 8008db6:	e04b      	b.n	8008e50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <USBD_StdEPReq+0x146>
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	2b80      	cmp	r3, #128	; 0x80
 8008dc2:	d00a      	beq.n	8008dda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f927 	bl	800a01c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dce:	2180      	movs	r1, #128	; 0x80
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 f923 	bl	800a01c <USBD_LL_StallEP>
 8008dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dd8:	e040      	b.n	8008e5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc3e 	bl	800965e <USBD_CtlError>
              break;
 8008de2:	e03b      	b.n	8008e5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d136      	bne.n	8008e5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 f92d 	bl	800a05a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fcf7 	bl	80097f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fde2 	bl	80089d4 <USBD_CoreFindEP>
 8008e10:	4603      	mov	r3, r0
 8008e12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e14:	7b7b      	ldrb	r3, [r7, #13]
 8008e16:	2bff      	cmp	r3, #255	; 0xff
 8008e18:	d01f      	beq.n	8008e5a <USBD_StdEPReq+0x1c6>
 8008e1a:	7b7b      	ldrb	r3, [r7, #13]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d11c      	bne.n	8008e5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e20:	7b7a      	ldrb	r2, [r7, #13]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e28:	7b7a      	ldrb	r2, [r7, #13]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32ae      	adds	r2, #174	; 0xae
 8008e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e38:	7b7a      	ldrb	r2, [r7, #13]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32ae      	adds	r2, #174	; 0xae
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e4e:	e004      	b.n	8008e5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc03 	bl	800965e <USBD_CtlError>
              break;
 8008e58:	e000      	b.n	8008e5c <USBD_StdEPReq+0x1c8>
              break;
 8008e5a:	bf00      	nop
          }
          break;
 8008e5c:	e0ab      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d002      	beq.n	8008e70 <USBD_StdEPReq+0x1dc>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d032      	beq.n	8008ed4 <USBD_StdEPReq+0x240>
 8008e6e:	e097      	b.n	8008fa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <USBD_StdEPReq+0x1f2>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d004      	beq.n	8008e86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fbed 	bl	800965e <USBD_CtlError>
                break;
 8008e84:	e091      	b.n	8008faa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da0b      	bge.n	8008ea6 <USBD_StdEPReq+0x212>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e94:	4613      	mov	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	3310      	adds	r3, #16
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	e00b      	b.n	8008ebe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	4413      	add	r3, r2
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fc37 	bl	8009740 <USBD_CtlSendData>
              break;
 8008ed2:	e06a      	b.n	8008faa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	da11      	bge.n	8008f00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3324      	adds	r3, #36	; 0x24
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d117      	bne.n	8008f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fbb0 	bl	800965e <USBD_CtlError>
                  break;
 8008efe:	e054      	b.n	8008faa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	f003 020f 	and.w	r2, r3, #15
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d104      	bne.n	8008f26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb9d 	bl	800965e <USBD_CtlError>
                  break;
 8008f24:	e041      	b.n	8008faa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da0b      	bge.n	8008f46 <USBD_StdEPReq+0x2b2>
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	3304      	adds	r3, #4
 8008f44:	e00b      	b.n	8008f5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d002      	beq.n	8008f6c <USBD_StdEPReq+0x2d8>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b80      	cmp	r3, #128	; 0x80
 8008f6a:	d103      	bne.n	8008f74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	e00e      	b.n	8008f92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f88d 	bl	800a098 <USBD_LL_IsStallEP>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2201      	movs	r2, #1
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	e002      	b.n	8008f92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2202      	movs	r2, #2
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fbd1 	bl	8009740 <USBD_CtlSendData>
              break;
 8008f9e:	e004      	b.n	8008faa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fb5b 	bl	800965e <USBD_CtlError>
              break;
 8008fa8:	bf00      	nop
          }
          break;
 8008faa:	e004      	b.n	8008fb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb55 	bl	800965e <USBD_CtlError>
          break;
 8008fb4:	bf00      	nop
      }
      break;
 8008fb6:	e005      	b.n	8008fc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fb4f 	bl	800965e <USBD_CtlError>
      break;
 8008fc0:	e000      	b.n	8008fc4 <USBD_StdEPReq+0x330>
      break;
 8008fc2:	bf00      	nop
  }

  return ret;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	2b06      	cmp	r3, #6
 8008ff2:	f200 8128 	bhi.w	8009246 <USBD_GetDescriptor+0x276>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBD_GetDescriptor+0x2c>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	08009019 	.word	0x08009019
 8009000:	08009031 	.word	0x08009031
 8009004:	08009071 	.word	0x08009071
 8009008:	08009247 	.word	0x08009247
 800900c:	08009247 	.word	0x08009247
 8009010:	080091e7 	.word	0x080091e7
 8009014:	08009213 	.word	0x08009213
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
      break;
 800902e:	e112      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	7c1b      	ldrb	r3, [r3, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10d      	bne.n	8009054 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800903e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009040:	f107 0208 	add.w	r2, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	3301      	adds	r3, #1
 800904e:	2202      	movs	r2, #2
 8009050:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009052:	e100      	b.n	8009256 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	f107 0208 	add.w	r2, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3301      	adds	r3, #1
 800906a:	2202      	movs	r2, #2
 800906c:	701a      	strb	r2, [r3, #0]
      break;
 800906e:	e0f2      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b05      	cmp	r3, #5
 8009078:	f200 80ac 	bhi.w	80091d4 <USBD_GetDescriptor+0x204>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USBD_GetDescriptor+0xb4>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	0800909d 	.word	0x0800909d
 8009088:	080090d1 	.word	0x080090d1
 800908c:	08009105 	.word	0x08009105
 8009090:	08009139 	.word	0x08009139
 8009094:	0800916d 	.word	0x0800916d
 8009098:	080091a1 	.word	0x080091a1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090be:	e091      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 facb 	bl	800965e <USBD_CtlError>
            err++;
 80090c8:	7afb      	ldrb	r3, [r7, #11]
 80090ca:	3301      	adds	r3, #1
 80090cc:	72fb      	strb	r3, [r7, #11]
          break;
 80090ce:	e089      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7c12      	ldrb	r2, [r2, #16]
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
 80090f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f2:	e077      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fab1 	bl	800965e <USBD_CtlError>
            err++;
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	3301      	adds	r3, #1
 8009100:	72fb      	strb	r3, [r7, #11]
          break;
 8009102:	e06f      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7c12      	ldrb	r2, [r2, #16]
 800911c:	f107 0108 	add.w	r1, r7, #8
 8009120:	4610      	mov	r0, r2
 8009122:	4798      	blx	r3
 8009124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009126:	e05d      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa97 	bl	800965e <USBD_CtlError>
            err++;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	3301      	adds	r3, #1
 8009134:	72fb      	strb	r3, [r7, #11]
          break;
 8009136:	e055      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915a:	e043      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa7d 	bl	800965e <USBD_CtlError>
            err++;
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	3301      	adds	r3, #1
 8009168:	72fb      	strb	r3, [r7, #11]
          break;
 800916a:	e03b      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	7c12      	ldrb	r2, [r2, #16]
 8009184:	f107 0108 	add.w	r1, r7, #8
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
 800918c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800918e:	e029      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa63 	bl	800965e <USBD_CtlError>
            err++;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3301      	adds	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]
          break;
 800919e:	e021      	b.n	80091e4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	7c12      	ldrb	r2, [r2, #16]
 80091b8:	f107 0108 	add.w	r1, r7, #8
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
 80091c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c2:	e00f      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa49 	bl	800965e <USBD_CtlError>
            err++;
 80091cc:	7afb      	ldrb	r3, [r7, #11]
 80091ce:	3301      	adds	r3, #1
 80091d0:	72fb      	strb	r3, [r7, #11]
          break;
 80091d2:	e007      	b.n	80091e4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa41 	bl	800965e <USBD_CtlError>
          err++;
 80091dc:	7afb      	ldrb	r3, [r7, #11]
 80091de:	3301      	adds	r3, #1
 80091e0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80091e2:	bf00      	nop
      }
      break;
 80091e4:	e037      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7c1b      	ldrb	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	f107 0208 	add.w	r2, r7, #8
 80091fa:	4610      	mov	r0, r2
 80091fc:	4798      	blx	r3
 80091fe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009200:	e029      	b.n	8009256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fa2a 	bl	800965e <USBD_CtlError>
        err++;
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	3301      	adds	r3, #1
 800920e:	72fb      	strb	r3, [r7, #11]
      break;
 8009210:	e021      	b.n	8009256 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	7c1b      	ldrb	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10d      	bne.n	8009236 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	f107 0208 	add.w	r2, r7, #8
 8009226:	4610      	mov	r0, r2
 8009228:	4798      	blx	r3
 800922a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	2207      	movs	r2, #7
 8009232:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009234:	e00f      	b.n	8009256 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa10 	bl	800965e <USBD_CtlError>
        err++;
 800923e:	7afb      	ldrb	r3, [r7, #11]
 8009240:	3301      	adds	r3, #1
 8009242:	72fb      	strb	r3, [r7, #11]
      break;
 8009244:	e007      	b.n	8009256 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa08 	bl	800965e <USBD_CtlError>
      err++;
 800924e:	7afb      	ldrb	r3, [r7, #11]
 8009250:	3301      	adds	r3, #1
 8009252:	72fb      	strb	r3, [r7, #11]
      break;
 8009254:	bf00      	nop
  }

  if (err != 0U)
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11e      	bne.n	800929a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	88db      	ldrh	r3, [r3, #6]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d016      	beq.n	8009292 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009264:	893b      	ldrh	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00e      	beq.n	8009288 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88da      	ldrh	r2, [r3, #6]
 800926e:	893b      	ldrh	r3, [r7, #8]
 8009270:	4293      	cmp	r3, r2
 8009272:	bf28      	it	cs
 8009274:	4613      	movcs	r3, r2
 8009276:	b29b      	uxth	r3, r3
 8009278:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800927a:	893b      	ldrh	r3, [r7, #8]
 800927c:	461a      	mov	r2, r3
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa5d 	bl	8009740 <USBD_CtlSendData>
 8009286:	e009      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f9e7 	bl	800965e <USBD_CtlError>
 8009290:	e004      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 faae 	bl	80097f4 <USBD_CtlSendStatus>
 8009298:	e000      	b.n	800929c <USBD_GetDescriptor+0x2cc>
    return;
 800929a:	bf00      	nop
  }
}
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d131      	bne.n	800931a <USBD_SetAddress+0x76>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	88db      	ldrh	r3, [r3, #6]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d12d      	bne.n	800931a <USBD_SetAddress+0x76>
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	885b      	ldrh	r3, [r3, #2]
 80092c2:	2b7f      	cmp	r3, #127	; 0x7f
 80092c4:	d829      	bhi.n	800931a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	885b      	ldrh	r3, [r3, #2]
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d104      	bne.n	80092e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f9bc 	bl	800965e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e6:	e01d      	b.n	8009324 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7bfa      	ldrb	r2, [r7, #15]
 80092ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fefb 	bl	800a0f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa7a 	bl	80097f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009300:	7bfb      	ldrb	r3, [r7, #15]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d004      	beq.n	8009310 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930e:	e009      	b.n	8009324 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009318:	e004      	b.n	8009324 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f99e 	bl	800965e <USBD_CtlError>
  }
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	885b      	ldrh	r3, [r3, #2]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	4b4e      	ldr	r3, [pc, #312]	; (800947c <USBD_SetConfig+0x150>)
 8009342:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009344:	4b4d      	ldr	r3, [pc, #308]	; (800947c <USBD_SetConfig+0x150>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d905      	bls.n	8009358 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800934c:	6839      	ldr	r1, [r7, #0]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f985 	bl	800965e <USBD_CtlError>
    return USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	e08c      	b.n	8009472 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d002      	beq.n	800936a <USBD_SetConfig+0x3e>
 8009364:	2b03      	cmp	r3, #3
 8009366:	d029      	beq.n	80093bc <USBD_SetConfig+0x90>
 8009368:	e075      	b.n	8009456 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800936a:	4b44      	ldr	r3, [pc, #272]	; (800947c <USBD_SetConfig+0x150>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d020      	beq.n	80093b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009372:	4b42      	ldr	r3, [pc, #264]	; (800947c <USBD_SetConfig+0x150>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800937c:	4b3f      	ldr	r3, [pc, #252]	; (800947c <USBD_SetConfig+0x150>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fe ffe7 	bl	8008356 <USBD_SetClassConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800938c:	7bfb      	ldrb	r3, [r7, #15]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d008      	beq.n	80093a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f962 	bl	800965e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2202      	movs	r2, #2
 800939e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093a2:	e065      	b.n	8009470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa25 	bl	80097f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2203      	movs	r2, #3
 80093ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093b2:	e05d      	b.n	8009470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fa1d 	bl	80097f4 <USBD_CtlSendStatus>
      break;
 80093ba:	e059      	b.n	8009470 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093bc:	4b2f      	ldr	r3, [pc, #188]	; (800947c <USBD_SetConfig+0x150>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d112      	bne.n	80093ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80093cc:	4b2b      	ldr	r3, [pc, #172]	; (800947c <USBD_SetConfig+0x150>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093d6:	4b29      	ldr	r3, [pc, #164]	; (800947c <USBD_SetConfig+0x150>)
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fe ffd6 	bl	800838e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa06 	bl	80097f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093e8:	e042      	b.n	8009470 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80093ea:	4b24      	ldr	r3, [pc, #144]	; (800947c <USBD_SetConfig+0x150>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d02a      	beq.n	800944e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe ffc4 	bl	800838e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009406:	4b1d      	ldr	r3, [pc, #116]	; (800947c <USBD_SetConfig+0x150>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009410:	4b1a      	ldr	r3, [pc, #104]	; (800947c <USBD_SetConfig+0x150>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe ff9d 	bl	8008356 <USBD_SetClassConfig>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00f      	beq.n	8009446 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f918 	bl	800965e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe ffa9 	bl	800838e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009444:	e014      	b.n	8009470 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f9d4 	bl	80097f4 <USBD_CtlSendStatus>
      break;
 800944c:	e010      	b.n	8009470 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f9d0 	bl	80097f4 <USBD_CtlSendStatus>
      break;
 8009454:	e00c      	b.n	8009470 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f900 	bl	800965e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800945e:	4b07      	ldr	r3, [pc, #28]	; (800947c <USBD_SetConfig+0x150>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7fe ff92 	bl	800838e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
      break;
 800946e:	bf00      	nop
  }

  return ret;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200003d8 	.word	0x200003d8

08009480 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	88db      	ldrh	r3, [r3, #6]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d004      	beq.n	800949c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8e2 	bl	800965e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800949a:	e023      	b.n	80094e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	dc02      	bgt.n	80094ae <USBD_GetConfig+0x2e>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc03      	bgt.n	80094b4 <USBD_GetConfig+0x34>
 80094ac:	e015      	b.n	80094da <USBD_GetConfig+0x5a>
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d00b      	beq.n	80094ca <USBD_GetConfig+0x4a>
 80094b2:	e012      	b.n	80094da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	3308      	adds	r3, #8
 80094be:	2201      	movs	r2, #1
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f93c 	bl	8009740 <USBD_CtlSendData>
        break;
 80094c8:	e00c      	b.n	80094e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3304      	adds	r3, #4
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f934 	bl	8009740 <USBD_CtlSendData>
        break;
 80094d8:	e004      	b.n	80094e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f8be 	bl	800965e <USBD_CtlError>
        break;
 80094e2:	bf00      	nop
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	2b02      	cmp	r3, #2
 8009502:	d81e      	bhi.n	8009542 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	88db      	ldrh	r3, [r3, #6]
 8009508:	2b02      	cmp	r3, #2
 800950a:	d004      	beq.n	8009516 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8a5 	bl	800965e <USBD_CtlError>
        break;
 8009514:	e01a      	b.n	800954c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f043 0202 	orr.w	r2, r3, #2
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	330c      	adds	r3, #12
 8009536:	2202      	movs	r2, #2
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f900 	bl	8009740 <USBD_CtlSendData>
      break;
 8009540:	e004      	b.n	800954c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f88a 	bl	800965e <USBD_CtlError>
      break;
 800954a:	bf00      	nop
  }
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	885b      	ldrh	r3, [r3, #2]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d107      	bne.n	8009576 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f940 	bl	80097f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009574:	e013      	b.n	800959e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	885b      	ldrh	r3, [r3, #2]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d10b      	bne.n	8009596 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	889b      	ldrh	r3, [r3, #4]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f930 	bl	80097f4 <USBD_CtlSendStatus>
}
 8009594:	e003      	b.n	800959e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 f860 	bl	800965e <USBD_CtlError>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	3b01      	subs	r3, #1
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d80b      	bhi.n	80095d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d10c      	bne.n	80095e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f910 	bl	80097f4 <USBD_CtlSendStatus>
      }
      break;
 80095d4:	e004      	b.n	80095e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f840 	bl	800965e <USBD_CtlError>
      break;
 80095de:	e000      	b.n	80095e2 <USBD_ClrFeature+0x3c>
      break;
 80095e0:	bf00      	nop
  }
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	781a      	ldrb	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	781a      	ldrb	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3301      	adds	r3, #1
 8009612:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fa41 	bl	8008a9c <SWAPBYTE>
 800961a:	4603      	mov	r3, r0
 800961c:	461a      	mov	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3301      	adds	r3, #1
 8009626:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f7ff fa34 	bl	8008a9c <SWAPBYTE>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	3301      	adds	r3, #1
 8009640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fa27 	bl	8008a9c <SWAPBYTE>
 800964e:	4603      	mov	r3, r0
 8009650:	461a      	mov	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	80da      	strh	r2, [r3, #6]
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fcd6 	bl	800a01c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fcd2 	bl	800a01c <USBD_LL_StallEP>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d036      	beq.n	8009704 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 f836 	bl	800970c <USBD_GetLen>
 80096a0:	4603      	mov	r3, r0
 80096a2:	3301      	adds	r3, #1
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	4413      	add	r3, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	7812      	ldrb	r2, [r2, #0]
 80096b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	3301      	adds	r3, #1
 80096be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	4413      	add	r3, r2
 80096c6:	2203      	movs	r2, #3
 80096c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	3301      	adds	r3, #1
 80096ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096d0:	e013      	b.n	80096fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	4413      	add	r3, r2
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	3301      	adds	r3, #1
 80096e2:	613b      	str	r3, [r7, #16]
    idx++;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	3301      	adds	r3, #1
 80096e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	4413      	add	r3, r2
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	3301      	adds	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e7      	bne.n	80096d2 <USBD_GetString+0x52>
 8009702:	e000      	b.n	8009706 <USBD_GetString+0x86>
    return;
 8009704:	bf00      	nop
  }
}
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800971c:	e005      	b.n	800972a <USBD_GetLen+0x1e>
  {
    len++;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	3301      	adds	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	3301      	adds	r3, #1
 8009728:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f5      	bne.n	800971e <USBD_GetLen+0x12>
  }

  return len;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2202      	movs	r2, #2
 8009750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	2100      	movs	r1, #0
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fce1 	bl	800a12e <USBD_LL_Transmit>

  return USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	2100      	movs	r1, #0
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fcd0 	bl	800a12e <USBD_LL_Transmit>

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2203      	movs	r2, #3
 80097a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	2100      	movs	r1, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fcd4 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	2100      	movs	r1, #0
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fcc3 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2204      	movs	r2, #4
 8009800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fc8f 	bl	800a12e <USBD_LL_Transmit>

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2205      	movs	r2, #5
 8009826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fc9d 	bl	800a170 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009844:	2200      	movs	r2, #0
 8009846:	4912      	ldr	r1, [pc, #72]	; (8009890 <MX_USB_DEVICE_Init+0x50>)
 8009848:	4812      	ldr	r0, [pc, #72]	; (8009894 <MX_USB_DEVICE_Init+0x54>)
 800984a:	f7fe fd07 	bl	800825c <USBD_Init>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009854:	f7f7 fb88 	bl	8000f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009858:	490f      	ldr	r1, [pc, #60]	; (8009898 <MX_USB_DEVICE_Init+0x58>)
 800985a:	480e      	ldr	r0, [pc, #56]	; (8009894 <MX_USB_DEVICE_Init+0x54>)
 800985c:	f7fe fd2e 	bl	80082bc <USBD_RegisterClass>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009866:	f7f7 fb7f 	bl	8000f68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800986a:	490c      	ldr	r1, [pc, #48]	; (800989c <MX_USB_DEVICE_Init+0x5c>)
 800986c:	4809      	ldr	r0, [pc, #36]	; (8009894 <MX_USB_DEVICE_Init+0x54>)
 800986e:	f7fe fc1f 	bl	80080b0 <USBD_CDC_RegisterInterface>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009878:	f7f7 fb76 	bl	8000f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800987c:	4805      	ldr	r0, [pc, #20]	; (8009894 <MX_USB_DEVICE_Init+0x54>)
 800987e:	f7fe fd53 	bl	8008328 <USBD_Start>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009888:	f7f7 fb6e 	bl	8000f68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800988c:	bf00      	nop
 800988e:	bd80      	pop	{r7, pc}
 8009890:	200000b4 	.word	0x200000b4
 8009894:	200003dc 	.word	0x200003dc
 8009898:	20000020 	.word	0x20000020
 800989c:	200000a0 	.word	0x200000a0

080098a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098a4:	2200      	movs	r2, #0
 80098a6:	4905      	ldr	r1, [pc, #20]	; (80098bc <CDC_Init_FS+0x1c>)
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <CDC_Init_FS+0x20>)
 80098aa:	f7fe fc1b 	bl	80080e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098ae:	4905      	ldr	r1, [pc, #20]	; (80098c4 <CDC_Init_FS+0x24>)
 80098b0:	4803      	ldr	r0, [pc, #12]	; (80098c0 <CDC_Init_FS+0x20>)
 80098b2:	f7fe fc39 	bl	8008128 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	20000eb8 	.word	0x20000eb8
 80098c0:	200003dc 	.word	0x200003dc
 80098c4:	200006b8 	.word	0x200006b8

080098c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	6039      	str	r1, [r7, #0]
 80098e2:	71fb      	strb	r3, [r7, #7]
 80098e4:	4613      	mov	r3, r2
 80098e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	2b23      	cmp	r3, #35	; 0x23
 80098ec:	d84a      	bhi.n	8009984 <CDC_Control_FS+0xac>
 80098ee:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <CDC_Control_FS+0x1c>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009985 	.word	0x08009985
 80098f8:	08009985 	.word	0x08009985
 80098fc:	08009985 	.word	0x08009985
 8009900:	08009985 	.word	0x08009985
 8009904:	08009985 	.word	0x08009985
 8009908:	08009985 	.word	0x08009985
 800990c:	08009985 	.word	0x08009985
 8009910:	08009985 	.word	0x08009985
 8009914:	08009985 	.word	0x08009985
 8009918:	08009985 	.word	0x08009985
 800991c:	08009985 	.word	0x08009985
 8009920:	08009985 	.word	0x08009985
 8009924:	08009985 	.word	0x08009985
 8009928:	08009985 	.word	0x08009985
 800992c:	08009985 	.word	0x08009985
 8009930:	08009985 	.word	0x08009985
 8009934:	08009985 	.word	0x08009985
 8009938:	08009985 	.word	0x08009985
 800993c:	08009985 	.word	0x08009985
 8009940:	08009985 	.word	0x08009985
 8009944:	08009985 	.word	0x08009985
 8009948:	08009985 	.word	0x08009985
 800994c:	08009985 	.word	0x08009985
 8009950:	08009985 	.word	0x08009985
 8009954:	08009985 	.word	0x08009985
 8009958:	08009985 	.word	0x08009985
 800995c:	08009985 	.word	0x08009985
 8009960:	08009985 	.word	0x08009985
 8009964:	08009985 	.word	0x08009985
 8009968:	08009985 	.word	0x08009985
 800996c:	08009985 	.word	0x08009985
 8009970:	08009985 	.word	0x08009985
 8009974:	08009985 	.word	0x08009985
 8009978:	08009985 	.word	0x08009985
 800997c:	08009985 	.word	0x08009985
 8009980:	08009985 	.word	0x08009985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009984:	bf00      	nop
  }

  return (USBD_OK);
 8009986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009988:	4618      	mov	r0, r3
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	4805      	ldr	r0, [pc, #20]	; (80099b8 <CDC_Receive_FS+0x24>)
 80099a2:	f7fe fbc1 	bl	8008128 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099a6:	4804      	ldr	r0, [pc, #16]	; (80099b8 <CDC_Receive_FS+0x24>)
 80099a8:	f7fe fc22 	bl	80081f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200003dc 	.word	0x200003dc

080099bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099cc:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <CDC_Transmit_FS+0x48>)
 80099ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099de:	2301      	movs	r3, #1
 80099e0:	e00b      	b.n	80099fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099e2:	887b      	ldrh	r3, [r7, #2]
 80099e4:	461a      	mov	r2, r3
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4806      	ldr	r0, [pc, #24]	; (8009a04 <CDC_Transmit_FS+0x48>)
 80099ea:	f7fe fb7b 	bl	80080e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ee:	4805      	ldr	r0, [pc, #20]	; (8009a04 <CDC_Transmit_FS+0x48>)
 80099f0:	f7fe fbb8 	bl	8008164 <USBD_CDC_TransmitPacket>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200003dc 	.word	0x200003dc

08009a08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
	...

08009a2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2212      	movs	r2, #18
 8009a3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a3e:	4b03      	ldr	r3, [pc, #12]	; (8009a4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	200000d0 	.word	0x200000d0

08009a50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	6039      	str	r1, [r7, #0]
 8009a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2204      	movs	r2, #4
 8009a60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a62:	4b03      	ldr	r3, [pc, #12]	; (8009a70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	200000e4 	.word	0x200000e4

08009a74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d105      	bne.n	8009a92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	4907      	ldr	r1, [pc, #28]	; (8009aa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a8a:	4808      	ldr	r0, [pc, #32]	; (8009aac <USBD_FS_ProductStrDescriptor+0x38>)
 8009a8c:	f7ff fdf8 	bl	8009680 <USBD_GetString>
 8009a90:	e004      	b.n	8009a9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4904      	ldr	r1, [pc, #16]	; (8009aa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a96:	4805      	ldr	r0, [pc, #20]	; (8009aac <USBD_FS_ProductStrDescriptor+0x38>)
 8009a98:	f7ff fdf2 	bl	8009680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	200016b8 	.word	0x200016b8
 8009aac:	0800b4cc 	.word	0x0800b4cc

08009ab0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ac0:	4804      	ldr	r0, [pc, #16]	; (8009ad4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ac2:	f7ff fddd 	bl	8009680 <USBD_GetString>
  return USBD_StrDesc;
 8009ac6:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	200016b8 	.word	0x200016b8
 8009ad4:	0800b4e4 	.word	0x0800b4e4

08009ad8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	221a      	movs	r2, #26
 8009ae8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009aea:	f000 f843 	bl	8009b74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aee:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	200000e8 	.word	0x200000e8

08009afc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d105      	bne.n	8009b1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	4907      	ldr	r1, [pc, #28]	; (8009b30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b12:	4808      	ldr	r0, [pc, #32]	; (8009b34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b14:	f7ff fdb4 	bl	8009680 <USBD_GetString>
 8009b18:	e004      	b.n	8009b24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	4904      	ldr	r1, [pc, #16]	; (8009b30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b1e:	4805      	ldr	r0, [pc, #20]	; (8009b34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b20:	f7ff fdae 	bl	8009680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	200016b8 	.word	0x200016b8
 8009b34:	0800b4f8 	.word	0x0800b4f8

08009b38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	6039      	str	r1, [r7, #0]
 8009b42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b44:	79fb      	ldrb	r3, [r7, #7]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d105      	bne.n	8009b56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	4907      	ldr	r1, [pc, #28]	; (8009b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b4e:	4808      	ldr	r0, [pc, #32]	; (8009b70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b50:	f7ff fd96 	bl	8009680 <USBD_GetString>
 8009b54:	e004      	b.n	8009b60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4904      	ldr	r1, [pc, #16]	; (8009b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b5a:	4805      	ldr	r0, [pc, #20]	; (8009b70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b5c:	f7ff fd90 	bl	8009680 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200016b8 	.word	0x200016b8
 8009b70:	0800b504 	.word	0x0800b504

08009b74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <Get_SerialNum+0x44>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b80:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <Get_SerialNum+0x48>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b86:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <Get_SerialNum+0x4c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	4909      	ldr	r1, [pc, #36]	; (8009bc4 <Get_SerialNum+0x50>)
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f814 	bl	8009bcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	4908      	ldr	r1, [pc, #32]	; (8009bc8 <Get_SerialNum+0x54>)
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f000 f80f 	bl	8009bcc <IntToUnicode>
  }
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	1fff7a10 	.word	0x1fff7a10
 8009bbc:	1fff7a14 	.word	0x1fff7a14
 8009bc0:	1fff7a18 	.word	0x1fff7a18
 8009bc4:	200000ea 	.word	0x200000ea
 8009bc8:	200000fa 	.word	0x200000fa

08009bcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bde:	2300      	movs	r3, #0
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	e027      	b.n	8009c34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	0f1b      	lsrs	r3, r3, #28
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	d80b      	bhi.n	8009c04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	0f1b      	lsrs	r3, r3, #28
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3230      	adds	r2, #48	; 0x30
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
 8009c02:	e00a      	b.n	8009c1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	0f1b      	lsrs	r3, r3, #28
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	4619      	mov	r1, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	440b      	add	r3, r1
 8009c14:	3237      	adds	r2, #55	; 0x37
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	3301      	adds	r3, #1
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	4413      	add	r3, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	3301      	adds	r3, #1
 8009c32:	75fb      	strb	r3, [r7, #23]
 8009c34:	7dfa      	ldrb	r2, [r7, #23]
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d3d3      	bcc.n	8009be4 <IntToUnicode+0x18>
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08a      	sub	sp, #40	; 0x28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c54:	f107 0314 	add.w	r3, r7, #20
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	605a      	str	r2, [r3, #4]
 8009c5e:	609a      	str	r2, [r3, #8]
 8009c60:	60da      	str	r2, [r3, #12]
 8009c62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c6c:	d13a      	bne.n	8009ce4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c6e:	2300      	movs	r3, #0
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	4b1e      	ldr	r3, [pc, #120]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c76:	4a1d      	ldr	r2, [pc, #116]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009c78:	f043 0301 	orr.w	r3, r3, #1
 8009c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c7e:	4b1b      	ldr	r3, [pc, #108]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c90:	2302      	movs	r3, #2
 8009c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c9c:	230a      	movs	r3, #10
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ca0:	f107 0314 	add.w	r3, r7, #20
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4812      	ldr	r0, [pc, #72]	; (8009cf0 <HAL_PCD_MspInit+0xa4>)
 8009ca8:	f7f7 ff0c 	bl	8001ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cac:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	4a0e      	ldr	r2, [pc, #56]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cb6:	6353      	str	r3, [r2, #52]	; 0x34
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cc0:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cc6:	6453      	str	r3, [r2, #68]	; 0x44
 8009cc8:	4b08      	ldr	r3, [pc, #32]	; (8009cec <HAL_PCD_MspInit+0xa0>)
 8009cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	2043      	movs	r0, #67	; 0x43
 8009cda:	f7f7 febc 	bl	8001a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cde:	2043      	movs	r0, #67	; 0x43
 8009ce0:	f7f7 fed5 	bl	8001a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ce4:	bf00      	nop
 8009ce6:	3728      	adds	r7, #40	; 0x28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	40023800 	.word	0x40023800
 8009cf0:	40020000 	.word	0x40020000

08009cf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d08:	4619      	mov	r1, r3
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	f7fe fb59 	bl	80083c2 <USBD_LL_SetupStage>
}
 8009d10:	bf00      	nop
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	6879      	ldr	r1, [r7, #4]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	4413      	add	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	440b      	add	r3, r1
 8009d38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	4619      	mov	r1, r3
 8009d42:	f7fe fb93 	bl	800846c <USBD_LL_DataOutStage>
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d60:	78fa      	ldrb	r2, [r7, #3]
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	4613      	mov	r3, r2
 8009d66:	00db      	lsls	r3, r3, #3
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	334c      	adds	r3, #76	; 0x4c
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7fe fc2c 	bl	80085d2 <USBD_LL_DataInStage>
}
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b082      	sub	sp, #8
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fd60 	bl	8008856 <USBD_LL_SOF>
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009da6:	2301      	movs	r3, #1
 8009da8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d001      	beq.n	8009db6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009db2:	f7f7 f8d9 	bl	8000f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dbc:	7bfa      	ldrb	r2, [r7, #15]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fd0a 	bl	80087da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fcb2 	bl	8008736 <USBD_LL_Reset>
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fd05 	bl	80087fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d005      	beq.n	8009e1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e10:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <HAL_PCD_SuspendCallback+0x48>)
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	4a03      	ldr	r2, [pc, #12]	; (8009e24 <HAL_PCD_SuspendCallback+0x48>)
 8009e16:	f043 0306 	orr.w	r3, r3, #6
 8009e1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	e000ed00 	.word	0xe000ed00

08009e28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fcf5 	bl	8008826 <USBD_LL_Resume>
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fd4d 	bl	80088fa <USBD_LL_IsoOUTIncomplete>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fd09 	bl	8008896 <USBD_LL_IsoINIncomplete>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fd5f 	bl	800895e <USBD_LL_DevConnected>
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fd5c 	bl	8008974 <USBD_LL_DevDisconnected>
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d13c      	bne.n	8009f4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ed4:	4a20      	ldr	r2, [pc, #128]	; (8009f58 <USBD_LL_Init+0x94>)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a1e      	ldr	r2, [pc, #120]	; (8009f58 <USBD_LL_Init+0x94>)
 8009ee0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ee4:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <USBD_LL_Init+0x94>)
 8009ee6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009eea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009eec:	4b1a      	ldr	r3, [pc, #104]	; (8009f58 <USBD_LL_Init+0x94>)
 8009eee:	2204      	movs	r2, #4
 8009ef0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ef2:	4b19      	ldr	r3, [pc, #100]	; (8009f58 <USBD_LL_Init+0x94>)
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ef8:	4b17      	ldr	r3, [pc, #92]	; (8009f58 <USBD_LL_Init+0x94>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009efe:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f00:	2202      	movs	r2, #2
 8009f02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f04:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f0a:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f10:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f16:	4b10      	ldr	r3, [pc, #64]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f1c:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f22:	480d      	ldr	r0, [pc, #52]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f24:	f7f9 f871 	bl	800300a <HAL_PCD_Init>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d001      	beq.n	8009f32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f2e:	f7f7 f81b 	bl	8000f68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f32:	2180      	movs	r1, #128	; 0x80
 8009f34:	4808      	ldr	r0, [pc, #32]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f36:	f7fa fac8 	bl	80044ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f3a:	2240      	movs	r2, #64	; 0x40
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4806      	ldr	r0, [pc, #24]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f40:	f7fa fa7c 	bl	800443c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f44:	2280      	movs	r2, #128	; 0x80
 8009f46:	2101      	movs	r1, #1
 8009f48:	4803      	ldr	r0, [pc, #12]	; (8009f58 <USBD_LL_Init+0x94>)
 8009f4a:	f7fa fa77 	bl	800443c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	200018b8 	.word	0x200018b8

08009f5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f9 f966 	bl	8003244 <HAL_PCD_Start>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 f942 	bl	800a208 <USBD_Get_USB_Status>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	70fb      	strb	r3, [r7, #3]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70bb      	strb	r3, [r7, #2]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fba:	78bb      	ldrb	r3, [r7, #2]
 8009fbc:	883a      	ldrh	r2, [r7, #0]
 8009fbe:	78f9      	ldrb	r1, [r7, #3]
 8009fc0:	f7f9 fe37 	bl	8003c32 <HAL_PCD_EP_Open>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc8:	7bfb      	ldrb	r3, [r7, #15]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f91c 	bl	800a208 <USBD_Get_USB_Status>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7f9 fe80 	bl	8003d02 <HAL_PCD_EP_Close>
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f8fd 	bl	800a208 <USBD_Get_USB_Status>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a012:	7bbb      	ldrb	r3, [r7, #14]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	4611      	mov	r1, r2
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7f9 ff58 	bl	8003ef0 <HAL_PCD_EP_SetStall>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 f8de 	bl	800a208 <USBD_Get_USB_Status>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a050:	7bbb      	ldrb	r3, [r7, #14]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a074:	78fa      	ldrb	r2, [r7, #3]
 800a076:	4611      	mov	r1, r2
 800a078:	4618      	mov	r0, r3
 800a07a:	f7f9 ff9d 	bl	8003fb8 <HAL_PCD_EP_ClrStall>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f8bf 	bl	800a208 <USBD_Get_USB_Status>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	da0b      	bge.n	800a0cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	333e      	adds	r3, #62	; 0x3e
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	e00b      	b.n	800a0e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0d2:	68f9      	ldr	r1, [r7, #12]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	440b      	add	r3, r1
 800a0de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f9 fd6a 	bl	8003be8 <HAL_PCD_SetAddress>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f874 	bl	800a208 <USBD_Get_USB_Status>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a124:	7bbb      	ldrb	r3, [r7, #14]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
 800a13a:	460b      	mov	r3, r1
 800a13c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a14c:	7af9      	ldrb	r1, [r7, #11]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	f7f9 fe83 	bl	8003e5c <HAL_PCD_EP_Transmit>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 f853 	bl	800a208 <USBD_Get_USB_Status>
 800a162:	4603      	mov	r3, r0
 800a164:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a166:	7dbb      	ldrb	r3, [r7, #22]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3718      	adds	r7, #24
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	460b      	mov	r3, r1
 800a17e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a18e:	7af9      	ldrb	r1, [r7, #11]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	f7f9 fdff 	bl	8003d96 <HAL_PCD_EP_Receive>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 f832 	bl	800a208 <USBD_Get_USB_Status>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f9 fe2f 	bl	8003e2c <HAL_PCD_EP_GetRxCount>
 800a1ce:	4603      	mov	r3, r0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <USBD_static_malloc+0x18>)
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20001dc4 	.word	0x20001dc4

0800a1f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d817      	bhi.n	800a24c <USBD_Get_USB_Status+0x44>
 800a21c:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <USBD_Get_USB_Status+0x1c>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a235 	.word	0x0800a235
 800a228:	0800a23b 	.word	0x0800a23b
 800a22c:	0800a241 	.word	0x0800a241
 800a230:	0800a247 	.word	0x0800a247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
    break;
 800a238:	e00b      	b.n	800a252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a23a:	2303      	movs	r3, #3
 800a23c:	73fb      	strb	r3, [r7, #15]
    break;
 800a23e:	e008      	b.n	800a252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a240:	2301      	movs	r3, #1
 800a242:	73fb      	strb	r3, [r7, #15]
    break;
 800a244:	e005      	b.n	800a252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a246:	2303      	movs	r3, #3
 800a248:	73fb      	strb	r3, [r7, #15]
    break;
 800a24a:	e002      	b.n	800a252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a24c:	2303      	movs	r3, #3
 800a24e:	73fb      	strb	r3, [r7, #15]
    break;
 800a250:	bf00      	nop
  }
  return usb_status;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <__errno>:
 800a260:	4b01      	ldr	r3, [pc, #4]	; (800a268 <__errno+0x8>)
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000104 	.word	0x20000104

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4d0d      	ldr	r5, [pc, #52]	; (800a2a4 <__libc_init_array+0x38>)
 800a270:	4c0d      	ldr	r4, [pc, #52]	; (800a2a8 <__libc_init_array+0x3c>)
 800a272:	1b64      	subs	r4, r4, r5
 800a274:	10a4      	asrs	r4, r4, #2
 800a276:	2600      	movs	r6, #0
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	4d0b      	ldr	r5, [pc, #44]	; (800a2ac <__libc_init_array+0x40>)
 800a27e:	4c0c      	ldr	r4, [pc, #48]	; (800a2b0 <__libc_init_array+0x44>)
 800a280:	f001 f88e 	bl	800b3a0 <_init>
 800a284:	1b64      	subs	r4, r4, r5
 800a286:	10a4      	asrs	r4, r4, #2
 800a288:	2600      	movs	r6, #0
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800b5cc 	.word	0x0800b5cc
 800a2a8:	0800b5cc 	.word	0x0800b5cc
 800a2ac:	0800b5cc 	.word	0x0800b5cc
 800a2b0:	0800b5d0 	.word	0x0800b5d0

0800a2b4 <memset>:
 800a2b4:	4402      	add	r2, r0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d100      	bne.n	800a2be <memset+0xa>
 800a2bc:	4770      	bx	lr
 800a2be:	f803 1b01 	strb.w	r1, [r3], #1
 800a2c2:	e7f9      	b.n	800a2b8 <memset+0x4>

0800a2c4 <_puts_r>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	460e      	mov	r6, r1
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	b118      	cbz	r0, 800a2d4 <_puts_r+0x10>
 800a2cc:	6983      	ldr	r3, [r0, #24]
 800a2ce:	b90b      	cbnz	r3, 800a2d4 <_puts_r+0x10>
 800a2d0:	f000 fa68 	bl	800a7a4 <__sinit>
 800a2d4:	69ab      	ldr	r3, [r5, #24]
 800a2d6:	68ac      	ldr	r4, [r5, #8]
 800a2d8:	b913      	cbnz	r3, 800a2e0 <_puts_r+0x1c>
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 fa62 	bl	800a7a4 <__sinit>
 800a2e0:	4b2c      	ldr	r3, [pc, #176]	; (800a394 <_puts_r+0xd0>)
 800a2e2:	429c      	cmp	r4, r3
 800a2e4:	d120      	bne.n	800a328 <_puts_r+0x64>
 800a2e6:	686c      	ldr	r4, [r5, #4]
 800a2e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ea:	07db      	lsls	r3, r3, #31
 800a2ec:	d405      	bmi.n	800a2fa <_puts_r+0x36>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	0598      	lsls	r0, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_puts_r+0x36>
 800a2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f6:	f000 faf3 	bl	800a8e0 <__retarget_lock_acquire_recursive>
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	0719      	lsls	r1, r3, #28
 800a2fe:	d51d      	bpl.n	800a33c <_puts_r+0x78>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	b1db      	cbz	r3, 800a33c <_puts_r+0x78>
 800a304:	3e01      	subs	r6, #1
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a30c:	3b01      	subs	r3, #1
 800a30e:	60a3      	str	r3, [r4, #8]
 800a310:	bb39      	cbnz	r1, 800a362 <_puts_r+0x9e>
 800a312:	2b00      	cmp	r3, #0
 800a314:	da38      	bge.n	800a388 <_puts_r+0xc4>
 800a316:	4622      	mov	r2, r4
 800a318:	210a      	movs	r1, #10
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 f868 	bl	800a3f0 <__swbuf_r>
 800a320:	3001      	adds	r0, #1
 800a322:	d011      	beq.n	800a348 <_puts_r+0x84>
 800a324:	250a      	movs	r5, #10
 800a326:	e011      	b.n	800a34c <_puts_r+0x88>
 800a328:	4b1b      	ldr	r3, [pc, #108]	; (800a398 <_puts_r+0xd4>)
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d101      	bne.n	800a332 <_puts_r+0x6e>
 800a32e:	68ac      	ldr	r4, [r5, #8]
 800a330:	e7da      	b.n	800a2e8 <_puts_r+0x24>
 800a332:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <_puts_r+0xd8>)
 800a334:	429c      	cmp	r4, r3
 800a336:	bf08      	it	eq
 800a338:	68ec      	ldreq	r4, [r5, #12]
 800a33a:	e7d5      	b.n	800a2e8 <_puts_r+0x24>
 800a33c:	4621      	mov	r1, r4
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 f8a8 	bl	800a494 <__swsetup_r>
 800a344:	2800      	cmp	r0, #0
 800a346:	d0dd      	beq.n	800a304 <_puts_r+0x40>
 800a348:	f04f 35ff 	mov.w	r5, #4294967295
 800a34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a34e:	07da      	lsls	r2, r3, #31
 800a350:	d405      	bmi.n	800a35e <_puts_r+0x9a>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	059b      	lsls	r3, r3, #22
 800a356:	d402      	bmi.n	800a35e <_puts_r+0x9a>
 800a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35a:	f000 fac2 	bl	800a8e2 <__retarget_lock_release_recursive>
 800a35e:	4628      	mov	r0, r5
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	2b00      	cmp	r3, #0
 800a364:	da04      	bge.n	800a370 <_puts_r+0xac>
 800a366:	69a2      	ldr	r2, [r4, #24]
 800a368:	429a      	cmp	r2, r3
 800a36a:	dc06      	bgt.n	800a37a <_puts_r+0xb6>
 800a36c:	290a      	cmp	r1, #10
 800a36e:	d004      	beq.n	800a37a <_puts_r+0xb6>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	7019      	strb	r1, [r3, #0]
 800a378:	e7c5      	b.n	800a306 <_puts_r+0x42>
 800a37a:	4622      	mov	r2, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f837 	bl	800a3f0 <__swbuf_r>
 800a382:	3001      	adds	r0, #1
 800a384:	d1bf      	bne.n	800a306 <_puts_r+0x42>
 800a386:	e7df      	b.n	800a348 <_puts_r+0x84>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	250a      	movs	r5, #10
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	6022      	str	r2, [r4, #0]
 800a390:	701d      	strb	r5, [r3, #0]
 800a392:	e7db      	b.n	800a34c <_puts_r+0x88>
 800a394:	0800b550 	.word	0x0800b550
 800a398:	0800b570 	.word	0x0800b570
 800a39c:	0800b530 	.word	0x0800b530

0800a3a0 <puts>:
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <puts+0xc>)
 800a3a2:	4601      	mov	r1, r0
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f7ff bf8d 	b.w	800a2c4 <_puts_r>
 800a3aa:	bf00      	nop
 800a3ac:	20000104 	.word	0x20000104

0800a3b0 <siprintf>:
 800a3b0:	b40e      	push	{r1, r2, r3}
 800a3b2:	b500      	push	{lr}
 800a3b4:	b09c      	sub	sp, #112	; 0x70
 800a3b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a3b8:	9002      	str	r0, [sp, #8]
 800a3ba:	9006      	str	r0, [sp, #24]
 800a3bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3c0:	4809      	ldr	r0, [pc, #36]	; (800a3e8 <siprintf+0x38>)
 800a3c2:	9107      	str	r1, [sp, #28]
 800a3c4:	9104      	str	r1, [sp, #16]
 800a3c6:	4909      	ldr	r1, [pc, #36]	; (800a3ec <siprintf+0x3c>)
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	9105      	str	r1, [sp, #20]
 800a3ce:	6800      	ldr	r0, [r0, #0]
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	a902      	add	r1, sp, #8
 800a3d4:	f000 fc28 	bl	800ac28 <_svfiprintf_r>
 800a3d8:	9b02      	ldr	r3, [sp, #8]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	b01c      	add	sp, #112	; 0x70
 800a3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	4770      	bx	lr
 800a3e8:	20000104 	.word	0x20000104
 800a3ec:	ffff0208 	.word	0xffff0208

0800a3f0 <__swbuf_r>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	460e      	mov	r6, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	b118      	cbz	r0, 800a402 <__swbuf_r+0x12>
 800a3fa:	6983      	ldr	r3, [r0, #24]
 800a3fc:	b90b      	cbnz	r3, 800a402 <__swbuf_r+0x12>
 800a3fe:	f000 f9d1 	bl	800a7a4 <__sinit>
 800a402:	4b21      	ldr	r3, [pc, #132]	; (800a488 <__swbuf_r+0x98>)
 800a404:	429c      	cmp	r4, r3
 800a406:	d12b      	bne.n	800a460 <__swbuf_r+0x70>
 800a408:	686c      	ldr	r4, [r5, #4]
 800a40a:	69a3      	ldr	r3, [r4, #24]
 800a40c:	60a3      	str	r3, [r4, #8]
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	071a      	lsls	r2, r3, #28
 800a412:	d52f      	bpl.n	800a474 <__swbuf_r+0x84>
 800a414:	6923      	ldr	r3, [r4, #16]
 800a416:	b36b      	cbz	r3, 800a474 <__swbuf_r+0x84>
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	1ac0      	subs	r0, r0, r3
 800a41e:	6963      	ldr	r3, [r4, #20]
 800a420:	b2f6      	uxtb	r6, r6
 800a422:	4283      	cmp	r3, r0
 800a424:	4637      	mov	r7, r6
 800a426:	dc04      	bgt.n	800a432 <__swbuf_r+0x42>
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f000 f926 	bl	800a67c <_fflush_r>
 800a430:	bb30      	cbnz	r0, 800a480 <__swbuf_r+0x90>
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	3b01      	subs	r3, #1
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6022      	str	r2, [r4, #0]
 800a43e:	701e      	strb	r6, [r3, #0]
 800a440:	6963      	ldr	r3, [r4, #20]
 800a442:	3001      	adds	r0, #1
 800a444:	4283      	cmp	r3, r0
 800a446:	d004      	beq.n	800a452 <__swbuf_r+0x62>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d506      	bpl.n	800a45c <__swbuf_r+0x6c>
 800a44e:	2e0a      	cmp	r6, #10
 800a450:	d104      	bne.n	800a45c <__swbuf_r+0x6c>
 800a452:	4621      	mov	r1, r4
 800a454:	4628      	mov	r0, r5
 800a456:	f000 f911 	bl	800a67c <_fflush_r>
 800a45a:	b988      	cbnz	r0, 800a480 <__swbuf_r+0x90>
 800a45c:	4638      	mov	r0, r7
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <__swbuf_r+0x9c>)
 800a462:	429c      	cmp	r4, r3
 800a464:	d101      	bne.n	800a46a <__swbuf_r+0x7a>
 800a466:	68ac      	ldr	r4, [r5, #8]
 800a468:	e7cf      	b.n	800a40a <__swbuf_r+0x1a>
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <__swbuf_r+0xa0>)
 800a46c:	429c      	cmp	r4, r3
 800a46e:	bf08      	it	eq
 800a470:	68ec      	ldreq	r4, [r5, #12]
 800a472:	e7ca      	b.n	800a40a <__swbuf_r+0x1a>
 800a474:	4621      	mov	r1, r4
 800a476:	4628      	mov	r0, r5
 800a478:	f000 f80c 	bl	800a494 <__swsetup_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d0cb      	beq.n	800a418 <__swbuf_r+0x28>
 800a480:	f04f 37ff 	mov.w	r7, #4294967295
 800a484:	e7ea      	b.n	800a45c <__swbuf_r+0x6c>
 800a486:	bf00      	nop
 800a488:	0800b550 	.word	0x0800b550
 800a48c:	0800b570 	.word	0x0800b570
 800a490:	0800b530 	.word	0x0800b530

0800a494 <__swsetup_r>:
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <__swsetup_r+0xcc>)
 800a496:	b570      	push	{r4, r5, r6, lr}
 800a498:	681d      	ldr	r5, [r3, #0]
 800a49a:	4606      	mov	r6, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	b125      	cbz	r5, 800a4aa <__swsetup_r+0x16>
 800a4a0:	69ab      	ldr	r3, [r5, #24]
 800a4a2:	b913      	cbnz	r3, 800a4aa <__swsetup_r+0x16>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f97d 	bl	800a7a4 <__sinit>
 800a4aa:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <__swsetup_r+0xd0>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d10f      	bne.n	800a4d0 <__swsetup_r+0x3c>
 800a4b0:	686c      	ldr	r4, [r5, #4]
 800a4b2:	89a3      	ldrh	r3, [r4, #12]
 800a4b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4b8:	0719      	lsls	r1, r3, #28
 800a4ba:	d42c      	bmi.n	800a516 <__swsetup_r+0x82>
 800a4bc:	06dd      	lsls	r5, r3, #27
 800a4be:	d411      	bmi.n	800a4e4 <__swsetup_r+0x50>
 800a4c0:	2309      	movs	r3, #9
 800a4c2:	6033      	str	r3, [r6, #0]
 800a4c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ce:	e03e      	b.n	800a54e <__swsetup_r+0xba>
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <__swsetup_r+0xd4>)
 800a4d2:	429c      	cmp	r4, r3
 800a4d4:	d101      	bne.n	800a4da <__swsetup_r+0x46>
 800a4d6:	68ac      	ldr	r4, [r5, #8]
 800a4d8:	e7eb      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4da:	4b24      	ldr	r3, [pc, #144]	; (800a56c <__swsetup_r+0xd8>)
 800a4dc:	429c      	cmp	r4, r3
 800a4de:	bf08      	it	eq
 800a4e0:	68ec      	ldreq	r4, [r5, #12]
 800a4e2:	e7e6      	b.n	800a4b2 <__swsetup_r+0x1e>
 800a4e4:	0758      	lsls	r0, r3, #29
 800a4e6:	d512      	bpl.n	800a50e <__swsetup_r+0x7a>
 800a4e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ea:	b141      	cbz	r1, 800a4fe <__swsetup_r+0x6a>
 800a4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	d002      	beq.n	800a4fa <__swsetup_r+0x66>
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f000 fa5b 	bl	800a9b0 <_free_r>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4fe:	89a3      	ldrh	r3, [r4, #12]
 800a500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a504:	81a3      	strh	r3, [r4, #12]
 800a506:	2300      	movs	r3, #0
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0308 	orr.w	r3, r3, #8
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	b94b      	cbnz	r3, 800a52e <__swsetup_r+0x9a>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a524:	d003      	beq.n	800a52e <__swsetup_r+0x9a>
 800a526:	4621      	mov	r1, r4
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 fa01 	bl	800a930 <__smakebuf_r>
 800a52e:	89a0      	ldrh	r0, [r4, #12]
 800a530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a534:	f010 0301 	ands.w	r3, r0, #1
 800a538:	d00a      	beq.n	800a550 <__swsetup_r+0xbc>
 800a53a:	2300      	movs	r3, #0
 800a53c:	60a3      	str	r3, [r4, #8]
 800a53e:	6963      	ldr	r3, [r4, #20]
 800a540:	425b      	negs	r3, r3
 800a542:	61a3      	str	r3, [r4, #24]
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	b943      	cbnz	r3, 800a55a <__swsetup_r+0xc6>
 800a548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a54c:	d1ba      	bne.n	800a4c4 <__swsetup_r+0x30>
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	0781      	lsls	r1, r0, #30
 800a552:	bf58      	it	pl
 800a554:	6963      	ldrpl	r3, [r4, #20]
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	e7f4      	b.n	800a544 <__swsetup_r+0xb0>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7f7      	b.n	800a54e <__swsetup_r+0xba>
 800a55e:	bf00      	nop
 800a560:	20000104 	.word	0x20000104
 800a564:	0800b550 	.word	0x0800b550
 800a568:	0800b570 	.word	0x0800b570
 800a56c:	0800b530 	.word	0x0800b530

0800a570 <__sflush_r>:
 800a570:	898a      	ldrh	r2, [r1, #12]
 800a572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a576:	4605      	mov	r5, r0
 800a578:	0710      	lsls	r0, r2, #28
 800a57a:	460c      	mov	r4, r1
 800a57c:	d458      	bmi.n	800a630 <__sflush_r+0xc0>
 800a57e:	684b      	ldr	r3, [r1, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	dc05      	bgt.n	800a590 <__sflush_r+0x20>
 800a584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	dc02      	bgt.n	800a590 <__sflush_r+0x20>
 800a58a:	2000      	movs	r0, #0
 800a58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a592:	2e00      	cmp	r6, #0
 800a594:	d0f9      	beq.n	800a58a <__sflush_r+0x1a>
 800a596:	2300      	movs	r3, #0
 800a598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a59c:	682f      	ldr	r7, [r5, #0]
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	d032      	beq.n	800a608 <__sflush_r+0x98>
 800a5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	075a      	lsls	r2, r3, #29
 800a5a8:	d505      	bpl.n	800a5b6 <__sflush_r+0x46>
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	1ac0      	subs	r0, r0, r3
 800a5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5b0:	b10b      	cbz	r3, 800a5b6 <__sflush_r+0x46>
 800a5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5b4:	1ac0      	subs	r0, r0, r3
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5bc:	6a21      	ldr	r1, [r4, #32]
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b0      	blx	r6
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	d106      	bne.n	800a5d6 <__sflush_r+0x66>
 800a5c8:	6829      	ldr	r1, [r5, #0]
 800a5ca:	291d      	cmp	r1, #29
 800a5cc:	d82c      	bhi.n	800a628 <__sflush_r+0xb8>
 800a5ce:	4a2a      	ldr	r2, [pc, #168]	; (800a678 <__sflush_r+0x108>)
 800a5d0:	40ca      	lsrs	r2, r1
 800a5d2:	07d6      	lsls	r6, r2, #31
 800a5d4:	d528      	bpl.n	800a628 <__sflush_r+0xb8>
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	6062      	str	r2, [r4, #4]
 800a5da:	04d9      	lsls	r1, r3, #19
 800a5dc:	6922      	ldr	r2, [r4, #16]
 800a5de:	6022      	str	r2, [r4, #0]
 800a5e0:	d504      	bpl.n	800a5ec <__sflush_r+0x7c>
 800a5e2:	1c42      	adds	r2, r0, #1
 800a5e4:	d101      	bne.n	800a5ea <__sflush_r+0x7a>
 800a5e6:	682b      	ldr	r3, [r5, #0]
 800a5e8:	b903      	cbnz	r3, 800a5ec <__sflush_r+0x7c>
 800a5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800a5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ee:	602f      	str	r7, [r5, #0]
 800a5f0:	2900      	cmp	r1, #0
 800a5f2:	d0ca      	beq.n	800a58a <__sflush_r+0x1a>
 800a5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f8:	4299      	cmp	r1, r3
 800a5fa:	d002      	beq.n	800a602 <__sflush_r+0x92>
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f000 f9d7 	bl	800a9b0 <_free_r>
 800a602:	2000      	movs	r0, #0
 800a604:	6360      	str	r0, [r4, #52]	; 0x34
 800a606:	e7c1      	b.n	800a58c <__sflush_r+0x1c>
 800a608:	6a21      	ldr	r1, [r4, #32]
 800a60a:	2301      	movs	r3, #1
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b0      	blx	r6
 800a610:	1c41      	adds	r1, r0, #1
 800a612:	d1c7      	bne.n	800a5a4 <__sflush_r+0x34>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0c4      	beq.n	800a5a4 <__sflush_r+0x34>
 800a61a:	2b1d      	cmp	r3, #29
 800a61c:	d001      	beq.n	800a622 <__sflush_r+0xb2>
 800a61e:	2b16      	cmp	r3, #22
 800a620:	d101      	bne.n	800a626 <__sflush_r+0xb6>
 800a622:	602f      	str	r7, [r5, #0]
 800a624:	e7b1      	b.n	800a58a <__sflush_r+0x1a>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	e7ad      	b.n	800a58c <__sflush_r+0x1c>
 800a630:	690f      	ldr	r7, [r1, #16]
 800a632:	2f00      	cmp	r7, #0
 800a634:	d0a9      	beq.n	800a58a <__sflush_r+0x1a>
 800a636:	0793      	lsls	r3, r2, #30
 800a638:	680e      	ldr	r6, [r1, #0]
 800a63a:	bf08      	it	eq
 800a63c:	694b      	ldreq	r3, [r1, #20]
 800a63e:	600f      	str	r7, [r1, #0]
 800a640:	bf18      	it	ne
 800a642:	2300      	movne	r3, #0
 800a644:	eba6 0807 	sub.w	r8, r6, r7
 800a648:	608b      	str	r3, [r1, #8]
 800a64a:	f1b8 0f00 	cmp.w	r8, #0
 800a64e:	dd9c      	ble.n	800a58a <__sflush_r+0x1a>
 800a650:	6a21      	ldr	r1, [r4, #32]
 800a652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a654:	4643      	mov	r3, r8
 800a656:	463a      	mov	r2, r7
 800a658:	4628      	mov	r0, r5
 800a65a:	47b0      	blx	r6
 800a65c:	2800      	cmp	r0, #0
 800a65e:	dc06      	bgt.n	800a66e <__sflush_r+0xfe>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	e78e      	b.n	800a58c <__sflush_r+0x1c>
 800a66e:	4407      	add	r7, r0
 800a670:	eba8 0800 	sub.w	r8, r8, r0
 800a674:	e7e9      	b.n	800a64a <__sflush_r+0xda>
 800a676:	bf00      	nop
 800a678:	20400001 	.word	0x20400001

0800a67c <_fflush_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	690b      	ldr	r3, [r1, #16]
 800a680:	4605      	mov	r5, r0
 800a682:	460c      	mov	r4, r1
 800a684:	b913      	cbnz	r3, 800a68c <_fflush_r+0x10>
 800a686:	2500      	movs	r5, #0
 800a688:	4628      	mov	r0, r5
 800a68a:	bd38      	pop	{r3, r4, r5, pc}
 800a68c:	b118      	cbz	r0, 800a696 <_fflush_r+0x1a>
 800a68e:	6983      	ldr	r3, [r0, #24]
 800a690:	b90b      	cbnz	r3, 800a696 <_fflush_r+0x1a>
 800a692:	f000 f887 	bl	800a7a4 <__sinit>
 800a696:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <_fflush_r+0x6c>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	d11b      	bne.n	800a6d4 <_fflush_r+0x58>
 800a69c:	686c      	ldr	r4, [r5, #4]
 800a69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0ef      	beq.n	800a686 <_fflush_r+0xa>
 800a6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6a8:	07d0      	lsls	r0, r2, #31
 800a6aa:	d404      	bmi.n	800a6b6 <_fflush_r+0x3a>
 800a6ac:	0599      	lsls	r1, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_fflush_r+0x3a>
 800a6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6b2:	f000 f915 	bl	800a8e0 <__retarget_lock_acquire_recursive>
 800a6b6:	4628      	mov	r0, r5
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	f7ff ff59 	bl	800a570 <__sflush_r>
 800a6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c0:	07da      	lsls	r2, r3, #31
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	d4e0      	bmi.n	800a688 <_fflush_r+0xc>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	059b      	lsls	r3, r3, #22
 800a6ca:	d4dd      	bmi.n	800a688 <_fflush_r+0xc>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ce:	f000 f908 	bl	800a8e2 <__retarget_lock_release_recursive>
 800a6d2:	e7d9      	b.n	800a688 <_fflush_r+0xc>
 800a6d4:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <_fflush_r+0x70>)
 800a6d6:	429c      	cmp	r4, r3
 800a6d8:	d101      	bne.n	800a6de <_fflush_r+0x62>
 800a6da:	68ac      	ldr	r4, [r5, #8]
 800a6dc:	e7df      	b.n	800a69e <_fflush_r+0x22>
 800a6de:	4b04      	ldr	r3, [pc, #16]	; (800a6f0 <_fflush_r+0x74>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	bf08      	it	eq
 800a6e4:	68ec      	ldreq	r4, [r5, #12]
 800a6e6:	e7da      	b.n	800a69e <_fflush_r+0x22>
 800a6e8:	0800b550 	.word	0x0800b550
 800a6ec:	0800b570 	.word	0x0800b570
 800a6f0:	0800b530 	.word	0x0800b530

0800a6f4 <std>:
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a702:	6083      	str	r3, [r0, #8]
 800a704:	8181      	strh	r1, [r0, #12]
 800a706:	6643      	str	r3, [r0, #100]	; 0x64
 800a708:	81c2      	strh	r2, [r0, #14]
 800a70a:	6183      	str	r3, [r0, #24]
 800a70c:	4619      	mov	r1, r3
 800a70e:	2208      	movs	r2, #8
 800a710:	305c      	adds	r0, #92	; 0x5c
 800a712:	f7ff fdcf 	bl	800a2b4 <memset>
 800a716:	4b05      	ldr	r3, [pc, #20]	; (800a72c <std+0x38>)
 800a718:	6263      	str	r3, [r4, #36]	; 0x24
 800a71a:	4b05      	ldr	r3, [pc, #20]	; (800a730 <std+0x3c>)
 800a71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a71e:	4b05      	ldr	r3, [pc, #20]	; (800a734 <std+0x40>)
 800a720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a722:	4b05      	ldr	r3, [pc, #20]	; (800a738 <std+0x44>)
 800a724:	6224      	str	r4, [r4, #32]
 800a726:	6323      	str	r3, [r4, #48]	; 0x30
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	bf00      	nop
 800a72c:	0800b171 	.word	0x0800b171
 800a730:	0800b193 	.word	0x0800b193
 800a734:	0800b1cb 	.word	0x0800b1cb
 800a738:	0800b1ef 	.word	0x0800b1ef

0800a73c <_cleanup_r>:
 800a73c:	4901      	ldr	r1, [pc, #4]	; (800a744 <_cleanup_r+0x8>)
 800a73e:	f000 b8af 	b.w	800a8a0 <_fwalk_reent>
 800a742:	bf00      	nop
 800a744:	0800a67d 	.word	0x0800a67d

0800a748 <__sfmoreglue>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	2268      	movs	r2, #104	; 0x68
 800a74c:	1e4d      	subs	r5, r1, #1
 800a74e:	4355      	muls	r5, r2
 800a750:	460e      	mov	r6, r1
 800a752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a756:	f000 f997 	bl	800aa88 <_malloc_r>
 800a75a:	4604      	mov	r4, r0
 800a75c:	b140      	cbz	r0, 800a770 <__sfmoreglue+0x28>
 800a75e:	2100      	movs	r1, #0
 800a760:	e9c0 1600 	strd	r1, r6, [r0]
 800a764:	300c      	adds	r0, #12
 800a766:	60a0      	str	r0, [r4, #8]
 800a768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a76c:	f7ff fda2 	bl	800a2b4 <memset>
 800a770:	4620      	mov	r0, r4
 800a772:	bd70      	pop	{r4, r5, r6, pc}

0800a774 <__sfp_lock_acquire>:
 800a774:	4801      	ldr	r0, [pc, #4]	; (800a77c <__sfp_lock_acquire+0x8>)
 800a776:	f000 b8b3 	b.w	800a8e0 <__retarget_lock_acquire_recursive>
 800a77a:	bf00      	nop
 800a77c:	20001fe5 	.word	0x20001fe5

0800a780 <__sfp_lock_release>:
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__sfp_lock_release+0x8>)
 800a782:	f000 b8ae 	b.w	800a8e2 <__retarget_lock_release_recursive>
 800a786:	bf00      	nop
 800a788:	20001fe5 	.word	0x20001fe5

0800a78c <__sinit_lock_acquire>:
 800a78c:	4801      	ldr	r0, [pc, #4]	; (800a794 <__sinit_lock_acquire+0x8>)
 800a78e:	f000 b8a7 	b.w	800a8e0 <__retarget_lock_acquire_recursive>
 800a792:	bf00      	nop
 800a794:	20001fe6 	.word	0x20001fe6

0800a798 <__sinit_lock_release>:
 800a798:	4801      	ldr	r0, [pc, #4]	; (800a7a0 <__sinit_lock_release+0x8>)
 800a79a:	f000 b8a2 	b.w	800a8e2 <__retarget_lock_release_recursive>
 800a79e:	bf00      	nop
 800a7a0:	20001fe6 	.word	0x20001fe6

0800a7a4 <__sinit>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	f7ff fff0 	bl	800a78c <__sinit_lock_acquire>
 800a7ac:	69a3      	ldr	r3, [r4, #24]
 800a7ae:	b11b      	cbz	r3, 800a7b8 <__sinit+0x14>
 800a7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b4:	f7ff bff0 	b.w	800a798 <__sinit_lock_release>
 800a7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <__sinit+0x68>)
 800a7c0:	4a13      	ldr	r2, [pc, #76]	; (800a810 <__sinit+0x6c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7c6:	42a3      	cmp	r3, r4
 800a7c8:	bf04      	itt	eq
 800a7ca:	2301      	moveq	r3, #1
 800a7cc:	61a3      	streq	r3, [r4, #24]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 f820 	bl	800a814 <__sfp>
 800a7d4:	6060      	str	r0, [r4, #4]
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 f81c 	bl	800a814 <__sfp>
 800a7dc:	60a0      	str	r0, [r4, #8]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 f818 	bl	800a814 <__sfp>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	60e0      	str	r0, [r4, #12]
 800a7e8:	2104      	movs	r1, #4
 800a7ea:	6860      	ldr	r0, [r4, #4]
 800a7ec:	f7ff ff82 	bl	800a6f4 <std>
 800a7f0:	68a0      	ldr	r0, [r4, #8]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	2109      	movs	r1, #9
 800a7f6:	f7ff ff7d 	bl	800a6f4 <std>
 800a7fa:	68e0      	ldr	r0, [r4, #12]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	2112      	movs	r1, #18
 800a800:	f7ff ff78 	bl	800a6f4 <std>
 800a804:	2301      	movs	r3, #1
 800a806:	61a3      	str	r3, [r4, #24]
 800a808:	e7d2      	b.n	800a7b0 <__sinit+0xc>
 800a80a:	bf00      	nop
 800a80c:	0800b52c 	.word	0x0800b52c
 800a810:	0800a73d 	.word	0x0800a73d

0800a814 <__sfp>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	4607      	mov	r7, r0
 800a818:	f7ff ffac 	bl	800a774 <__sfp_lock_acquire>
 800a81c:	4b1e      	ldr	r3, [pc, #120]	; (800a898 <__sfp+0x84>)
 800a81e:	681e      	ldr	r6, [r3, #0]
 800a820:	69b3      	ldr	r3, [r6, #24]
 800a822:	b913      	cbnz	r3, 800a82a <__sfp+0x16>
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff ffbd 	bl	800a7a4 <__sinit>
 800a82a:	3648      	adds	r6, #72	; 0x48
 800a82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a830:	3b01      	subs	r3, #1
 800a832:	d503      	bpl.n	800a83c <__sfp+0x28>
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	b30b      	cbz	r3, 800a87c <__sfp+0x68>
 800a838:	6836      	ldr	r6, [r6, #0]
 800a83a:	e7f7      	b.n	800a82c <__sfp+0x18>
 800a83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a840:	b9d5      	cbnz	r5, 800a878 <__sfp+0x64>
 800a842:	4b16      	ldr	r3, [pc, #88]	; (800a89c <__sfp+0x88>)
 800a844:	60e3      	str	r3, [r4, #12]
 800a846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a84a:	6665      	str	r5, [r4, #100]	; 0x64
 800a84c:	f000 f847 	bl	800a8de <__retarget_lock_init_recursive>
 800a850:	f7ff ff96 	bl	800a780 <__sfp_lock_release>
 800a854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a85c:	6025      	str	r5, [r4, #0]
 800a85e:	61a5      	str	r5, [r4, #24]
 800a860:	2208      	movs	r2, #8
 800a862:	4629      	mov	r1, r5
 800a864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a868:	f7ff fd24 	bl	800a2b4 <memset>
 800a86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a874:	4620      	mov	r0, r4
 800a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a878:	3468      	adds	r4, #104	; 0x68
 800a87a:	e7d9      	b.n	800a830 <__sfp+0x1c>
 800a87c:	2104      	movs	r1, #4
 800a87e:	4638      	mov	r0, r7
 800a880:	f7ff ff62 	bl	800a748 <__sfmoreglue>
 800a884:	4604      	mov	r4, r0
 800a886:	6030      	str	r0, [r6, #0]
 800a888:	2800      	cmp	r0, #0
 800a88a:	d1d5      	bne.n	800a838 <__sfp+0x24>
 800a88c:	f7ff ff78 	bl	800a780 <__sfp_lock_release>
 800a890:	230c      	movs	r3, #12
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	e7ee      	b.n	800a874 <__sfp+0x60>
 800a896:	bf00      	nop
 800a898:	0800b52c 	.word	0x0800b52c
 800a89c:	ffff0001 	.word	0xffff0001

0800a8a0 <_fwalk_reent>:
 800a8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	4688      	mov	r8, r1
 800a8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8ac:	2700      	movs	r7, #0
 800a8ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b6:	d505      	bpl.n	800a8c4 <_fwalk_reent+0x24>
 800a8b8:	6824      	ldr	r4, [r4, #0]
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	d1f7      	bne.n	800a8ae <_fwalk_reent+0xe>
 800a8be:	4638      	mov	r0, r7
 800a8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c4:	89ab      	ldrh	r3, [r5, #12]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d907      	bls.n	800a8da <_fwalk_reent+0x3a>
 800a8ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	d003      	beq.n	800a8da <_fwalk_reent+0x3a>
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	47c0      	blx	r8
 800a8d8:	4307      	orrs	r7, r0
 800a8da:	3568      	adds	r5, #104	; 0x68
 800a8dc:	e7e9      	b.n	800a8b2 <_fwalk_reent+0x12>

0800a8de <__retarget_lock_init_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <__retarget_lock_acquire_recursive>:
 800a8e0:	4770      	bx	lr

0800a8e2 <__retarget_lock_release_recursive>:
 800a8e2:	4770      	bx	lr

0800a8e4 <__swhatbuf_r>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	460e      	mov	r6, r1
 800a8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	b096      	sub	sp, #88	; 0x58
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	da08      	bge.n	800a908 <__swhatbuf_r+0x24>
 800a8f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	061a      	lsls	r2, r3, #24
 800a900:	d410      	bmi.n	800a924 <__swhatbuf_r+0x40>
 800a902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a906:	e00e      	b.n	800a926 <__swhatbuf_r+0x42>
 800a908:	466a      	mov	r2, sp
 800a90a:	f000 fc97 	bl	800b23c <_fstat_r>
 800a90e:	2800      	cmp	r0, #0
 800a910:	dbf1      	blt.n	800a8f6 <__swhatbuf_r+0x12>
 800a912:	9a01      	ldr	r2, [sp, #4]
 800a914:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a918:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a91c:	425a      	negs	r2, r3
 800a91e:	415a      	adcs	r2, r3
 800a920:	602a      	str	r2, [r5, #0]
 800a922:	e7ee      	b.n	800a902 <__swhatbuf_r+0x1e>
 800a924:	2340      	movs	r3, #64	; 0x40
 800a926:	2000      	movs	r0, #0
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	b016      	add	sp, #88	; 0x58
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a930 <__smakebuf_r>:
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a934:	079d      	lsls	r5, r3, #30
 800a936:	4606      	mov	r6, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	d507      	bpl.n	800a94c <__smakebuf_r+0x1c>
 800a93c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	6123      	str	r3, [r4, #16]
 800a944:	2301      	movs	r3, #1
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	b002      	add	sp, #8
 800a94a:	bd70      	pop	{r4, r5, r6, pc}
 800a94c:	ab01      	add	r3, sp, #4
 800a94e:	466a      	mov	r2, sp
 800a950:	f7ff ffc8 	bl	800a8e4 <__swhatbuf_r>
 800a954:	9900      	ldr	r1, [sp, #0]
 800a956:	4605      	mov	r5, r0
 800a958:	4630      	mov	r0, r6
 800a95a:	f000 f895 	bl	800aa88 <_malloc_r>
 800a95e:	b948      	cbnz	r0, 800a974 <__smakebuf_r+0x44>
 800a960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a964:	059a      	lsls	r2, r3, #22
 800a966:	d4ef      	bmi.n	800a948 <__smakebuf_r+0x18>
 800a968:	f023 0303 	bic.w	r3, r3, #3
 800a96c:	f043 0302 	orr.w	r3, r3, #2
 800a970:	81a3      	strh	r3, [r4, #12]
 800a972:	e7e3      	b.n	800a93c <__smakebuf_r+0xc>
 800a974:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <__smakebuf_r+0x7c>)
 800a976:	62b3      	str	r3, [r6, #40]	; 0x28
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	6163      	str	r3, [r4, #20]
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	6120      	str	r0, [r4, #16]
 800a98a:	b15b      	cbz	r3, 800a9a4 <__smakebuf_r+0x74>
 800a98c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a990:	4630      	mov	r0, r6
 800a992:	f000 fc65 	bl	800b260 <_isatty_r>
 800a996:	b128      	cbz	r0, 800a9a4 <__smakebuf_r+0x74>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f023 0303 	bic.w	r3, r3, #3
 800a99e:	f043 0301 	orr.w	r3, r3, #1
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	89a0      	ldrh	r0, [r4, #12]
 800a9a6:	4305      	orrs	r5, r0
 800a9a8:	81a5      	strh	r5, [r4, #12]
 800a9aa:	e7cd      	b.n	800a948 <__smakebuf_r+0x18>
 800a9ac:	0800a73d 	.word	0x0800a73d

0800a9b0 <_free_r>:
 800a9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9b2:	2900      	cmp	r1, #0
 800a9b4:	d044      	beq.n	800aa40 <_free_r+0x90>
 800a9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ba:	9001      	str	r0, [sp, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f1a1 0404 	sub.w	r4, r1, #4
 800a9c2:	bfb8      	it	lt
 800a9c4:	18e4      	addlt	r4, r4, r3
 800a9c6:	f000 fc95 	bl	800b2f4 <__malloc_lock>
 800a9ca:	4a1e      	ldr	r2, [pc, #120]	; (800aa44 <_free_r+0x94>)
 800a9cc:	9801      	ldr	r0, [sp, #4]
 800a9ce:	6813      	ldr	r3, [r2, #0]
 800a9d0:	b933      	cbnz	r3, 800a9e0 <_free_r+0x30>
 800a9d2:	6063      	str	r3, [r4, #4]
 800a9d4:	6014      	str	r4, [r2, #0]
 800a9d6:	b003      	add	sp, #12
 800a9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9dc:	f000 bc90 	b.w	800b300 <__malloc_unlock>
 800a9e0:	42a3      	cmp	r3, r4
 800a9e2:	d908      	bls.n	800a9f6 <_free_r+0x46>
 800a9e4:	6825      	ldr	r5, [r4, #0]
 800a9e6:	1961      	adds	r1, r4, r5
 800a9e8:	428b      	cmp	r3, r1
 800a9ea:	bf01      	itttt	eq
 800a9ec:	6819      	ldreq	r1, [r3, #0]
 800a9ee:	685b      	ldreq	r3, [r3, #4]
 800a9f0:	1949      	addeq	r1, r1, r5
 800a9f2:	6021      	streq	r1, [r4, #0]
 800a9f4:	e7ed      	b.n	800a9d2 <_free_r+0x22>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	b10b      	cbz	r3, 800aa00 <_free_r+0x50>
 800a9fc:	42a3      	cmp	r3, r4
 800a9fe:	d9fa      	bls.n	800a9f6 <_free_r+0x46>
 800aa00:	6811      	ldr	r1, [r2, #0]
 800aa02:	1855      	adds	r5, r2, r1
 800aa04:	42a5      	cmp	r5, r4
 800aa06:	d10b      	bne.n	800aa20 <_free_r+0x70>
 800aa08:	6824      	ldr	r4, [r4, #0]
 800aa0a:	4421      	add	r1, r4
 800aa0c:	1854      	adds	r4, r2, r1
 800aa0e:	42a3      	cmp	r3, r4
 800aa10:	6011      	str	r1, [r2, #0]
 800aa12:	d1e0      	bne.n	800a9d6 <_free_r+0x26>
 800aa14:	681c      	ldr	r4, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	6053      	str	r3, [r2, #4]
 800aa1a:	4421      	add	r1, r4
 800aa1c:	6011      	str	r1, [r2, #0]
 800aa1e:	e7da      	b.n	800a9d6 <_free_r+0x26>
 800aa20:	d902      	bls.n	800aa28 <_free_r+0x78>
 800aa22:	230c      	movs	r3, #12
 800aa24:	6003      	str	r3, [r0, #0]
 800aa26:	e7d6      	b.n	800a9d6 <_free_r+0x26>
 800aa28:	6825      	ldr	r5, [r4, #0]
 800aa2a:	1961      	adds	r1, r4, r5
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	bf04      	itt	eq
 800aa30:	6819      	ldreq	r1, [r3, #0]
 800aa32:	685b      	ldreq	r3, [r3, #4]
 800aa34:	6063      	str	r3, [r4, #4]
 800aa36:	bf04      	itt	eq
 800aa38:	1949      	addeq	r1, r1, r5
 800aa3a:	6021      	streq	r1, [r4, #0]
 800aa3c:	6054      	str	r4, [r2, #4]
 800aa3e:	e7ca      	b.n	800a9d6 <_free_r+0x26>
 800aa40:	b003      	add	sp, #12
 800aa42:	bd30      	pop	{r4, r5, pc}
 800aa44:	20001fe8 	.word	0x20001fe8

0800aa48 <sbrk_aligned>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	4e0e      	ldr	r6, [pc, #56]	; (800aa84 <sbrk_aligned+0x3c>)
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	6831      	ldr	r1, [r6, #0]
 800aa50:	4605      	mov	r5, r0
 800aa52:	b911      	cbnz	r1, 800aa5a <sbrk_aligned+0x12>
 800aa54:	f000 fb7c 	bl	800b150 <_sbrk_r>
 800aa58:	6030      	str	r0, [r6, #0]
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f000 fb77 	bl	800b150 <_sbrk_r>
 800aa62:	1c43      	adds	r3, r0, #1
 800aa64:	d00a      	beq.n	800aa7c <sbrk_aligned+0x34>
 800aa66:	1cc4      	adds	r4, r0, #3
 800aa68:	f024 0403 	bic.w	r4, r4, #3
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d007      	beq.n	800aa80 <sbrk_aligned+0x38>
 800aa70:	1a21      	subs	r1, r4, r0
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 fb6c 	bl	800b150 <_sbrk_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d101      	bne.n	800aa80 <sbrk_aligned+0x38>
 800aa7c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa80:	4620      	mov	r0, r4
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	20001fec 	.word	0x20001fec

0800aa88 <_malloc_r>:
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	1ccd      	adds	r5, r1, #3
 800aa8e:	f025 0503 	bic.w	r5, r5, #3
 800aa92:	3508      	adds	r5, #8
 800aa94:	2d0c      	cmp	r5, #12
 800aa96:	bf38      	it	cc
 800aa98:	250c      	movcc	r5, #12
 800aa9a:	2d00      	cmp	r5, #0
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	db01      	blt.n	800aaa4 <_malloc_r+0x1c>
 800aaa0:	42a9      	cmp	r1, r5
 800aaa2:	d905      	bls.n	800aab0 <_malloc_r+0x28>
 800aaa4:	230c      	movs	r3, #12
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	2600      	movs	r6, #0
 800aaaa:	4630      	mov	r0, r6
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	4e2e      	ldr	r6, [pc, #184]	; (800ab6c <_malloc_r+0xe4>)
 800aab2:	f000 fc1f 	bl	800b2f4 <__malloc_lock>
 800aab6:	6833      	ldr	r3, [r6, #0]
 800aab8:	461c      	mov	r4, r3
 800aaba:	bb34      	cbnz	r4, 800ab0a <_malloc_r+0x82>
 800aabc:	4629      	mov	r1, r5
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7ff ffc2 	bl	800aa48 <sbrk_aligned>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	4604      	mov	r4, r0
 800aac8:	d14d      	bne.n	800ab66 <_malloc_r+0xde>
 800aaca:	6834      	ldr	r4, [r6, #0]
 800aacc:	4626      	mov	r6, r4
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d140      	bne.n	800ab54 <_malloc_r+0xcc>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	4631      	mov	r1, r6
 800aad6:	4638      	mov	r0, r7
 800aad8:	eb04 0803 	add.w	r8, r4, r3
 800aadc:	f000 fb38 	bl	800b150 <_sbrk_r>
 800aae0:	4580      	cmp	r8, r0
 800aae2:	d13a      	bne.n	800ab5a <_malloc_r+0xd2>
 800aae4:	6821      	ldr	r1, [r4, #0]
 800aae6:	3503      	adds	r5, #3
 800aae8:	1a6d      	subs	r5, r5, r1
 800aaea:	f025 0503 	bic.w	r5, r5, #3
 800aaee:	3508      	adds	r5, #8
 800aaf0:	2d0c      	cmp	r5, #12
 800aaf2:	bf38      	it	cc
 800aaf4:	250c      	movcc	r5, #12
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f7ff ffa5 	bl	800aa48 <sbrk_aligned>
 800aafe:	3001      	adds	r0, #1
 800ab00:	d02b      	beq.n	800ab5a <_malloc_r+0xd2>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	442b      	add	r3, r5
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	e00e      	b.n	800ab28 <_malloc_r+0xa0>
 800ab0a:	6822      	ldr	r2, [r4, #0]
 800ab0c:	1b52      	subs	r2, r2, r5
 800ab0e:	d41e      	bmi.n	800ab4e <_malloc_r+0xc6>
 800ab10:	2a0b      	cmp	r2, #11
 800ab12:	d916      	bls.n	800ab42 <_malloc_r+0xba>
 800ab14:	1961      	adds	r1, r4, r5
 800ab16:	42a3      	cmp	r3, r4
 800ab18:	6025      	str	r5, [r4, #0]
 800ab1a:	bf18      	it	ne
 800ab1c:	6059      	strne	r1, [r3, #4]
 800ab1e:	6863      	ldr	r3, [r4, #4]
 800ab20:	bf08      	it	eq
 800ab22:	6031      	streq	r1, [r6, #0]
 800ab24:	5162      	str	r2, [r4, r5]
 800ab26:	604b      	str	r3, [r1, #4]
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f104 060b 	add.w	r6, r4, #11
 800ab2e:	f000 fbe7 	bl	800b300 <__malloc_unlock>
 800ab32:	f026 0607 	bic.w	r6, r6, #7
 800ab36:	1d23      	adds	r3, r4, #4
 800ab38:	1af2      	subs	r2, r6, r3
 800ab3a:	d0b6      	beq.n	800aaaa <_malloc_r+0x22>
 800ab3c:	1b9b      	subs	r3, r3, r6
 800ab3e:	50a3      	str	r3, [r4, r2]
 800ab40:	e7b3      	b.n	800aaaa <_malloc_r+0x22>
 800ab42:	6862      	ldr	r2, [r4, #4]
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	bf0c      	ite	eq
 800ab48:	6032      	streq	r2, [r6, #0]
 800ab4a:	605a      	strne	r2, [r3, #4]
 800ab4c:	e7ec      	b.n	800ab28 <_malloc_r+0xa0>
 800ab4e:	4623      	mov	r3, r4
 800ab50:	6864      	ldr	r4, [r4, #4]
 800ab52:	e7b2      	b.n	800aaba <_malloc_r+0x32>
 800ab54:	4634      	mov	r4, r6
 800ab56:	6876      	ldr	r6, [r6, #4]
 800ab58:	e7b9      	b.n	800aace <_malloc_r+0x46>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	603b      	str	r3, [r7, #0]
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f000 fbce 	bl	800b300 <__malloc_unlock>
 800ab64:	e7a1      	b.n	800aaaa <_malloc_r+0x22>
 800ab66:	6025      	str	r5, [r4, #0]
 800ab68:	e7de      	b.n	800ab28 <_malloc_r+0xa0>
 800ab6a:	bf00      	nop
 800ab6c:	20001fe8 	.word	0x20001fe8

0800ab70 <__ssputs_r>:
 800ab70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab74:	688e      	ldr	r6, [r1, #8]
 800ab76:	429e      	cmp	r6, r3
 800ab78:	4682      	mov	sl, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	4690      	mov	r8, r2
 800ab7e:	461f      	mov	r7, r3
 800ab80:	d838      	bhi.n	800abf4 <__ssputs_r+0x84>
 800ab82:	898a      	ldrh	r2, [r1, #12]
 800ab84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab88:	d032      	beq.n	800abf0 <__ssputs_r+0x80>
 800ab8a:	6825      	ldr	r5, [r4, #0]
 800ab8c:	6909      	ldr	r1, [r1, #16]
 800ab8e:	eba5 0901 	sub.w	r9, r5, r1
 800ab92:	6965      	ldr	r5, [r4, #20]
 800ab94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	444b      	add	r3, r9
 800aba0:	106d      	asrs	r5, r5, #1
 800aba2:	429d      	cmp	r5, r3
 800aba4:	bf38      	it	cc
 800aba6:	461d      	movcc	r5, r3
 800aba8:	0553      	lsls	r3, r2, #21
 800abaa:	d531      	bpl.n	800ac10 <__ssputs_r+0xa0>
 800abac:	4629      	mov	r1, r5
 800abae:	f7ff ff6b 	bl	800aa88 <_malloc_r>
 800abb2:	4606      	mov	r6, r0
 800abb4:	b950      	cbnz	r0, 800abcc <__ssputs_r+0x5c>
 800abb6:	230c      	movs	r3, #12
 800abb8:	f8ca 3000 	str.w	r3, [sl]
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abcc:	6921      	ldr	r1, [r4, #16]
 800abce:	464a      	mov	r2, r9
 800abd0:	f000 fb68 	bl	800b2a4 <memcpy>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	6126      	str	r6, [r4, #16]
 800abe2:	6165      	str	r5, [r4, #20]
 800abe4:	444e      	add	r6, r9
 800abe6:	eba5 0509 	sub.w	r5, r5, r9
 800abea:	6026      	str	r6, [r4, #0]
 800abec:	60a5      	str	r5, [r4, #8]
 800abee:	463e      	mov	r6, r7
 800abf0:	42be      	cmp	r6, r7
 800abf2:	d900      	bls.n	800abf6 <__ssputs_r+0x86>
 800abf4:	463e      	mov	r6, r7
 800abf6:	6820      	ldr	r0, [r4, #0]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4641      	mov	r1, r8
 800abfc:	f000 fb60 	bl	800b2c0 <memmove>
 800ac00:	68a3      	ldr	r3, [r4, #8]
 800ac02:	1b9b      	subs	r3, r3, r6
 800ac04:	60a3      	str	r3, [r4, #8]
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	4433      	add	r3, r6
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7db      	b.n	800abc8 <__ssputs_r+0x58>
 800ac10:	462a      	mov	r2, r5
 800ac12:	f000 fb7b 	bl	800b30c <_realloc_r>
 800ac16:	4606      	mov	r6, r0
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d1e1      	bne.n	800abe0 <__ssputs_r+0x70>
 800ac1c:	6921      	ldr	r1, [r4, #16]
 800ac1e:	4650      	mov	r0, sl
 800ac20:	f7ff fec6 	bl	800a9b0 <_free_r>
 800ac24:	e7c7      	b.n	800abb6 <__ssputs_r+0x46>
	...

0800ac28 <_svfiprintf_r>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	4698      	mov	r8, r3
 800ac2e:	898b      	ldrh	r3, [r1, #12]
 800ac30:	061b      	lsls	r3, r3, #24
 800ac32:	b09d      	sub	sp, #116	; 0x74
 800ac34:	4607      	mov	r7, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	d50e      	bpl.n	800ac5a <_svfiprintf_r+0x32>
 800ac3c:	690b      	ldr	r3, [r1, #16]
 800ac3e:	b963      	cbnz	r3, 800ac5a <_svfiprintf_r+0x32>
 800ac40:	2140      	movs	r1, #64	; 0x40
 800ac42:	f7ff ff21 	bl	800aa88 <_malloc_r>
 800ac46:	6028      	str	r0, [r5, #0]
 800ac48:	6128      	str	r0, [r5, #16]
 800ac4a:	b920      	cbnz	r0, 800ac56 <_svfiprintf_r+0x2e>
 800ac4c:	230c      	movs	r3, #12
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	e0d1      	b.n	800adfa <_svfiprintf_r+0x1d2>
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	616b      	str	r3, [r5, #20]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5e:	2320      	movs	r3, #32
 800ac60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac68:	2330      	movs	r3, #48	; 0x30
 800ac6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae14 <_svfiprintf_r+0x1ec>
 800ac6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac72:	f04f 0901 	mov.w	r9, #1
 800ac76:	4623      	mov	r3, r4
 800ac78:	469a      	mov	sl, r3
 800ac7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac7e:	b10a      	cbz	r2, 800ac84 <_svfiprintf_r+0x5c>
 800ac80:	2a25      	cmp	r2, #37	; 0x25
 800ac82:	d1f9      	bne.n	800ac78 <_svfiprintf_r+0x50>
 800ac84:	ebba 0b04 	subs.w	fp, sl, r4
 800ac88:	d00b      	beq.n	800aca2 <_svfiprintf_r+0x7a>
 800ac8a:	465b      	mov	r3, fp
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff ff6d 	bl	800ab70 <__ssputs_r>
 800ac96:	3001      	adds	r0, #1
 800ac98:	f000 80aa 	beq.w	800adf0 <_svfiprintf_r+0x1c8>
 800ac9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac9e:	445a      	add	r2, fp
 800aca0:	9209      	str	r2, [sp, #36]	; 0x24
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 80a2 	beq.w	800adf0 <_svfiprintf_r+0x1c8>
 800acac:	2300      	movs	r3, #0
 800acae:	f04f 32ff 	mov.w	r2, #4294967295
 800acb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acb6:	f10a 0a01 	add.w	sl, sl, #1
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acc2:	931a      	str	r3, [sp, #104]	; 0x68
 800acc4:	4654      	mov	r4, sl
 800acc6:	2205      	movs	r2, #5
 800acc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800accc:	4851      	ldr	r0, [pc, #324]	; (800ae14 <_svfiprintf_r+0x1ec>)
 800acce:	f7f5 fa8f 	bl	80001f0 <memchr>
 800acd2:	9a04      	ldr	r2, [sp, #16]
 800acd4:	b9d8      	cbnz	r0, 800ad0e <_svfiprintf_r+0xe6>
 800acd6:	06d0      	lsls	r0, r2, #27
 800acd8:	bf44      	itt	mi
 800acda:	2320      	movmi	r3, #32
 800acdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace0:	0711      	lsls	r1, r2, #28
 800ace2:	bf44      	itt	mi
 800ace4:	232b      	movmi	r3, #43	; 0x2b
 800ace6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b2a      	cmp	r3, #42	; 0x2a
 800acf0:	d015      	beq.n	800ad1e <_svfiprintf_r+0xf6>
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	4654      	mov	r4, sl
 800acf6:	2000      	movs	r0, #0
 800acf8:	f04f 0c0a 	mov.w	ip, #10
 800acfc:	4621      	mov	r1, r4
 800acfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad02:	3b30      	subs	r3, #48	; 0x30
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d94e      	bls.n	800ada6 <_svfiprintf_r+0x17e>
 800ad08:	b1b0      	cbz	r0, 800ad38 <_svfiprintf_r+0x110>
 800ad0a:	9207      	str	r2, [sp, #28]
 800ad0c:	e014      	b.n	800ad38 <_svfiprintf_r+0x110>
 800ad0e:	eba0 0308 	sub.w	r3, r0, r8
 800ad12:	fa09 f303 	lsl.w	r3, r9, r3
 800ad16:	4313      	orrs	r3, r2
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	46a2      	mov	sl, r4
 800ad1c:	e7d2      	b.n	800acc4 <_svfiprintf_r+0x9c>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9103      	str	r1, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfbb      	ittet	lt
 800ad2a:	425b      	neglt	r3, r3
 800ad2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad30:	9307      	strge	r3, [sp, #28]
 800ad32:	9307      	strlt	r3, [sp, #28]
 800ad34:	bfb8      	it	lt
 800ad36:	9204      	strlt	r2, [sp, #16]
 800ad38:	7823      	ldrb	r3, [r4, #0]
 800ad3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad3c:	d10c      	bne.n	800ad58 <_svfiprintf_r+0x130>
 800ad3e:	7863      	ldrb	r3, [r4, #1]
 800ad40:	2b2a      	cmp	r3, #42	; 0x2a
 800ad42:	d135      	bne.n	800adb0 <_svfiprintf_r+0x188>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	1d1a      	adds	r2, r3, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	9203      	str	r2, [sp, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	bfb8      	it	lt
 800ad50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad54:	3402      	adds	r4, #2
 800ad56:	9305      	str	r3, [sp, #20]
 800ad58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae24 <_svfiprintf_r+0x1fc>
 800ad5c:	7821      	ldrb	r1, [r4, #0]
 800ad5e:	2203      	movs	r2, #3
 800ad60:	4650      	mov	r0, sl
 800ad62:	f7f5 fa45 	bl	80001f0 <memchr>
 800ad66:	b140      	cbz	r0, 800ad7a <_svfiprintf_r+0x152>
 800ad68:	2340      	movs	r3, #64	; 0x40
 800ad6a:	eba0 000a 	sub.w	r0, r0, sl
 800ad6e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad72:	9b04      	ldr	r3, [sp, #16]
 800ad74:	4303      	orrs	r3, r0
 800ad76:	3401      	adds	r4, #1
 800ad78:	9304      	str	r3, [sp, #16]
 800ad7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7e:	4826      	ldr	r0, [pc, #152]	; (800ae18 <_svfiprintf_r+0x1f0>)
 800ad80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad84:	2206      	movs	r2, #6
 800ad86:	f7f5 fa33 	bl	80001f0 <memchr>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d038      	beq.n	800ae00 <_svfiprintf_r+0x1d8>
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <_svfiprintf_r+0x1f4>)
 800ad90:	bb1b      	cbnz	r3, 800adda <_svfiprintf_r+0x1b2>
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	3307      	adds	r3, #7
 800ad96:	f023 0307 	bic.w	r3, r3, #7
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	9303      	str	r3, [sp, #12]
 800ad9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada0:	4433      	add	r3, r6
 800ada2:	9309      	str	r3, [sp, #36]	; 0x24
 800ada4:	e767      	b.n	800ac76 <_svfiprintf_r+0x4e>
 800ada6:	fb0c 3202 	mla	r2, ip, r2, r3
 800adaa:	460c      	mov	r4, r1
 800adac:	2001      	movs	r0, #1
 800adae:	e7a5      	b.n	800acfc <_svfiprintf_r+0xd4>
 800adb0:	2300      	movs	r3, #0
 800adb2:	3401      	adds	r4, #1
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	4619      	mov	r1, r3
 800adb8:	f04f 0c0a 	mov.w	ip, #10
 800adbc:	4620      	mov	r0, r4
 800adbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adc2:	3a30      	subs	r2, #48	; 0x30
 800adc4:	2a09      	cmp	r2, #9
 800adc6:	d903      	bls.n	800add0 <_svfiprintf_r+0x1a8>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0c5      	beq.n	800ad58 <_svfiprintf_r+0x130>
 800adcc:	9105      	str	r1, [sp, #20]
 800adce:	e7c3      	b.n	800ad58 <_svfiprintf_r+0x130>
 800add0:	fb0c 2101 	mla	r1, ip, r1, r2
 800add4:	4604      	mov	r4, r0
 800add6:	2301      	movs	r3, #1
 800add8:	e7f0      	b.n	800adbc <_svfiprintf_r+0x194>
 800adda:	ab03      	add	r3, sp, #12
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	462a      	mov	r2, r5
 800ade0:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <_svfiprintf_r+0x1f8>)
 800ade2:	a904      	add	r1, sp, #16
 800ade4:	4638      	mov	r0, r7
 800ade6:	f3af 8000 	nop.w
 800adea:	1c42      	adds	r2, r0, #1
 800adec:	4606      	mov	r6, r0
 800adee:	d1d6      	bne.n	800ad9e <_svfiprintf_r+0x176>
 800adf0:	89ab      	ldrh	r3, [r5, #12]
 800adf2:	065b      	lsls	r3, r3, #25
 800adf4:	f53f af2c 	bmi.w	800ac50 <_svfiprintf_r+0x28>
 800adf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adfa:	b01d      	add	sp, #116	; 0x74
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	ab03      	add	r3, sp, #12
 800ae02:	9300      	str	r3, [sp, #0]
 800ae04:	462a      	mov	r2, r5
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <_svfiprintf_r+0x1f8>)
 800ae08:	a904      	add	r1, sp, #16
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f000 f87a 	bl	800af04 <_printf_i>
 800ae10:	e7eb      	b.n	800adea <_svfiprintf_r+0x1c2>
 800ae12:	bf00      	nop
 800ae14:	0800b590 	.word	0x0800b590
 800ae18:	0800b59a 	.word	0x0800b59a
 800ae1c:	00000000 	.word	0x00000000
 800ae20:	0800ab71 	.word	0x0800ab71
 800ae24:	0800b596 	.word	0x0800b596

0800ae28 <_printf_common>:
 800ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	4699      	mov	r9, r3
 800ae30:	688a      	ldr	r2, [r1, #8]
 800ae32:	690b      	ldr	r3, [r1, #16]
 800ae34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	bfb8      	it	lt
 800ae3c:	4613      	movlt	r3, r2
 800ae3e:	6033      	str	r3, [r6, #0]
 800ae40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae44:	4607      	mov	r7, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	b10a      	cbz	r2, 800ae4e <_printf_common+0x26>
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	6033      	str	r3, [r6, #0]
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	0699      	lsls	r1, r3, #26
 800ae52:	bf42      	ittt	mi
 800ae54:	6833      	ldrmi	r3, [r6, #0]
 800ae56:	3302      	addmi	r3, #2
 800ae58:	6033      	strmi	r3, [r6, #0]
 800ae5a:	6825      	ldr	r5, [r4, #0]
 800ae5c:	f015 0506 	ands.w	r5, r5, #6
 800ae60:	d106      	bne.n	800ae70 <_printf_common+0x48>
 800ae62:	f104 0a19 	add.w	sl, r4, #25
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	6832      	ldr	r2, [r6, #0]
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	dc26      	bgt.n	800aebe <_printf_common+0x96>
 800ae70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae74:	1e13      	subs	r3, r2, #0
 800ae76:	6822      	ldr	r2, [r4, #0]
 800ae78:	bf18      	it	ne
 800ae7a:	2301      	movne	r3, #1
 800ae7c:	0692      	lsls	r2, r2, #26
 800ae7e:	d42b      	bmi.n	800aed8 <_printf_common+0xb0>
 800ae80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae84:	4649      	mov	r1, r9
 800ae86:	4638      	mov	r0, r7
 800ae88:	47c0      	blx	r8
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d01e      	beq.n	800aecc <_printf_common+0xa4>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	68e5      	ldr	r5, [r4, #12]
 800ae92:	6832      	ldr	r2, [r6, #0]
 800ae94:	f003 0306 	and.w	r3, r3, #6
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	bf08      	it	eq
 800ae9c:	1aad      	subeq	r5, r5, r2
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	bf0c      	ite	eq
 800aea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aea8:	2500      	movne	r5, #0
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	bfc4      	itt	gt
 800aeae:	1a9b      	subgt	r3, r3, r2
 800aeb0:	18ed      	addgt	r5, r5, r3
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	341a      	adds	r4, #26
 800aeb6:	42b5      	cmp	r5, r6
 800aeb8:	d11a      	bne.n	800aef0 <_printf_common+0xc8>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e008      	b.n	800aed0 <_printf_common+0xa8>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4652      	mov	r2, sl
 800aec2:	4649      	mov	r1, r9
 800aec4:	4638      	mov	r0, r7
 800aec6:	47c0      	blx	r8
 800aec8:	3001      	adds	r0, #1
 800aeca:	d103      	bne.n	800aed4 <_printf_common+0xac>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed4:	3501      	adds	r5, #1
 800aed6:	e7c6      	b.n	800ae66 <_printf_common+0x3e>
 800aed8:	18e1      	adds	r1, r4, r3
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	2030      	movs	r0, #48	; 0x30
 800aede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aee2:	4422      	add	r2, r4
 800aee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aeec:	3302      	adds	r3, #2
 800aeee:	e7c7      	b.n	800ae80 <_printf_common+0x58>
 800aef0:	2301      	movs	r3, #1
 800aef2:	4622      	mov	r2, r4
 800aef4:	4649      	mov	r1, r9
 800aef6:	4638      	mov	r0, r7
 800aef8:	47c0      	blx	r8
 800aefa:	3001      	adds	r0, #1
 800aefc:	d0e6      	beq.n	800aecc <_printf_common+0xa4>
 800aefe:	3601      	adds	r6, #1
 800af00:	e7d9      	b.n	800aeb6 <_printf_common+0x8e>
	...

0800af04 <_printf_i>:
 800af04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af08:	7e0f      	ldrb	r7, [r1, #24]
 800af0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af0c:	2f78      	cmp	r7, #120	; 0x78
 800af0e:	4691      	mov	r9, r2
 800af10:	4680      	mov	r8, r0
 800af12:	460c      	mov	r4, r1
 800af14:	469a      	mov	sl, r3
 800af16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af1a:	d807      	bhi.n	800af2c <_printf_i+0x28>
 800af1c:	2f62      	cmp	r7, #98	; 0x62
 800af1e:	d80a      	bhi.n	800af36 <_printf_i+0x32>
 800af20:	2f00      	cmp	r7, #0
 800af22:	f000 80d8 	beq.w	800b0d6 <_printf_i+0x1d2>
 800af26:	2f58      	cmp	r7, #88	; 0x58
 800af28:	f000 80a3 	beq.w	800b072 <_printf_i+0x16e>
 800af2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af34:	e03a      	b.n	800afac <_printf_i+0xa8>
 800af36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af3a:	2b15      	cmp	r3, #21
 800af3c:	d8f6      	bhi.n	800af2c <_printf_i+0x28>
 800af3e:	a101      	add	r1, pc, #4	; (adr r1, 800af44 <_printf_i+0x40>)
 800af40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800afb1 	.word	0x0800afb1
 800af4c:	0800af2d 	.word	0x0800af2d
 800af50:	0800af2d 	.word	0x0800af2d
 800af54:	0800af2d 	.word	0x0800af2d
 800af58:	0800af2d 	.word	0x0800af2d
 800af5c:	0800afb1 	.word	0x0800afb1
 800af60:	0800af2d 	.word	0x0800af2d
 800af64:	0800af2d 	.word	0x0800af2d
 800af68:	0800af2d 	.word	0x0800af2d
 800af6c:	0800af2d 	.word	0x0800af2d
 800af70:	0800b0bd 	.word	0x0800b0bd
 800af74:	0800afe1 	.word	0x0800afe1
 800af78:	0800b09f 	.word	0x0800b09f
 800af7c:	0800af2d 	.word	0x0800af2d
 800af80:	0800af2d 	.word	0x0800af2d
 800af84:	0800b0df 	.word	0x0800b0df
 800af88:	0800af2d 	.word	0x0800af2d
 800af8c:	0800afe1 	.word	0x0800afe1
 800af90:	0800af2d 	.word	0x0800af2d
 800af94:	0800af2d 	.word	0x0800af2d
 800af98:	0800b0a7 	.word	0x0800b0a7
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	1d1a      	adds	r2, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	602a      	str	r2, [r5, #0]
 800afa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afac:	2301      	movs	r3, #1
 800afae:	e0a3      	b.n	800b0f8 <_printf_i+0x1f4>
 800afb0:	6820      	ldr	r0, [r4, #0]
 800afb2:	6829      	ldr	r1, [r5, #0]
 800afb4:	0606      	lsls	r6, r0, #24
 800afb6:	f101 0304 	add.w	r3, r1, #4
 800afba:	d50a      	bpl.n	800afd2 <_printf_i+0xce>
 800afbc:	680e      	ldr	r6, [r1, #0]
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	da03      	bge.n	800afcc <_printf_i+0xc8>
 800afc4:	232d      	movs	r3, #45	; 0x2d
 800afc6:	4276      	negs	r6, r6
 800afc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afcc:	485e      	ldr	r0, [pc, #376]	; (800b148 <_printf_i+0x244>)
 800afce:	230a      	movs	r3, #10
 800afd0:	e019      	b.n	800b006 <_printf_i+0x102>
 800afd2:	680e      	ldr	r6, [r1, #0]
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afda:	bf18      	it	ne
 800afdc:	b236      	sxthne	r6, r6
 800afde:	e7ef      	b.n	800afc0 <_printf_i+0xbc>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	6820      	ldr	r0, [r4, #0]
 800afe4:	1d19      	adds	r1, r3, #4
 800afe6:	6029      	str	r1, [r5, #0]
 800afe8:	0601      	lsls	r1, r0, #24
 800afea:	d501      	bpl.n	800aff0 <_printf_i+0xec>
 800afec:	681e      	ldr	r6, [r3, #0]
 800afee:	e002      	b.n	800aff6 <_printf_i+0xf2>
 800aff0:	0646      	lsls	r6, r0, #25
 800aff2:	d5fb      	bpl.n	800afec <_printf_i+0xe8>
 800aff4:	881e      	ldrh	r6, [r3, #0]
 800aff6:	4854      	ldr	r0, [pc, #336]	; (800b148 <_printf_i+0x244>)
 800aff8:	2f6f      	cmp	r7, #111	; 0x6f
 800affa:	bf0c      	ite	eq
 800affc:	2308      	moveq	r3, #8
 800affe:	230a      	movne	r3, #10
 800b000:	2100      	movs	r1, #0
 800b002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b006:	6865      	ldr	r5, [r4, #4]
 800b008:	60a5      	str	r5, [r4, #8]
 800b00a:	2d00      	cmp	r5, #0
 800b00c:	bfa2      	ittt	ge
 800b00e:	6821      	ldrge	r1, [r4, #0]
 800b010:	f021 0104 	bicge.w	r1, r1, #4
 800b014:	6021      	strge	r1, [r4, #0]
 800b016:	b90e      	cbnz	r6, 800b01c <_printf_i+0x118>
 800b018:	2d00      	cmp	r5, #0
 800b01a:	d04d      	beq.n	800b0b8 <_printf_i+0x1b4>
 800b01c:	4615      	mov	r5, r2
 800b01e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b022:	fb03 6711 	mls	r7, r3, r1, r6
 800b026:	5dc7      	ldrb	r7, [r0, r7]
 800b028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b02c:	4637      	mov	r7, r6
 800b02e:	42bb      	cmp	r3, r7
 800b030:	460e      	mov	r6, r1
 800b032:	d9f4      	bls.n	800b01e <_printf_i+0x11a>
 800b034:	2b08      	cmp	r3, #8
 800b036:	d10b      	bne.n	800b050 <_printf_i+0x14c>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	07de      	lsls	r6, r3, #31
 800b03c:	d508      	bpl.n	800b050 <_printf_i+0x14c>
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	6861      	ldr	r1, [r4, #4]
 800b042:	4299      	cmp	r1, r3
 800b044:	bfde      	ittt	le
 800b046:	2330      	movle	r3, #48	; 0x30
 800b048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b04c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b050:	1b52      	subs	r2, r2, r5
 800b052:	6122      	str	r2, [r4, #16]
 800b054:	f8cd a000 	str.w	sl, [sp]
 800b058:	464b      	mov	r3, r9
 800b05a:	aa03      	add	r2, sp, #12
 800b05c:	4621      	mov	r1, r4
 800b05e:	4640      	mov	r0, r8
 800b060:	f7ff fee2 	bl	800ae28 <_printf_common>
 800b064:	3001      	adds	r0, #1
 800b066:	d14c      	bne.n	800b102 <_printf_i+0x1fe>
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	b004      	add	sp, #16
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	4835      	ldr	r0, [pc, #212]	; (800b148 <_printf_i+0x244>)
 800b074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b078:	6829      	ldr	r1, [r5, #0]
 800b07a:	6823      	ldr	r3, [r4, #0]
 800b07c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b080:	6029      	str	r1, [r5, #0]
 800b082:	061d      	lsls	r5, r3, #24
 800b084:	d514      	bpl.n	800b0b0 <_printf_i+0x1ac>
 800b086:	07df      	lsls	r7, r3, #31
 800b088:	bf44      	itt	mi
 800b08a:	f043 0320 	orrmi.w	r3, r3, #32
 800b08e:	6023      	strmi	r3, [r4, #0]
 800b090:	b91e      	cbnz	r6, 800b09a <_printf_i+0x196>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	f023 0320 	bic.w	r3, r3, #32
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	2310      	movs	r3, #16
 800b09c:	e7b0      	b.n	800b000 <_printf_i+0xfc>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	f043 0320 	orr.w	r3, r3, #32
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	2378      	movs	r3, #120	; 0x78
 800b0a8:	4828      	ldr	r0, [pc, #160]	; (800b14c <_printf_i+0x248>)
 800b0aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0ae:	e7e3      	b.n	800b078 <_printf_i+0x174>
 800b0b0:	0659      	lsls	r1, r3, #25
 800b0b2:	bf48      	it	mi
 800b0b4:	b2b6      	uxthmi	r6, r6
 800b0b6:	e7e6      	b.n	800b086 <_printf_i+0x182>
 800b0b8:	4615      	mov	r5, r2
 800b0ba:	e7bb      	b.n	800b034 <_printf_i+0x130>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	6826      	ldr	r6, [r4, #0]
 800b0c0:	6961      	ldr	r1, [r4, #20]
 800b0c2:	1d18      	adds	r0, r3, #4
 800b0c4:	6028      	str	r0, [r5, #0]
 800b0c6:	0635      	lsls	r5, r6, #24
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	d501      	bpl.n	800b0d0 <_printf_i+0x1cc>
 800b0cc:	6019      	str	r1, [r3, #0]
 800b0ce:	e002      	b.n	800b0d6 <_printf_i+0x1d2>
 800b0d0:	0670      	lsls	r0, r6, #25
 800b0d2:	d5fb      	bpl.n	800b0cc <_printf_i+0x1c8>
 800b0d4:	8019      	strh	r1, [r3, #0]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6123      	str	r3, [r4, #16]
 800b0da:	4615      	mov	r5, r2
 800b0dc:	e7ba      	b.n	800b054 <_printf_i+0x150>
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	1d1a      	adds	r2, r3, #4
 800b0e2:	602a      	str	r2, [r5, #0]
 800b0e4:	681d      	ldr	r5, [r3, #0]
 800b0e6:	6862      	ldr	r2, [r4, #4]
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f7f5 f880 	bl	80001f0 <memchr>
 800b0f0:	b108      	cbz	r0, 800b0f6 <_printf_i+0x1f2>
 800b0f2:	1b40      	subs	r0, r0, r5
 800b0f4:	6060      	str	r0, [r4, #4]
 800b0f6:	6863      	ldr	r3, [r4, #4]
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b100:	e7a8      	b.n	800b054 <_printf_i+0x150>
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	462a      	mov	r2, r5
 800b106:	4649      	mov	r1, r9
 800b108:	4640      	mov	r0, r8
 800b10a:	47d0      	blx	sl
 800b10c:	3001      	adds	r0, #1
 800b10e:	d0ab      	beq.n	800b068 <_printf_i+0x164>
 800b110:	6823      	ldr	r3, [r4, #0]
 800b112:	079b      	lsls	r3, r3, #30
 800b114:	d413      	bmi.n	800b13e <_printf_i+0x23a>
 800b116:	68e0      	ldr	r0, [r4, #12]
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	4298      	cmp	r0, r3
 800b11c:	bfb8      	it	lt
 800b11e:	4618      	movlt	r0, r3
 800b120:	e7a4      	b.n	800b06c <_printf_i+0x168>
 800b122:	2301      	movs	r3, #1
 800b124:	4632      	mov	r2, r6
 800b126:	4649      	mov	r1, r9
 800b128:	4640      	mov	r0, r8
 800b12a:	47d0      	blx	sl
 800b12c:	3001      	adds	r0, #1
 800b12e:	d09b      	beq.n	800b068 <_printf_i+0x164>
 800b130:	3501      	adds	r5, #1
 800b132:	68e3      	ldr	r3, [r4, #12]
 800b134:	9903      	ldr	r1, [sp, #12]
 800b136:	1a5b      	subs	r3, r3, r1
 800b138:	42ab      	cmp	r3, r5
 800b13a:	dcf2      	bgt.n	800b122 <_printf_i+0x21e>
 800b13c:	e7eb      	b.n	800b116 <_printf_i+0x212>
 800b13e:	2500      	movs	r5, #0
 800b140:	f104 0619 	add.w	r6, r4, #25
 800b144:	e7f5      	b.n	800b132 <_printf_i+0x22e>
 800b146:	bf00      	nop
 800b148:	0800b5a1 	.word	0x0800b5a1
 800b14c:	0800b5b2 	.word	0x0800b5b2

0800b150 <_sbrk_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4d06      	ldr	r5, [pc, #24]	; (800b16c <_sbrk_r+0x1c>)
 800b154:	2300      	movs	r3, #0
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	602b      	str	r3, [r5, #0]
 800b15c:	f7f6 fa98 	bl	8001690 <_sbrk>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_sbrk_r+0x1a>
 800b164:	682b      	ldr	r3, [r5, #0]
 800b166:	b103      	cbz	r3, 800b16a <_sbrk_r+0x1a>
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	20001ff0 	.word	0x20001ff0

0800b170 <__sread>:
 800b170:	b510      	push	{r4, lr}
 800b172:	460c      	mov	r4, r1
 800b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b178:	f000 f8f8 	bl	800b36c <_read_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	bfab      	itete	ge
 800b180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b182:	89a3      	ldrhlt	r3, [r4, #12]
 800b184:	181b      	addge	r3, r3, r0
 800b186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b18a:	bfac      	ite	ge
 800b18c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b18e:	81a3      	strhlt	r3, [r4, #12]
 800b190:	bd10      	pop	{r4, pc}

0800b192 <__swrite>:
 800b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	461f      	mov	r7, r3
 800b198:	898b      	ldrh	r3, [r1, #12]
 800b19a:	05db      	lsls	r3, r3, #23
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	d505      	bpl.n	800b1b0 <__swrite+0x1e>
 800b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f000 f868 	bl	800b280 <_lseek_r>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	4632      	mov	r2, r6
 800b1be:	463b      	mov	r3, r7
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	f000 b817 	b.w	800b1f8 <_write_r>

0800b1ca <__sseek>:
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d2:	f000 f855 	bl	800b280 <_lseek_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	bf15      	itete	ne
 800b1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1e6:	81a3      	strheq	r3, [r4, #12]
 800b1e8:	bf18      	it	ne
 800b1ea:	81a3      	strhne	r3, [r4, #12]
 800b1ec:	bd10      	pop	{r4, pc}

0800b1ee <__sclose>:
 800b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f2:	f000 b813 	b.w	800b21c <_close_r>
	...

0800b1f8 <_write_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d07      	ldr	r5, [pc, #28]	; (800b218 <_write_r+0x20>)
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	4608      	mov	r0, r1
 800b200:	4611      	mov	r1, r2
 800b202:	2200      	movs	r2, #0
 800b204:	602a      	str	r2, [r5, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	f7f5 f9eb 	bl	80005e2 <_write>
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	d102      	bne.n	800b216 <_write_r+0x1e>
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	b103      	cbz	r3, 800b216 <_write_r+0x1e>
 800b214:	6023      	str	r3, [r4, #0]
 800b216:	bd38      	pop	{r3, r4, r5, pc}
 800b218:	20001ff0 	.word	0x20001ff0

0800b21c <_close_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d06      	ldr	r5, [pc, #24]	; (800b238 <_close_r+0x1c>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	602b      	str	r3, [r5, #0]
 800b228:	f7f6 f9fd 	bl	8001626 <_close>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_close_r+0x1a>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_close_r+0x1a>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20001ff0 	.word	0x20001ff0

0800b23c <_fstat_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	; (800b25c <_fstat_r+0x20>)
 800b240:	2300      	movs	r3, #0
 800b242:	4604      	mov	r4, r0
 800b244:	4608      	mov	r0, r1
 800b246:	4611      	mov	r1, r2
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	f7f6 f9f8 	bl	800163e <_fstat>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d102      	bne.n	800b258 <_fstat_r+0x1c>
 800b252:	682b      	ldr	r3, [r5, #0]
 800b254:	b103      	cbz	r3, 800b258 <_fstat_r+0x1c>
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	bf00      	nop
 800b25c:	20001ff0 	.word	0x20001ff0

0800b260 <_isatty_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	; (800b27c <_isatty_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f7f6 f9f7 	bl	800165e <_isatty>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_isatty_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_isatty_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	20001ff0 	.word	0x20001ff0

0800b280 <_lseek_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4d07      	ldr	r5, [pc, #28]	; (800b2a0 <_lseek_r+0x20>)
 800b284:	4604      	mov	r4, r0
 800b286:	4608      	mov	r0, r1
 800b288:	4611      	mov	r1, r2
 800b28a:	2200      	movs	r2, #0
 800b28c:	602a      	str	r2, [r5, #0]
 800b28e:	461a      	mov	r2, r3
 800b290:	f7f6 f9f0 	bl	8001674 <_lseek>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	d102      	bne.n	800b29e <_lseek_r+0x1e>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	b103      	cbz	r3, 800b29e <_lseek_r+0x1e>
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	20001ff0 	.word	0x20001ff0

0800b2a4 <memcpy>:
 800b2a4:	440a      	add	r2, r1
 800b2a6:	4291      	cmp	r1, r2
 800b2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ac:	d100      	bne.n	800b2b0 <memcpy+0xc>
 800b2ae:	4770      	bx	lr
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	d1f9      	bne.n	800b2b2 <memcpy+0xe>
 800b2be:	bd10      	pop	{r4, pc}

0800b2c0 <memmove>:
 800b2c0:	4288      	cmp	r0, r1
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	eb01 0402 	add.w	r4, r1, r2
 800b2c8:	d902      	bls.n	800b2d0 <memmove+0x10>
 800b2ca:	4284      	cmp	r4, r0
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	d807      	bhi.n	800b2e0 <memmove+0x20>
 800b2d0:	1e43      	subs	r3, r0, #1
 800b2d2:	42a1      	cmp	r1, r4
 800b2d4:	d008      	beq.n	800b2e8 <memmove+0x28>
 800b2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2de:	e7f8      	b.n	800b2d2 <memmove+0x12>
 800b2e0:	4402      	add	r2, r0
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	428a      	cmp	r2, r1
 800b2e6:	d100      	bne.n	800b2ea <memmove+0x2a>
 800b2e8:	bd10      	pop	{r4, pc}
 800b2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2f2:	e7f7      	b.n	800b2e4 <memmove+0x24>

0800b2f4 <__malloc_lock>:
 800b2f4:	4801      	ldr	r0, [pc, #4]	; (800b2fc <__malloc_lock+0x8>)
 800b2f6:	f7ff baf3 	b.w	800a8e0 <__retarget_lock_acquire_recursive>
 800b2fa:	bf00      	nop
 800b2fc:	20001fe4 	.word	0x20001fe4

0800b300 <__malloc_unlock>:
 800b300:	4801      	ldr	r0, [pc, #4]	; (800b308 <__malloc_unlock+0x8>)
 800b302:	f7ff baee 	b.w	800a8e2 <__retarget_lock_release_recursive>
 800b306:	bf00      	nop
 800b308:	20001fe4 	.word	0x20001fe4

0800b30c <_realloc_r>:
 800b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b310:	4680      	mov	r8, r0
 800b312:	4614      	mov	r4, r2
 800b314:	460e      	mov	r6, r1
 800b316:	b921      	cbnz	r1, 800b322 <_realloc_r+0x16>
 800b318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b31c:	4611      	mov	r1, r2
 800b31e:	f7ff bbb3 	b.w	800aa88 <_malloc_r>
 800b322:	b92a      	cbnz	r2, 800b330 <_realloc_r+0x24>
 800b324:	f7ff fb44 	bl	800a9b0 <_free_r>
 800b328:	4625      	mov	r5, r4
 800b32a:	4628      	mov	r0, r5
 800b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b330:	f000 f82e 	bl	800b390 <_malloc_usable_size_r>
 800b334:	4284      	cmp	r4, r0
 800b336:	4607      	mov	r7, r0
 800b338:	d802      	bhi.n	800b340 <_realloc_r+0x34>
 800b33a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b33e:	d812      	bhi.n	800b366 <_realloc_r+0x5a>
 800b340:	4621      	mov	r1, r4
 800b342:	4640      	mov	r0, r8
 800b344:	f7ff fba0 	bl	800aa88 <_malloc_r>
 800b348:	4605      	mov	r5, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d0ed      	beq.n	800b32a <_realloc_r+0x1e>
 800b34e:	42bc      	cmp	r4, r7
 800b350:	4622      	mov	r2, r4
 800b352:	4631      	mov	r1, r6
 800b354:	bf28      	it	cs
 800b356:	463a      	movcs	r2, r7
 800b358:	f7ff ffa4 	bl	800b2a4 <memcpy>
 800b35c:	4631      	mov	r1, r6
 800b35e:	4640      	mov	r0, r8
 800b360:	f7ff fb26 	bl	800a9b0 <_free_r>
 800b364:	e7e1      	b.n	800b32a <_realloc_r+0x1e>
 800b366:	4635      	mov	r5, r6
 800b368:	e7df      	b.n	800b32a <_realloc_r+0x1e>
	...

0800b36c <_read_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_read_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7f6 f936 	bl	80015ec <_read>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_read_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_read_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	20001ff0 	.word	0x20001ff0

0800b390 <_malloc_usable_size_r>:
 800b390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b394:	1f18      	subs	r0, r3, #4
 800b396:	2b00      	cmp	r3, #0
 800b398:	bfbc      	itt	lt
 800b39a:	580b      	ldrlt	r3, [r1, r0]
 800b39c:	18c0      	addlt	r0, r0, r3
 800b39e:	4770      	bx	lr

0800b3a0 <_init>:
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a2:	bf00      	nop
 800b3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3a6:	bc08      	pop	{r3}
 800b3a8:	469e      	mov	lr, r3
 800b3aa:	4770      	bx	lr

0800b3ac <_fini>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr
